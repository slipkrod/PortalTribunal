'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRPT_InventarioGeneral"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRPT_InventarioGeneral
    Inherits Global.System.Data.DataSet
    
    Private tableArchivo_Descripciones_Archivisticas As Archivo_Descripciones_ArchivisticasDataTable
    
    Private tableReporte_Inventario_General As Reporte_Inventario_GeneralDataTable
    
    Private relationArchivo_Descripciones_Archivisticas_Reporte_Inventario_General As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Archivo_Descripciones_Archivisticas")) Is Nothing) Then
                MyBase.Tables.Add(New Archivo_Descripciones_ArchivisticasDataTable(ds.Tables("Archivo_Descripciones_Archivisticas")))
            End If
            If (Not (ds.Tables("Reporte_Inventario_General")) Is Nothing) Then
                MyBase.Tables.Add(New Reporte_Inventario_GeneralDataTable(ds.Tables("Reporte_Inventario_General")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Archivo_Descripciones_Archivisticas() As Archivo_Descripciones_ArchivisticasDataTable
        Get
            Return Me.tableArchivo_Descripciones_Archivisticas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reporte_Inventario_General() As Reporte_Inventario_GeneralDataTable
        Get
            Return Me.tableReporte_Inventario_General
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRPT_InventarioGeneral = CType(MyBase.Clone,dsRPT_InventarioGeneral)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Archivo_Descripciones_Archivisticas")) Is Nothing) Then
                MyBase.Tables.Add(New Archivo_Descripciones_ArchivisticasDataTable(ds.Tables("Archivo_Descripciones_Archivisticas")))
            End If
            If (Not (ds.Tables("Reporte_Inventario_General")) Is Nothing) Then
                MyBase.Tables.Add(New Reporte_Inventario_GeneralDataTable(ds.Tables("Reporte_Inventario_General")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableArchivo_Descripciones_Archivisticas = CType(MyBase.Tables("Archivo_Descripciones_Archivisticas"),Archivo_Descripciones_ArchivisticasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableArchivo_Descripciones_Archivisticas) Is Nothing) Then
                Me.tableArchivo_Descripciones_Archivisticas.InitVars
            End If
        End If
        Me.tableReporte_Inventario_General = CType(MyBase.Tables("Reporte_Inventario_General"),Reporte_Inventario_GeneralDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReporte_Inventario_General) Is Nothing) Then
                Me.tableReporte_Inventario_General.InitVars
            End If
        End If
        Me.relationArchivo_Descripciones_Archivisticas_Reporte_Inventario_General = Me.Relations("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRPT_InventarioGeneral"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRPT_InventarioGeneral.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableArchivo_Descripciones_Archivisticas = New Archivo_Descripciones_ArchivisticasDataTable
        MyBase.Tables.Add(Me.tableArchivo_Descripciones_Archivisticas)
        Me.tableReporte_Inventario_General = New Reporte_Inventario_GeneralDataTable
        MyBase.Tables.Add(Me.tableReporte_Inventario_General)
        Me.relationArchivo_Descripciones_Archivisticas_Reporte_Inventario_General = New Global.System.Data.DataRelation("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General", New Global.System.Data.DataColumn() {Me.tableArchivo_Descripciones_Archivisticas.serieIdDescripcionColumn}, New Global.System.Data.DataColumn() {Me.tableReporte_Inventario_General.expedientePIDColumn}, false)
        Me.Relations.Add(Me.relationArchivo_Descripciones_Archivisticas_Reporte_Inventario_General)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeArchivo_Descripciones_Archivisticas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReporte_Inventario_General() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRPT_InventarioGeneral = New dsRPT_InventarioGeneral
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Archivo_Descripciones_ArchivisticasRowChangeEventHandler(ByVal sender As Object, ByVal e As Archivo_Descripciones_ArchivisticasRowChangeEvent)
    
    Public Delegate Sub Reporte_Inventario_GeneralRowChangeEventHandler(ByVal sender As Object, ByVal e As Reporte_Inventario_GeneralRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Archivo_Descripciones_ArchivisticasDataTable
        Inherits Global.System.Data.TypedTableBase(Of Archivo_Descripciones_ArchivisticasRow)
        
        Private columnfondoDescripcion As Global.System.Data.DataColumn
        
        Private columnsecciionDescripcion As Global.System.Data.DataColumn
        
        Private columnsubSeccionDescripcion As Global.System.Data.DataColumn
        
        Private columnserieIdDescripcion As Global.System.Data.DataColumn
        
        Private columnserieDescripcion As Global.System.Data.DataColumn
        
        Private columnserieCodigo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Archivo_Descripciones_Archivisticas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fondoDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfondoDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secciionDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecciionDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subSeccionDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubSeccionDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieIdDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieIdDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieCodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Archivo_Descripciones_ArchivisticasRow
            Get
                Return CType(Me.Rows(index),Archivo_Descripciones_ArchivisticasRow)
            End Get
        End Property
        
        Public Event Archivo_Descripciones_ArchivisticasRowChanging As Archivo_Descripciones_ArchivisticasRowChangeEventHandler
        
        Public Event Archivo_Descripciones_ArchivisticasRowChanged As Archivo_Descripciones_ArchivisticasRowChangeEventHandler
        
        Public Event Archivo_Descripciones_ArchivisticasRowDeleting As Archivo_Descripciones_ArchivisticasRowChangeEventHandler
        
        Public Event Archivo_Descripciones_ArchivisticasRowDeleted As Archivo_Descripciones_ArchivisticasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddArchivo_Descripciones_ArchivisticasRow(ByVal row As Archivo_Descripciones_ArchivisticasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddArchivo_Descripciones_ArchivisticasRow(ByVal fondoDescripcion As String, ByVal secciionDescripcion As String, ByVal subSeccionDescripcion As String, ByVal serieIdDescripcion As Integer, ByVal serieDescripcion As String, ByVal serieCodigo As String) As Archivo_Descripciones_ArchivisticasRow
            Dim rowArchivo_Descripciones_ArchivisticasRow As Archivo_Descripciones_ArchivisticasRow = CType(Me.NewRow,Archivo_Descripciones_ArchivisticasRow)
            Dim columnValuesArray() As Object = New Object() {fondoDescripcion, secciionDescripcion, subSeccionDescripcion, serieIdDescripcion, serieDescripcion, serieCodigo}
            rowArchivo_Descripciones_ArchivisticasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowArchivo_Descripciones_ArchivisticasRow)
            Return rowArchivo_Descripciones_ArchivisticasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Archivo_Descripciones_ArchivisticasDataTable = CType(MyBase.Clone,Archivo_Descripciones_ArchivisticasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Archivo_Descripciones_ArchivisticasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfondoDescripcion = MyBase.Columns("fondoDescripcion")
            Me.columnsecciionDescripcion = MyBase.Columns("secciionDescripcion")
            Me.columnsubSeccionDescripcion = MyBase.Columns("subSeccionDescripcion")
            Me.columnserieIdDescripcion = MyBase.Columns("serieIdDescripcion")
            Me.columnserieDescripcion = MyBase.Columns("serieDescripcion")
            Me.columnserieCodigo = MyBase.Columns("serieCodigo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfondoDescripcion = New Global.System.Data.DataColumn("fondoDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfondoDescripcion)
            Me.columnsecciionDescripcion = New Global.System.Data.DataColumn("secciionDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecciionDescripcion)
            Me.columnsubSeccionDescripcion = New Global.System.Data.DataColumn("subSeccionDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubSeccionDescripcion)
            Me.columnserieIdDescripcion = New Global.System.Data.DataColumn("serieIdDescripcion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieIdDescripcion)
            Me.columnserieDescripcion = New Global.System.Data.DataColumn("serieDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieDescripcion)
            Me.columnserieCodigo = New Global.System.Data.DataColumn("serieCodigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieCodigo)
            Me.columnfondoDescripcion.MaxLength = 150
            Me.columnsecciionDescripcion.MaxLength = 150
            Me.columnsubSeccionDescripcion.MaxLength = 150
            Me.columnserieDescripcion.MaxLength = 150
            Me.columnserieCodigo.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewArchivo_Descripciones_ArchivisticasRow() As Archivo_Descripciones_ArchivisticasRow
            Return CType(Me.NewRow,Archivo_Descripciones_ArchivisticasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Archivo_Descripciones_ArchivisticasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Archivo_Descripciones_ArchivisticasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Archivo_Descripciones_ArchivisticasRowChangedEvent) Is Nothing) Then
                RaiseEvent Archivo_Descripciones_ArchivisticasRowChanged(Me, New Archivo_Descripciones_ArchivisticasRowChangeEvent(CType(e.Row,Archivo_Descripciones_ArchivisticasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Archivo_Descripciones_ArchivisticasRowChangingEvent) Is Nothing) Then
                RaiseEvent Archivo_Descripciones_ArchivisticasRowChanging(Me, New Archivo_Descripciones_ArchivisticasRowChangeEvent(CType(e.Row,Archivo_Descripciones_ArchivisticasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Archivo_Descripciones_ArchivisticasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Archivo_Descripciones_ArchivisticasRowDeleted(Me, New Archivo_Descripciones_ArchivisticasRowChangeEvent(CType(e.Row,Archivo_Descripciones_ArchivisticasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Archivo_Descripciones_ArchivisticasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Archivo_Descripciones_ArchivisticasRowDeleting(Me, New Archivo_Descripciones_ArchivisticasRowChangeEvent(CType(e.Row,Archivo_Descripciones_ArchivisticasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveArchivo_Descripciones_ArchivisticasRow(ByVal row As Archivo_Descripciones_ArchivisticasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRPT_InventarioGeneral = New dsRPT_InventarioGeneral
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Archivo_Descripciones_ArchivisticasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Reporte_Inventario_GeneralDataTable
        Inherits Global.System.Data.TypedTableBase(Of Reporte_Inventario_GeneralRow)
        
        Private columnfondoDescripcion As Global.System.Data.DataColumn
        
        Private columnsecciionDescripcion As Global.System.Data.DataColumn
        
        Private columnsubSeccionDescripcion As Global.System.Data.DataColumn
        
        Private columnserieDescripcion As Global.System.Data.DataColumn
        
        Private columnexpedientePID As Global.System.Data.DataColumn
        
        Private columnexpedienteCodigo As Global.System.Data.DataColumn
        
        Private columnexpedienteDescripcion As Global.System.Data.DataColumn
        
        Private columnalcance As Global.System.Data.DataColumn
        
        Private columnapertura As Global.System.Data.DataColumn
        
        Private columncierre As Global.System.Data.DataColumn
        
        Private columnadministrativo As Global.System.Data.DataColumn
        
        Private columnlegal As Global.System.Data.DataColumn
        
        Private columnfiscal As Global.System.Data.DataColumn
        
        Private columninformativo As Global.System.Data.DataColumn
        
        Private columntestimonial As Global.System.Data.DataColumn
        
        Private columnevidencial As Global.System.Data.DataColumn
        
        Private columnplazoAT As Global.System.Data.DataColumn
        
        Private columnplazoAC As Global.System.Data.DataColumn
        
        Private columnnotas As Global.System.Data.DataColumn
        
        Private columnfojas As Global.System.Data.DataColumn
        
        Private columnsoporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reporte_Inventario_General"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fondoDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfondoDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property secciionDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsecciionDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subSeccionDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubSeccionDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expedientePIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpedientePID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expedienteCodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpedienteCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expedienteDescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpedienteDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alcanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalcance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property aperturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cierreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncierre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administrativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnadministrativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property legalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property informativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninformativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testimonialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntestimonial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property evidencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevidencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazoAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazoACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplazoAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fojasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfojas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Reporte_Inventario_GeneralRow
            Get
                Return CType(Me.Rows(index),Reporte_Inventario_GeneralRow)
            End Get
        End Property
        
        Public Event Reporte_Inventario_GeneralRowChanging As Reporte_Inventario_GeneralRowChangeEventHandler
        
        Public Event Reporte_Inventario_GeneralRowChanged As Reporte_Inventario_GeneralRowChangeEventHandler
        
        Public Event Reporte_Inventario_GeneralRowDeleting As Reporte_Inventario_GeneralRowChangeEventHandler
        
        Public Event Reporte_Inventario_GeneralRowDeleted As Reporte_Inventario_GeneralRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReporte_Inventario_GeneralRow(ByVal row As Reporte_Inventario_GeneralRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReporte_Inventario_GeneralRow( _
                    ByVal fondoDescripcion As String,  _
                    ByVal secciionDescripcion As String,  _
                    ByVal subSeccionDescripcion As String,  _
                    ByVal serieDescripcion As String,  _
                    ByVal parentArchivo_Descripciones_ArchivisticasRowByArchivo_Descripciones_Archivisticas_Reporte_Inventario_General As Archivo_Descripciones_ArchivisticasRow,  _
                    ByVal expedienteCodigo As String,  _
                    ByVal expedienteDescripcion As String,  _
                    ByVal alcance As String,  _
                    ByVal apertura As String,  _
                    ByVal cierre As String,  _
                    ByVal administrativo As String,  _
                    ByVal legal As String,  _
                    ByVal fiscal As String,  _
                    ByVal informativo As String,  _
                    ByVal testimonial As String,  _
                    ByVal evidencial As String,  _
                    ByVal plazoAT As String,  _
                    ByVal plazoAC As String,  _
                    ByVal notas As String,  _
                    ByVal fojas As Integer,  _
                    ByVal soporte As String) As Reporte_Inventario_GeneralRow
            Dim rowReporte_Inventario_GeneralRow As Reporte_Inventario_GeneralRow = CType(Me.NewRow,Reporte_Inventario_GeneralRow)
            Dim columnValuesArray() As Object = New Object() {fondoDescripcion, secciionDescripcion, subSeccionDescripcion, serieDescripcion, Nothing, expedienteCodigo, expedienteDescripcion, alcance, apertura, cierre, administrativo, legal, fiscal, informativo, testimonial, evidencial, plazoAT, plazoAC, notas, fojas, soporte}
            If (Not (parentArchivo_Descripciones_ArchivisticasRowByArchivo_Descripciones_Archivisticas_Reporte_Inventario_General) Is Nothing) Then
                columnValuesArray(4) = parentArchivo_Descripciones_ArchivisticasRowByArchivo_Descripciones_Archivisticas_Reporte_Inventario_General(3)
            End If
            rowReporte_Inventario_GeneralRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReporte_Inventario_GeneralRow)
            Return rowReporte_Inventario_GeneralRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Reporte_Inventario_GeneralDataTable = CType(MyBase.Clone,Reporte_Inventario_GeneralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Reporte_Inventario_GeneralDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfondoDescripcion = MyBase.Columns("fondoDescripcion")
            Me.columnsecciionDescripcion = MyBase.Columns("secciionDescripcion")
            Me.columnsubSeccionDescripcion = MyBase.Columns("subSeccionDescripcion")
            Me.columnserieDescripcion = MyBase.Columns("serieDescripcion")
            Me.columnexpedientePID = MyBase.Columns("expedientePID")
            Me.columnexpedienteCodigo = MyBase.Columns("expedienteCodigo")
            Me.columnexpedienteDescripcion = MyBase.Columns("expedienteDescripcion")
            Me.columnalcance = MyBase.Columns("alcance")
            Me.columnapertura = MyBase.Columns("apertura")
            Me.columncierre = MyBase.Columns("cierre")
            Me.columnadministrativo = MyBase.Columns("administrativo")
            Me.columnlegal = MyBase.Columns("legal")
            Me.columnfiscal = MyBase.Columns("fiscal")
            Me.columninformativo = MyBase.Columns("informativo")
            Me.columntestimonial = MyBase.Columns("testimonial")
            Me.columnevidencial = MyBase.Columns("evidencial")
            Me.columnplazoAT = MyBase.Columns("plazoAT")
            Me.columnplazoAC = MyBase.Columns("plazoAC")
            Me.columnnotas = MyBase.Columns("notas")
            Me.columnfojas = MyBase.Columns("fojas")
            Me.columnsoporte = MyBase.Columns("soporte")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfondoDescripcion = New Global.System.Data.DataColumn("fondoDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfondoDescripcion)
            Me.columnsecciionDescripcion = New Global.System.Data.DataColumn("secciionDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsecciionDescripcion)
            Me.columnsubSeccionDescripcion = New Global.System.Data.DataColumn("subSeccionDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubSeccionDescripcion)
            Me.columnserieDescripcion = New Global.System.Data.DataColumn("serieDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieDescripcion)
            Me.columnexpedientePID = New Global.System.Data.DataColumn("expedientePID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpedientePID)
            Me.columnexpedienteCodigo = New Global.System.Data.DataColumn("expedienteCodigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpedienteCodigo)
            Me.columnexpedienteDescripcion = New Global.System.Data.DataColumn("expedienteDescripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpedienteDescripcion)
            Me.columnalcance = New Global.System.Data.DataColumn("alcance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalcance)
            Me.columnapertura = New Global.System.Data.DataColumn("apertura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapertura)
            Me.columncierre = New Global.System.Data.DataColumn("cierre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncierre)
            Me.columnadministrativo = New Global.System.Data.DataColumn("administrativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrativo)
            Me.columnlegal = New Global.System.Data.DataColumn("legal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlegal)
            Me.columnfiscal = New Global.System.Data.DataColumn("fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfiscal)
            Me.columninformativo = New Global.System.Data.DataColumn("informativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninformativo)
            Me.columntestimonial = New Global.System.Data.DataColumn("testimonial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestimonial)
            Me.columnevidencial = New Global.System.Data.DataColumn("evidencial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevidencial)
            Me.columnplazoAT = New Global.System.Data.DataColumn("plazoAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazoAT)
            Me.columnplazoAC = New Global.System.Data.DataColumn("plazoAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazoAC)
            Me.columnnotas = New Global.System.Data.DataColumn("notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotas)
            Me.columnfojas = New Global.System.Data.DataColumn("fojas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfojas)
            Me.columnsoporte = New Global.System.Data.DataColumn("soporte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoporte)
            Me.columnfondoDescripcion.MaxLength = 150
            Me.columnsecciionDescripcion.MaxLength = 150
            Me.columnsubSeccionDescripcion.MaxLength = 150
            Me.columnserieDescripcion.MaxLength = 150
            Me.columnexpedienteCodigo.MaxLength = 2147483647
            Me.columnexpedienteDescripcion.MaxLength = 150
            Me.columnalcance.MaxLength = 2147483647
            Me.columnapertura.MaxLength = 2147483647
            Me.columncierre.MaxLength = 2147483647
            Me.columnadministrativo.MaxLength = 2147483647
            Me.columnlegal.MaxLength = 2147483647
            Me.columnfiscal.MaxLength = 2147483647
            Me.columninformativo.MaxLength = 2147483647
            Me.columntestimonial.MaxLength = 2147483647
            Me.columnevidencial.MaxLength = 2147483647
            Me.columnplazoAT.MaxLength = 2147483647
            Me.columnplazoAC.MaxLength = 2147483647
            Me.columnnotas.MaxLength = 2147483647
            Me.columnsoporte.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReporte_Inventario_GeneralRow() As Reporte_Inventario_GeneralRow
            Return CType(Me.NewRow,Reporte_Inventario_GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Reporte_Inventario_GeneralRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Reporte_Inventario_GeneralRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Reporte_Inventario_GeneralRowChangedEvent) Is Nothing) Then
                RaiseEvent Reporte_Inventario_GeneralRowChanged(Me, New Reporte_Inventario_GeneralRowChangeEvent(CType(e.Row,Reporte_Inventario_GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Reporte_Inventario_GeneralRowChangingEvent) Is Nothing) Then
                RaiseEvent Reporte_Inventario_GeneralRowChanging(Me, New Reporte_Inventario_GeneralRowChangeEvent(CType(e.Row,Reporte_Inventario_GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Reporte_Inventario_GeneralRowDeletedEvent) Is Nothing) Then
                RaiseEvent Reporte_Inventario_GeneralRowDeleted(Me, New Reporte_Inventario_GeneralRowChangeEvent(CType(e.Row,Reporte_Inventario_GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Reporte_Inventario_GeneralRowDeletingEvent) Is Nothing) Then
                RaiseEvent Reporte_Inventario_GeneralRowDeleting(Me, New Reporte_Inventario_GeneralRowChangeEvent(CType(e.Row,Reporte_Inventario_GeneralRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReporte_Inventario_GeneralRow(ByVal row As Reporte_Inventario_GeneralRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRPT_InventarioGeneral = New dsRPT_InventarioGeneral
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Reporte_Inventario_GeneralDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Archivo_Descripciones_ArchivisticasRow
        Inherits Global.System.Data.DataRow
        
        Private tableArchivo_Descripciones_Archivisticas As Archivo_Descripciones_ArchivisticasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableArchivo_Descripciones_Archivisticas = CType(Me.Table,Archivo_Descripciones_ArchivisticasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fondoDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.fondoDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fondoDescripcion' in table 'Archivo_Descripciones_Archivist"& _ 
                            "icas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.fondoDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secciionDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.secciionDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'secciionDescripcion' in table 'Archivo_Descripciones_Archiv"& _ 
                            "isticas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.secciionDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subSeccionDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.subSeccionDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subSeccionDescripcion' in table 'Archivo_Descripciones_Arch"& _ 
                            "ivisticas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.subSeccionDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieIdDescripcion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.serieIdDescripcionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'serieIdDescripcion' in table 'Archivo_Descripciones_Archivi"& _ 
                            "sticas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.serieIdDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.serieDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'serieDescripcion' in table 'Archivo_Descripciones_Archivist"& _ 
                            "icas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.serieDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieCodigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableArchivo_Descripciones_Archivisticas.serieCodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'serieCodigo' in table 'Archivo_Descripciones_Archivisticas'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArchivo_Descripciones_Archivisticas.serieCodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfondoDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.fondoDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfondoDescripcionNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.fondoDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssecciionDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.secciionDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsecciionDescripcionNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.secciionDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubSeccionDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.subSeccionDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubSeccionDescripcionNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.subSeccionDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieIdDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.serieIdDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieIdDescripcionNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.serieIdDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.serieDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieDescripcionNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.serieDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieCodigoNull() As Boolean
            Return Me.IsNull(Me.tableArchivo_Descripciones_Archivisticas.serieCodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieCodigoNull()
            Me(Me.tableArchivo_Descripciones_Archivisticas.serieCodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetReporte_Inventario_GeneralRows() As Reporte_Inventario_GeneralRow()
            If (Me.Table.ChildRelations("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General") Is Nothing) Then
                Return New Reporte_Inventario_GeneralRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General")),Reporte_Inventario_GeneralRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Reporte_Inventario_GeneralRow
        Inherits Global.System.Data.DataRow
        
        Private tableReporte_Inventario_General As Reporte_Inventario_GeneralDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReporte_Inventario_General = CType(Me.Table,Reporte_Inventario_GeneralDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fondoDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.fondoDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fondoDescripcion' in table 'Reporte_Inventario_General' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.fondoDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property secciionDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.secciionDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'secciionDescripcion' in table 'Reporte_Inventario_General' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.secciionDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subSeccionDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.subSeccionDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subSeccionDescripcion' in table 'Reporte_Inventario_General"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.subSeccionDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.serieDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'serieDescripcion' in table 'Reporte_Inventario_General' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.serieDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expedientePID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.expedientePIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'expedientePID' in table 'Reporte_Inventario_General' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.expedientePIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expedienteCodigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.expedienteCodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'expedienteCodigo' in table 'Reporte_Inventario_General' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.expedienteCodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expedienteDescripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.expedienteDescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'expedienteDescripcion' in table 'Reporte_Inventario_General"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.expedienteDescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alcance() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.alcanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'alcance' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.alcanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apertura() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.aperturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'apertura' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.aperturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cierre() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.cierreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cierre' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.cierreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrativo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.administrativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'administrativo' in table 'Reporte_Inventario_General' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.administrativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property legal() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.legalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'legal' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.legalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.fiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fiscal' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.fiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property informativo() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.informativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'informativo' in table 'Reporte_Inventario_General' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.informativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testimonial() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.testimonialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'testimonial' in table 'Reporte_Inventario_General' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.testimonialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property evidencial() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.evidencialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'evidencial' in table 'Reporte_Inventario_General' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.evidencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazoAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.plazoATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'plazoAT' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.plazoATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazoAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.plazoACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'plazoAC' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.plazoACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notas() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.notasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notas' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.notasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fojas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.fojasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fojas' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.fojasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soporte() As String
            Get
                Try 
                    Return CType(Me(Me.tableReporte_Inventario_General.soporteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'soporte' in table 'Reporte_Inventario_General' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReporte_Inventario_General.soporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Archivo_Descripciones_ArchivisticasRow() As Archivo_Descripciones_ArchivisticasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General")),Archivo_Descripciones_ArchivisticasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Archivo_Descripciones_Archivisticas_Reporte_Inventario_General"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfondoDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.fondoDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfondoDescripcionNull()
            Me(Me.tableReporte_Inventario_General.fondoDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssecciionDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.secciionDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsecciionDescripcionNull()
            Me(Me.tableReporte_Inventario_General.secciionDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubSeccionDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.subSeccionDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubSeccionDescripcionNull()
            Me(Me.tableReporte_Inventario_General.subSeccionDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.serieDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieDescripcionNull()
            Me(Me.tableReporte_Inventario_General.serieDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexpedientePIDNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.expedientePIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexpedientePIDNull()
            Me(Me.tableReporte_Inventario_General.expedientePIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexpedienteCodigoNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.expedienteCodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexpedienteCodigoNull()
            Me(Me.tableReporte_Inventario_General.expedienteCodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsexpedienteDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.expedienteDescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetexpedienteDescripcionNull()
            Me(Me.tableReporte_Inventario_General.expedienteDescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalcanceNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.alcanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalcanceNull()
            Me(Me.tableReporte_Inventario_General.alcanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaperturaNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.aperturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaperturaNull()
            Me(Me.tableReporte_Inventario_General.aperturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscierreNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.cierreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcierreNull()
            Me(Me.tableReporte_Inventario_General.cierreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadministrativoNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.administrativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadministrativoNull()
            Me(Me.tableReporte_Inventario_General.administrativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslegalNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.legalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlegalNull()
            Me(Me.tableReporte_Inventario_General.legalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfiscalNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.fiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfiscalNull()
            Me(Me.tableReporte_Inventario_General.fiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinformativoNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.informativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinformativoNull()
            Me(Me.tableReporte_Inventario_General.informativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestimonialNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.testimonialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestimonialNull()
            Me(Me.tableReporte_Inventario_General.testimonialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsevidencialNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.evidencialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetevidencialNull()
            Me(Me.tableReporte_Inventario_General.evidencialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoATNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.plazoATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoATNull()
            Me(Me.tableReporte_Inventario_General.plazoATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazoACNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.plazoACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazoACNull()
            Me(Me.tableReporte_Inventario_General.plazoACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnotasNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.notasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnotasNull()
            Me(Me.tableReporte_Inventario_General.notasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfojasNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.fojasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfojasNull()
            Me(Me.tableReporte_Inventario_General.fojasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssoporteNull() As Boolean
            Return Me.IsNull(Me.tableReporte_Inventario_General.soporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsoporteNull()
            Me(Me.tableReporte_Inventario_General.soporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Archivo_Descripciones_ArchivisticasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Archivo_Descripciones_ArchivisticasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Archivo_Descripciones_ArchivisticasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Archivo_Descripciones_ArchivisticasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Reporte_Inventario_GeneralRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Reporte_Inventario_GeneralRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Reporte_Inventario_GeneralRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Reporte_Inventario_GeneralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsRPT_InventarioGeneralTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Archivo_Descripciones_ArchivisticasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Archivo_Descripciones_Archivisticas"
            tableMapping.ColumnMappings.Add("fondoDescripcion", "fondoDescripcion")
            tableMapping.ColumnMappings.Add("secciionDescripcion", "secciionDescripcion")
            tableMapping.ColumnMappings.Add("subSeccionDescripcion", "subSeccionDescripcion")
            tableMapping.ColumnMappings.Add("serieIdDescripcion", "serieIdDescripcion")
            tableMapping.ColumnMappings.Add("serieDescripcion", "serieDescripcion")
            tableMapping.ColumnMappings.Add("serieCodigo", "serieCodigo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("Archivo_DatosConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Reporte_Inventario_General_Series"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idArchivo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRPT_InventarioGeneral.Archivo_Descripciones_ArchivisticasDataTable, ByVal idArchivo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (idArchivo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idArchivo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal idArchivo As Global.System.Nullable(Of Integer)) As dsRPT_InventarioGeneral.Archivo_Descripciones_ArchivisticasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (idArchivo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idArchivo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsRPT_InventarioGeneral.Archivo_Descripciones_ArchivisticasDataTable = New dsRPT_InventarioGeneral.Archivo_Descripciones_ArchivisticasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Reporte_Inventario_GeneralTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Reporte_Inventario_General"
            tableMapping.ColumnMappings.Add("fondoDescripcion", "fondoDescripcion")
            tableMapping.ColumnMappings.Add("secciionDescripcion", "secciionDescripcion")
            tableMapping.ColumnMappings.Add("subSeccionDescripcion", "subSeccionDescripcion")
            tableMapping.ColumnMappings.Add("serieDescripcion", "serieDescripcion")
            tableMapping.ColumnMappings.Add("expedientePID", "expedientePID")
            tableMapping.ColumnMappings.Add("expedienteCodigo", "expedienteCodigo")
            tableMapping.ColumnMappings.Add("expedienteDescripcion", "expedienteDescripcion")
            tableMapping.ColumnMappings.Add("alcance", "alcance")
            tableMapping.ColumnMappings.Add("apertura", "apertura")
            tableMapping.ColumnMappings.Add("cierre", "cierre")
            tableMapping.ColumnMappings.Add("administrativo", "administrativo")
            tableMapping.ColumnMappings.Add("legal", "legal")
            tableMapping.ColumnMappings.Add("fiscal", "fiscal")
            tableMapping.ColumnMappings.Add("informativo", "informativo")
            tableMapping.ColumnMappings.Add("testimonial", "testimonial")
            tableMapping.ColumnMappings.Add("evidencial", "evidencial")
            tableMapping.ColumnMappings.Add("plazoAT", "plazoAT")
            tableMapping.ColumnMappings.Add("plazoAC", "plazoAC")
            tableMapping.ColumnMappings.Add("notas", "notas")
            tableMapping.ColumnMappings.Add("fojas", "fojas")
            tableMapping.ColumnMappings.Add("soporte", "soporte")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("Archivo_DatosConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.Reporte_Inventario_General"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idArchivo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRPT_InventarioGeneral.Reporte_Inventario_GeneralDataTable, ByVal idArchivo As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (idArchivo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idArchivo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal idArchivo As Global.System.Nullable(Of Integer)) As dsRPT_InventarioGeneral.Reporte_Inventario_GeneralDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (idArchivo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idArchivo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsRPT_InventarioGeneral.Reporte_Inventario_GeneralDataTable = New dsRPT_InventarioGeneral.Reporte_Inventario_GeneralDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsRPT_InventarioGeneral, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsRPT_InventarioGeneral, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsRPT_InventarioGeneral, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsRPT_InventarioGeneral) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
