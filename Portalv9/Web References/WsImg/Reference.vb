'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5448
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=2.0.50727.5448.
'
Namespace WsImg
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WsImagenesSoap", [Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class WsImagenes
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ValidaCampoLlaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContestaImagenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContestaImagenURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContestaImagenProtegidaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContestaFileHSMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigWebScanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TipoDocumentoConJerarquiaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TiposDocumentoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TipoDocumentoConJerarquiaInvercapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneHijosConDocTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneDocInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTiposDocumentoSinJerarquiaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TipoDocumetoReemplazoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TipoDocumetoReemplazoInvercapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSequentialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateScanStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EliminaDocsIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GuardarImagenSMegaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReemplazaImagenDatosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActualizaCamposCapturaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GuardarArchivoPackageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExtensionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReemplazaArchivoPackageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_GetMediosOffLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_GetSolicitudFLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_HSM_AsignaDispositivoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_UpStatusSolicitudFLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_SaveFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_DelFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_HSM_GetVigenciaLoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_HSM_GetCaducidadlotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_TransitaEdoLoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_GetRutaLotePackageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_GetCFGLoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Monitor_CheckBDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_GetUltimoLoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_GetLotesBackupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HSM_GetParametrosCFGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EliminaDocsIdHSMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BuscaInstanciasXEstadoID_FechaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreaExpedienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneExpedientesXEventoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneExpedientesXEvento_FechaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReservaExpedientesXEventoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEventosxFlujoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransitaExpedienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransitaExpedienteLibreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransitaGrupoExpedientesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEventosXprocesoIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEventoXEstadoIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEstadosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEstadoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneInstanciaXDocIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneFlujoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneFlujosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenEventosFlujoVisualOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BorraExpedientesRegistradosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegistraArcivoFEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private registraEXPTransmitidoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcesaEXPFilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultaExpedientesRegistradosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Loader_TransitaEdoDocumentoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Portalv9.My.MySettings.Default.Portalv9_WsImg_WsImagenes
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ValidaCampoLlaveCompleted As ValidaCampoLlaveCompletedEventHandler
        
        '''<remarks/>
        Public Event ContestaImagenCompleted As ContestaImagenCompletedEventHandler
        
        '''<remarks/>
        Public Event ContestaImagenURLCompleted As ContestaImagenURLCompletedEventHandler
        
        '''<remarks/>
        Public Event ContestaImagenProtegidaCompleted As ContestaImagenProtegidaCompletedEventHandler
        
        '''<remarks/>
        Public Event ContestaFileHSMCompleted As ContestaFileHSMCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigWebScanCompleted As GetConfigWebScanCompletedEventHandler
        
        '''<remarks/>
        Public Event TipoDocumentoConJerarquiaCompleted As TipoDocumentoConJerarquiaCompletedEventHandler
        
        '''<remarks/>
        Public Event TiposDocumentoCompleted As TiposDocumentoCompletedEventHandler
        
        '''<remarks/>
        Public Event TipoDocumentoConJerarquiaInvercapCompleted As TipoDocumentoConJerarquiaInvercapCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneHijosConDocTypeCompleted As ObtieneHijosConDocTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneDocInfoCompleted As ObtieneDocInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTiposDocumentoSinJerarquiaCompleted As GetTiposDocumentoSinJerarquiaCompletedEventHandler
        
        '''<remarks/>
        Public Event TipoDocumetoReemplazoCompleted As TipoDocumetoReemplazoCompletedEventHandler
        
        '''<remarks/>
        Public Event TipoDocumetoReemplazoInvercapCompleted As TipoDocumetoReemplazoInvercapCompletedEventHandler
        
        '''<remarks/>
        Public Event UserLoginCompleted As UserLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSequentialCompleted As GetSequentialCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateScanStatusCompleted As UpdateScanStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event EliminaDocsIdCompleted As EliminaDocsIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GuardarImagenSMegaCompleted As GuardarImagenSMegaCompletedEventHandler
        
        '''<remarks/>
        Public Event ReemplazaImagenDatosCompleted As ReemplazaImagenDatosCompletedEventHandler
        
        '''<remarks/>
        Public Event ActualizaCamposCapturaCompleted As ActualizaCamposCapturaCompletedEventHandler
        
        '''<remarks/>
        Public Event GuardarArchivoPackageCompleted As GuardarArchivoPackageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExtensionCompleted As GetExtensionCompletedEventHandler
        
        '''<remarks/>
        Public Event ReemplazaArchivoPackageCompleted As ReemplazaArchivoPackageCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_GetMediosOffLineCompleted As Monitor_GetMediosOffLineCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_GetSolicitudFLCompleted As Monitor_GetSolicitudFLCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_HSM_AsignaDispositivoCompleted As Monitor_HSM_AsignaDispositivoCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_UpStatusSolicitudFLCompleted As Monitor_UpStatusSolicitudFLCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_SaveFileCompleted As HSM_SaveFileCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_DelFileCompleted As HSM_DelFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_HSM_GetVigenciaLoteCompleted As WS_HSM_GetVigenciaLoteCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_HSM_GetCaducidadlotesCompleted As WS_HSM_GetCaducidadlotesCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_TransitaEdoLoteCompleted As HSM_TransitaEdoLoteCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_GetRutaLotePackageCompleted As HSM_GetRutaLotePackageCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_GetCFGLoteCompleted As Monitor_GetCFGLoteCompletedEventHandler
        
        '''<remarks/>
        Public Event Monitor_CheckBDCompleted As Monitor_CheckBDCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_GetUltimoLoteCompleted As HSM_GetUltimoLoteCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_GetLotesBackupCompleted As HSM_GetLotesBackupCompletedEventHandler
        
        '''<remarks/>
        Public Event HSM_GetParametrosCFGCompleted As HSM_GetParametrosCFGCompletedEventHandler
        
        '''<remarks/>
        Public Event EliminaDocsIdHSMCompleted As EliminaDocsIdHSMCompletedEventHandler
        
        '''<remarks/>
        Public Event BuscaInstanciasXEstadoID_FechaCompleted As BuscaInstanciasXEstadoID_FechaCompletedEventHandler
        
        '''<remarks/>
        Public Event CreaExpedienteCompleted As CreaExpedienteCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneExpedientesXEventoCompleted As ObtieneExpedientesXEventoCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneExpedientesXEvento_FechaCompleted As ObtieneExpedientesXEvento_FechaCompletedEventHandler
        
        '''<remarks/>
        Public Event ReservaExpedientesXEventoCompleted As ReservaExpedientesXEventoCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEventosxFlujoCompleted As ObtieneEventosxFlujoCompletedEventHandler
        
        '''<remarks/>
        Public Event TransitaExpedienteCompleted As TransitaExpedienteCompletedEventHandler
        
        '''<remarks/>
        Public Event TransitaExpedienteLibreCompleted As TransitaExpedienteLibreCompletedEventHandler
        
        '''<remarks/>
        Public Event TransitaGrupoExpedientesCompleted As TransitaGrupoExpedientesCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEventosXprocesoIDCompleted As ObtieneEventosXprocesoIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEventoXEstadoIDCompleted As ObtieneEventoXEstadoIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEstadosCompleted As ObtieneEstadosCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEstadoCompleted As ObtieneEstadoCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneInstanciaXDocIDCompleted As ObtieneInstanciaXDocIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneFlujoCompleted As ObtieneFlujoCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneFlujosCompleted As ObtieneFlujosCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenEventosFlujoVisualCompleted As ObtenEventosFlujoVisualCompletedEventHandler
        
        '''<remarks/>
        Public Event BorraExpedientesRegistradosCompleted As BorraExpedientesRegistradosCompletedEventHandler
        
        '''<remarks/>
        Public Event RegistraArcivoFECompleted As RegistraArcivoFECompletedEventHandler
        
        '''<remarks/>
        Public Event registraEXPTransmitidoCompleted As registraEXPTransmitidoCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcesaEXPFilesCompleted As ProcesaEXPFilesCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultaExpedientesRegistradosCompleted As ConsultaExpedientesRegistradosCompletedEventHandler
        
        '''<remarks/>
        Public Event Loader_TransitaEdoDocumentoCompleted As Loader_TransitaEdoDocumentoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ValidaCampoLlave", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ValidaCampoLlave(ByVal Tabla As String, ByVal nombreCampo As String, ByVal Valor As String, ByVal ProyID As String, ByRef rRespuesta As Respuesta)
            Dim results() As Object = Me.Invoke("ValidaCampoLlave", New Object() {Tabla, nombreCampo, Valor, ProyID, rRespuesta})
            rRespuesta = CType(results(0),Respuesta)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidaCampoLlaveAsync(ByVal Tabla As String, ByVal nombreCampo As String, ByVal Valor As String, ByVal ProyID As String, ByVal rRespuesta As Respuesta)
            Me.ValidaCampoLlaveAsync(Tabla, nombreCampo, Valor, ProyID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidaCampoLlaveAsync(ByVal Tabla As String, ByVal nombreCampo As String, ByVal Valor As String, ByVal ProyID As String, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ValidaCampoLlaveOperationCompleted Is Nothing) Then
                Me.ValidaCampoLlaveOperationCompleted = AddressOf Me.OnValidaCampoLlaveOperationCompleted
            End If
            Me.InvokeAsync("ValidaCampoLlave", New Object() {Tabla, nombreCampo, Valor, ProyID, rRespuesta}, Me.ValidaCampoLlaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidaCampoLlaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidaCampoLlaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidaCampoLlaveCompleted(Me, New ValidaCampoLlaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ContestaImagen", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContestaImagen(ByVal DocID As Long, ByVal ProyID As Integer, ByRef Ticket As IDTicket, ByRef rRespuesta As Respuesta, ByVal ExpedienteID As Long) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ContestaImagen", New Object() {DocID, ProyID, Ticket, rRespuesta, ExpedienteID})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta, ByVal ExpedienteID As Long)
            Me.ContestaImagenAsync(DocID, ProyID, Ticket, rRespuesta, ExpedienteID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta, ByVal ExpedienteID As Long, ByVal userState As Object)
            If (Me.ContestaImagenOperationCompleted Is Nothing) Then
                Me.ContestaImagenOperationCompleted = AddressOf Me.OnContestaImagenOperationCompleted
            End If
            Me.InvokeAsync("ContestaImagen", New Object() {DocID, ProyID, Ticket, rRespuesta, ExpedienteID}, Me.ContestaImagenOperationCompleted, userState)
        End Sub
        
        Private Sub OnContestaImagenOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContestaImagenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContestaImagenCompleted(Me, New ContestaImagenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ContestaImagenURL", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContestaImagenURL(ByVal RutaImagen As String, ByVal ProyID As Integer, ByRef Ticket As IDTicket, ByRef rRespuesta As Respuesta) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ContestaImagenURL", New Object() {RutaImagen, ProyID, Ticket, rRespuesta})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenURLAsync(ByVal RutaImagen As String, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.ContestaImagenURLAsync(RutaImagen, ProyID, Ticket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenURLAsync(ByVal RutaImagen As String, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ContestaImagenURLOperationCompleted Is Nothing) Then
                Me.ContestaImagenURLOperationCompleted = AddressOf Me.OnContestaImagenURLOperationCompleted
            End If
            Me.InvokeAsync("ContestaImagenURL", New Object() {RutaImagen, ProyID, Ticket, rRespuesta}, Me.ContestaImagenURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnContestaImagenURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContestaImagenURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContestaImagenURLCompleted(Me, New ContestaImagenURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ContestaImagenProtegida", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContestaImagenProtegida(ByVal DocID As Long, ByVal ProyID As Integer, ByRef Ticket As IDTicket, ByRef rRespuesta As Respuesta) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ContestaImagenProtegida", New Object() {DocID, ProyID, Ticket, rRespuesta})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenProtegidaAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.ContestaImagenProtegidaAsync(DocID, ProyID, Ticket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContestaImagenProtegidaAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ContestaImagenProtegidaOperationCompleted Is Nothing) Then
                Me.ContestaImagenProtegidaOperationCompleted = AddressOf Me.OnContestaImagenProtegidaOperationCompleted
            End If
            Me.InvokeAsync("ContestaImagenProtegida", New Object() {DocID, ProyID, Ticket, rRespuesta}, Me.ContestaImagenProtegidaOperationCompleted, userState)
        End Sub
        
        Private Sub OnContestaImagenProtegidaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContestaImagenProtegidaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContestaImagenProtegidaCompleted(Me, New ContestaImagenProtegidaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ContestaFileHSM", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContestaFileHSM(ByVal DocID As Long, ByVal ProyID As Integer, ByVal ExpedienteID As Long, ByRef Ticket As IDTicket, ByRef rRespuesta As Respuesta) As clsFileHSM
            Dim results() As Object = Me.Invoke("ContestaFileHSM", New Object() {DocID, ProyID, ExpedienteID, Ticket, rRespuesta})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),clsFileHSM)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContestaFileHSMAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal ExpedienteID As Long, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.ContestaFileHSMAsync(DocID, ProyID, ExpedienteID, Ticket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContestaFileHSMAsync(ByVal DocID As Long, ByVal ProyID As Integer, ByVal ExpedienteID As Long, ByVal Ticket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ContestaFileHSMOperationCompleted Is Nothing) Then
                Me.ContestaFileHSMOperationCompleted = AddressOf Me.OnContestaFileHSMOperationCompleted
            End If
            Me.InvokeAsync("ContestaFileHSM", New Object() {DocID, ProyID, ExpedienteID, Ticket, rRespuesta}, Me.ContestaFileHSMOperationCompleted, userState)
        End Sub
        
        Private Sub OnContestaFileHSMOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContestaFileHSMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContestaFileHSMCompleted(Me, New ContestaFileHSMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GetConfigWebScan", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigWebScan(ByVal ProyID As String, ByVal DescScan As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetConfigWebScan", New Object() {ProyID, DescScan})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigWebScanAsync(ByVal ProyID As String, ByVal DescScan As String)
            Me.GetConfigWebScanAsync(ProyID, DescScan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigWebScanAsync(ByVal ProyID As String, ByVal DescScan As String, ByVal userState As Object)
            If (Me.GetConfigWebScanOperationCompleted Is Nothing) Then
                Me.GetConfigWebScanOperationCompleted = AddressOf Me.OnGetConfigWebScanOperationCompleted
            End If
            Me.InvokeAsync("GetConfigWebScan", New Object() {ProyID, DescScan}, Me.GetConfigWebScanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigWebScanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigWebScanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigWebScanCompleted(Me, New GetConfigWebScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TipoDocumentoConJerarquia", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TipoDocumentoConJerarquia(ByRef Ticket As IDTicket, ByVal ProyID As Integer, ByRef rRespuesta As Respuesta, ByVal TypeDoc As Integer) As TiposDocumento()
            Dim results() As Object = Me.Invoke("TipoDocumentoConJerarquia", New Object() {Ticket, ProyID, rRespuesta, TypeDoc})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TipoDocumentoConJerarquiaAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer)
            Me.TipoDocumentoConJerarquiaAsync(Ticket, ProyID, rRespuesta, TypeDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TipoDocumentoConJerarquiaAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer, ByVal userState As Object)
            If (Me.TipoDocumentoConJerarquiaOperationCompleted Is Nothing) Then
                Me.TipoDocumentoConJerarquiaOperationCompleted = AddressOf Me.OnTipoDocumentoConJerarquiaOperationCompleted
            End If
            Me.InvokeAsync("TipoDocumentoConJerarquia", New Object() {Ticket, ProyID, rRespuesta, TypeDoc}, Me.TipoDocumentoConJerarquiaOperationCompleted, userState)
        End Sub
        
        Private Sub OnTipoDocumentoConJerarquiaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TipoDocumentoConJerarquiaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TipoDocumentoConJerarquiaCompleted(Me, New TipoDocumentoConJerarquiaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TiposDocumento", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TiposDocumento(ByRef Ticket As IDTicket, ByVal ProyID As Integer, ByRef rRespuesta As Respuesta) As TiposDocumento()
            Dim results() As Object = Me.Invoke("TiposDocumento", New Object() {Ticket, ProyID, rRespuesta})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TiposDocumentoAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta)
            Me.TiposDocumentoAsync(Ticket, ProyID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TiposDocumentoAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.TiposDocumentoOperationCompleted Is Nothing) Then
                Me.TiposDocumentoOperationCompleted = AddressOf Me.OnTiposDocumentoOperationCompleted
            End If
            Me.InvokeAsync("TiposDocumento", New Object() {Ticket, ProyID, rRespuesta}, Me.TiposDocumentoOperationCompleted, userState)
        End Sub
        
        Private Sub OnTiposDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TiposDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TiposDocumentoCompleted(Me, New TiposDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TipoDocumentoConJerarquiaInvercap", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TipoDocumentoConJerarquiaInvercap(ByRef Ticket As IDTicket, ByVal ProyID As Integer, ByRef rRespuesta As Respuesta, ByVal TypeDoc As Integer) As TiposDocumento()
            Dim results() As Object = Me.Invoke("TipoDocumentoConJerarquiaInvercap", New Object() {Ticket, ProyID, rRespuesta, TypeDoc})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TipoDocumentoConJerarquiaInvercapAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer)
            Me.TipoDocumentoConJerarquiaInvercapAsync(Ticket, ProyID, rRespuesta, TypeDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TipoDocumentoConJerarquiaInvercapAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer, ByVal userState As Object)
            If (Me.TipoDocumentoConJerarquiaInvercapOperationCompleted Is Nothing) Then
                Me.TipoDocumentoConJerarquiaInvercapOperationCompleted = AddressOf Me.OnTipoDocumentoConJerarquiaInvercapOperationCompleted
            End If
            Me.InvokeAsync("TipoDocumentoConJerarquiaInvercap", New Object() {Ticket, ProyID, rRespuesta, TypeDoc}, Me.TipoDocumentoConJerarquiaInvercapOperationCompleted, userState)
        End Sub
        
        Private Sub OnTipoDocumentoConJerarquiaInvercapOperationCompleted(ByVal arg As Object)
            If (Not (Me.TipoDocumentoConJerarquiaInvercapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TipoDocumentoConJerarquiaInvercapCompleted(Me, New TipoDocumentoConJerarquiaInvercapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneHijosConDocType", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneHijosConDocType(ByVal DocId As Long, ByVal DocType As Integer, ByVal ProyectoId As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneHijosConDocType", New Object() {DocId, DocType, ProyectoId, pRespuesta})
            pRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneHijosConDocTypeAsync(ByVal DocId As Long, ByVal DocType As Integer, ByVal ProyectoId As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtieneHijosConDocTypeAsync(DocId, DocType, ProyectoId, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneHijosConDocTypeAsync(ByVal DocId As Long, ByVal DocType As Integer, ByVal ProyectoId As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneHijosConDocTypeOperationCompleted Is Nothing) Then
                Me.ObtieneHijosConDocTypeOperationCompleted = AddressOf Me.OnObtieneHijosConDocTypeOperationCompleted
            End If
            Me.InvokeAsync("ObtieneHijosConDocType", New Object() {DocId, DocType, ProyectoId, pRespuesta}, Me.ObtieneHijosConDocTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneHijosConDocTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneHijosConDocTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneHijosConDocTypeCompleted(Me, New ObtieneHijosConDocTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneDocInfo", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneDocInfo(ByVal ProyID As Integer, ByVal SpName As String, ByVal DocId As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneDocInfo", New Object() {ProyID, SpName, DocId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneDocInfoAsync(ByVal ProyID As Integer, ByVal SpName As String, ByVal DocId As Long)
            Me.ObtieneDocInfoAsync(ProyID, SpName, DocId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneDocInfoAsync(ByVal ProyID As Integer, ByVal SpName As String, ByVal DocId As Long, ByVal userState As Object)
            If (Me.ObtieneDocInfoOperationCompleted Is Nothing) Then
                Me.ObtieneDocInfoOperationCompleted = AddressOf Me.OnObtieneDocInfoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneDocInfo", New Object() {ProyID, SpName, DocId}, Me.ObtieneDocInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneDocInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneDocInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneDocInfoCompleted(Me, New ObtieneDocInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GetTiposDocumentoSinJerarquia", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTiposDocumentoSinJerarquia(ByVal Ticket As IDTicket, ByVal ProyID As Integer) As TiposDocumento()
            Dim results() As Object = Me.Invoke("GetTiposDocumentoSinJerarquia", New Object() {Ticket, ProyID})
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTiposDocumentoSinJerarquiaAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer)
            Me.GetTiposDocumentoSinJerarquiaAsync(Ticket, ProyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTiposDocumentoSinJerarquiaAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal userState As Object)
            If (Me.GetTiposDocumentoSinJerarquiaOperationCompleted Is Nothing) Then
                Me.GetTiposDocumentoSinJerarquiaOperationCompleted = AddressOf Me.OnGetTiposDocumentoSinJerarquiaOperationCompleted
            End If
            Me.InvokeAsync("GetTiposDocumentoSinJerarquia", New Object() {Ticket, ProyID}, Me.GetTiposDocumentoSinJerarquiaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTiposDocumentoSinJerarquiaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTiposDocumentoSinJerarquiaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTiposDocumentoSinJerarquiaCompleted(Me, New GetTiposDocumentoSinJerarquiaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TipoDocumetoReemplazo", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TipoDocumetoReemplazo(ByRef Ticket As IDTicket, ByVal ProyID As Integer, ByRef rRespuesta As Respuesta, ByVal TypeDoc As Integer) As TiposDocumento()
            Dim results() As Object = Me.Invoke("TipoDocumetoReemplazo", New Object() {Ticket, ProyID, rRespuesta, TypeDoc})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TipoDocumetoReemplazoAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer)
            Me.TipoDocumetoReemplazoAsync(Ticket, ProyID, rRespuesta, TypeDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TipoDocumetoReemplazoAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer, ByVal userState As Object)
            If (Me.TipoDocumetoReemplazoOperationCompleted Is Nothing) Then
                Me.TipoDocumetoReemplazoOperationCompleted = AddressOf Me.OnTipoDocumetoReemplazoOperationCompleted
            End If
            Me.InvokeAsync("TipoDocumetoReemplazo", New Object() {Ticket, ProyID, rRespuesta, TypeDoc}, Me.TipoDocumetoReemplazoOperationCompleted, userState)
        End Sub
        
        Private Sub OnTipoDocumetoReemplazoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TipoDocumetoReemplazoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TipoDocumetoReemplazoCompleted(Me, New TipoDocumetoReemplazoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TipoDocumetoReemplazoInvercap", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TipoDocumetoReemplazoInvercap(ByRef Ticket As IDTicket, ByVal ProyID As Integer, ByRef rRespuesta As Respuesta, ByVal TypeDoc As Integer) As TiposDocumento()
            Dim results() As Object = Me.Invoke("TipoDocumetoReemplazoInvercap", New Object() {Ticket, ProyID, rRespuesta, TypeDoc})
            Ticket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),TiposDocumento())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TipoDocumetoReemplazoInvercapAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer)
            Me.TipoDocumetoReemplazoInvercapAsync(Ticket, ProyID, rRespuesta, TypeDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TipoDocumetoReemplazoInvercapAsync(ByVal Ticket As IDTicket, ByVal ProyID As Integer, ByVal rRespuesta As Respuesta, ByVal TypeDoc As Integer, ByVal userState As Object)
            If (Me.TipoDocumetoReemplazoInvercapOperationCompleted Is Nothing) Then
                Me.TipoDocumetoReemplazoInvercapOperationCompleted = AddressOf Me.OnTipoDocumetoReemplazoInvercapOperationCompleted
            End If
            Me.InvokeAsync("TipoDocumetoReemplazoInvercap", New Object() {Ticket, ProyID, rRespuesta, TypeDoc}, Me.TipoDocumetoReemplazoInvercapOperationCompleted, userState)
        End Sub
        
        Private Sub OnTipoDocumetoReemplazoInvercapOperationCompleted(ByVal arg As Object)
            If (Not (Me.TipoDocumetoReemplazoInvercapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TipoDocumetoReemplazoInvercapCompleted(Me, New TipoDocumetoReemplazoInvercapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/UserLogin", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserLogin(ByVal UserID As String, ByVal Password As String, ByRef rRespuesta As Respuesta, ByVal IP As String) As IDTicket
            Dim results() As Object = Me.Invoke("UserLogin", New Object() {UserID, Password, rRespuesta, IP})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),IDTicket)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserLoginAsync(ByVal UserID As String, ByVal Password As String, ByVal rRespuesta As Respuesta, ByVal IP As String)
            Me.UserLoginAsync(UserID, Password, rRespuesta, IP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserLoginAsync(ByVal UserID As String, ByVal Password As String, ByVal rRespuesta As Respuesta, ByVal IP As String, ByVal userState As Object)
            If (Me.UserLoginOperationCompleted Is Nothing) Then
                Me.UserLoginOperationCompleted = AddressOf Me.OnUserLoginOperationCompleted
            End If
            Me.InvokeAsync("UserLogin", New Object() {UserID, Password, rRespuesta, IP}, Me.UserLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserLoginCompleted(Me, New UserLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GetSequential", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSequential(ByRef ticket As IDTicket, ByVal proyId As Integer, ByVal userId As String, ByRef respuesta As Respuesta) As String
            Dim results() As Object = Me.Invoke("GetSequential", New Object() {ticket, proyId, userId, respuesta})
            ticket = CType(results(1),IDTicket)
            respuesta = CType(results(2),Respuesta)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSequentialAsync(ByVal ticket As IDTicket, ByVal proyId As Integer, ByVal userId As String, ByVal respuesta As Respuesta)
            Me.GetSequentialAsync(ticket, proyId, userId, respuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSequentialAsync(ByVal ticket As IDTicket, ByVal proyId As Integer, ByVal userId As String, ByVal respuesta As Respuesta, ByVal userState As Object)
            If (Me.GetSequentialOperationCompleted Is Nothing) Then
                Me.GetSequentialOperationCompleted = AddressOf Me.OnGetSequentialOperationCompleted
            End If
            Me.InvokeAsync("GetSequential", New Object() {ticket, proyId, userId, respuesta}, Me.GetSequentialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSequentialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSequentialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSequentialCompleted(Me, New GetSequentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/UpdateScanStatus", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateScanStatus(ByVal ticket As IDTicket) As Respuesta
            Dim results() As Object = Me.Invoke("UpdateScanStatus", New Object() {ticket})
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateScanStatusAsync(ByVal ticket As IDTicket)
            Me.UpdateScanStatusAsync(ticket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateScanStatusAsync(ByVal ticket As IDTicket, ByVal userState As Object)
            If (Me.UpdateScanStatusOperationCompleted Is Nothing) Then
                Me.UpdateScanStatusOperationCompleted = AddressOf Me.OnUpdateScanStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateScanStatus", New Object() {ticket}, Me.UpdateScanStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateScanStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateScanStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateScanStatusCompleted(Me, New UpdateScanStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/EliminaDocsId", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub EliminaDocsId(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As String)
            Me.Invoke("EliminaDocsId", New Object() {ProyId, DocsId, RemoteStorage})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EliminaDocsIdAsync(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As String)
            Me.EliminaDocsIdAsync(ProyId, DocsId, RemoteStorage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EliminaDocsIdAsync(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As String, ByVal userState As Object)
            If (Me.EliminaDocsIdOperationCompleted Is Nothing) Then
                Me.EliminaDocsIdOperationCompleted = AddressOf Me.OnEliminaDocsIdOperationCompleted
            End If
            Me.InvokeAsync("EliminaDocsId", New Object() {ProyId, DocsId, RemoteStorage}, Me.EliminaDocsIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnEliminaDocsIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.EliminaDocsIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EliminaDocsIdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GuardarImagenSMega", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GuardarImagenSMega( _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByRef NumLoteID As String,  _
                    ByVal gTicket As IDTicket,  _
                    ByVal ext As String,  _
                    ByRef DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByRef ruta As String,  _
                    ByVal RemoteStorage As String,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByRef DispositivoID As String) As Respuesta
            Dim results() As Object = Me.Invoke("GuardarImagenSMega", New Object() {DocPID, digicenter, NumDoctos, ProyId, NumLoteID, gTicket, ext, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, MyMimeType, Compression, DispositivoID})
            NumLoteID = CType(results(1),String)
            DocIdRef = CType(results(2),Long)
            ruta = CType(results(3),String)
            DispositivoID = CType(results(4),String)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GuardarImagenSMegaAsync( _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal gTicket As IDTicket,  _
                    ByVal ext As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal ruta As String,  _
                    ByVal RemoteStorage As String,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByVal DispositivoID As String)
            Me.GuardarImagenSMegaAsync(DocPID, digicenter, NumDoctos, ProyId, NumLoteID, gTicket, ext, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, MyMimeType, Compression, DispositivoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GuardarImagenSMegaAsync( _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal gTicket As IDTicket,  _
                    ByVal ext As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal ruta As String,  _
                    ByVal RemoteStorage As String,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByVal DispositivoID As String,  _
                    ByVal userState As Object)
            If (Me.GuardarImagenSMegaOperationCompleted Is Nothing) Then
                Me.GuardarImagenSMegaOperationCompleted = AddressOf Me.OnGuardarImagenSMegaOperationCompleted
            End If
            Me.InvokeAsync("GuardarImagenSMega", New Object() {DocPID, digicenter, NumDoctos, ProyId, NumLoteID, gTicket, ext, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, MyMimeType, Compression, DispositivoID}, Me.GuardarImagenSMegaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGuardarImagenSMegaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GuardarImagenSMegaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GuardarImagenSMegaCompleted(Me, New GuardarImagenSMegaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ReemplazaImagenDatos", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReemplazaImagenDatos( _
                    ByVal DocPID As Long,  _
                    ByVal Folio As String,  _
                    ByVal Digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyID As Integer,  _
                    ByRef NumLoteID As String,  _
                    ByRef gTicket As IDTicket,  _
                    ByVal Ext As String,  _
                    ByRef DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByRef PathImagenLocal As String,  _
                    ByVal RemoteStorage As String,  _
                    ByRef ConsecutivoLocal As String,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByRef ruta As String,  _
                    ByRef DispositivoID As String) As Respuesta
            Dim results() As Object = Me.Invoke("ReemplazaImagenDatos", New Object() {DocPID, Folio, Digicenter, NumDoctos, ProyID, NumLoteID, gTicket, Ext, DocIdRef, UserID, strDatos, PathImagenLocal, RemoteStorage, ConsecutivoLocal, DocIdReemplazo, StatusReemplazo, MyMimeType, Compression, ruta, DispositivoID})
            NumLoteID = CType(results(1),String)
            gTicket = CType(results(2),IDTicket)
            DocIdRef = CType(results(3),Long)
            PathImagenLocal = CType(results(4),String)
            ConsecutivoLocal = CType(results(5),String)
            ruta = CType(results(6),String)
            DispositivoID = CType(results(7),String)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReemplazaImagenDatosAsync( _
                    ByVal DocPID As Long,  _
                    ByVal Folio As String,  _
                    ByVal Digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyID As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal gTicket As IDTicket,  _
                    ByVal Ext As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal PathImagenLocal As String,  _
                    ByVal RemoteStorage As String,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByVal ruta As String,  _
                    ByVal DispositivoID As String)
            Me.ReemplazaImagenDatosAsync(DocPID, Folio, Digicenter, NumDoctos, ProyID, NumLoteID, gTicket, Ext, DocIdRef, UserID, strDatos, PathImagenLocal, RemoteStorage, ConsecutivoLocal, DocIdReemplazo, StatusReemplazo, MyMimeType, Compression, ruta, DispositivoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReemplazaImagenDatosAsync( _
                    ByVal DocPID As Long,  _
                    ByVal Folio As String,  _
                    ByVal Digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyID As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal gTicket As IDTicket,  _
                    ByVal Ext As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As String,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal PathImagenLocal As String,  _
                    ByVal RemoteStorage As String,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer,  _
                    ByVal MyMimeType As String,  _
                    ByVal Compression As Integer,  _
                    ByVal ruta As String,  _
                    ByVal DispositivoID As String,  _
                    ByVal userState As Object)
            If (Me.ReemplazaImagenDatosOperationCompleted Is Nothing) Then
                Me.ReemplazaImagenDatosOperationCompleted = AddressOf Me.OnReemplazaImagenDatosOperationCompleted
            End If
            Me.InvokeAsync("ReemplazaImagenDatos", New Object() {DocPID, Folio, Digicenter, NumDoctos, ProyID, NumLoteID, gTicket, Ext, DocIdRef, UserID, strDatos, PathImagenLocal, RemoteStorage, ConsecutivoLocal, DocIdReemplazo, StatusReemplazo, MyMimeType, Compression, ruta, DispositivoID}, Me.ReemplazaImagenDatosOperationCompleted, userState)
        End Sub
        
        Private Sub OnReemplazaImagenDatosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReemplazaImagenDatosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReemplazaImagenDatosCompleted(Me, New ReemplazaImagenDatosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ActualizaCamposCaptura", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActualizaCamposCaptura(ByVal ProyID As Integer, ByVal iDocID As Long, ByVal valor As String, ByVal nombreCampo As String) As String
            Dim results() As Object = Me.Invoke("ActualizaCamposCaptura", New Object() {ProyID, iDocID, valor, nombreCampo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ActualizaCamposCapturaAsync(ByVal ProyID As Integer, ByVal iDocID As Long, ByVal valor As String, ByVal nombreCampo As String)
            Me.ActualizaCamposCapturaAsync(ProyID, iDocID, valor, nombreCampo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActualizaCamposCapturaAsync(ByVal ProyID As Integer, ByVal iDocID As Long, ByVal valor As String, ByVal nombreCampo As String, ByVal userState As Object)
            If (Me.ActualizaCamposCapturaOperationCompleted Is Nothing) Then
                Me.ActualizaCamposCapturaOperationCompleted = AddressOf Me.OnActualizaCamposCapturaOperationCompleted
            End If
            Me.InvokeAsync("ActualizaCamposCaptura", New Object() {ProyID, iDocID, valor, nombreCampo}, Me.ActualizaCamposCapturaOperationCompleted, userState)
        End Sub
        
        Private Sub OnActualizaCamposCapturaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaCamposCapturaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaCamposCapturaCompleted(Me, New ActualizaCamposCapturaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GuardarArchivoPackage", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GuardarArchivoPackage(ByVal gTicket As IDTicket, ByVal DocPID As Long, ByVal digicenter As Integer, ByVal NumDoctos As Integer, ByVal ProyId As Integer, ByRef NumLoteID As String, ByRef DocIdRef As Long, ByVal UserID As Integer, ByVal strDatos As DocReceive, ByRef ruta As String, ByVal RemoteStorage As Integer, ByVal ConsecutivoLocal As String, ByRef DispositivoID As String, ByVal SizeExp As Long) As Respuesta
            Dim results() As Object = Me.Invoke("GuardarArchivoPackage", New Object() {gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp})
            NumLoteID = CType(results(1),String)
            DocIdRef = CType(results(2),Long)
            ruta = CType(results(3),String)
            DispositivoID = CType(results(4),String)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GuardarArchivoPackageAsync(ByVal gTicket As IDTicket, ByVal DocPID As Long, ByVal digicenter As Integer, ByVal NumDoctos As Integer, ByVal ProyId As Integer, ByVal NumLoteID As String, ByVal DocIdRef As Long, ByVal UserID As Integer, ByVal strDatos As DocReceive, ByVal ruta As String, ByVal RemoteStorage As Integer, ByVal ConsecutivoLocal As String, ByVal DispositivoID As String, ByVal SizeExp As Long)
            Me.GuardarArchivoPackageAsync(gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GuardarArchivoPackageAsync(ByVal gTicket As IDTicket, ByVal DocPID As Long, ByVal digicenter As Integer, ByVal NumDoctos As Integer, ByVal ProyId As Integer, ByVal NumLoteID As String, ByVal DocIdRef As Long, ByVal UserID As Integer, ByVal strDatos As DocReceive, ByVal ruta As String, ByVal RemoteStorage As Integer, ByVal ConsecutivoLocal As String, ByVal DispositivoID As String, ByVal SizeExp As Long, ByVal userState As Object)
            If (Me.GuardarArchivoPackageOperationCompleted Is Nothing) Then
                Me.GuardarArchivoPackageOperationCompleted = AddressOf Me.OnGuardarArchivoPackageOperationCompleted
            End If
            Me.InvokeAsync("GuardarArchivoPackage", New Object() {gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp}, Me.GuardarArchivoPackageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGuardarArchivoPackageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GuardarArchivoPackageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GuardarArchivoPackageCompleted(Me, New GuardarArchivoPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/GetExtension", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExtension(ByRef gTicket As IDTicket, ByVal ProyId As Integer) As clsExtension()
            Dim results() As Object = Me.Invoke("GetExtension", New Object() {gTicket, ProyId})
            gTicket = CType(results(1),IDTicket)
            Return CType(results(0),clsExtension())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExtensionAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer)
            Me.GetExtensionAsync(gTicket, ProyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExtensionAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal userState As Object)
            If (Me.GetExtensionOperationCompleted Is Nothing) Then
                Me.GetExtensionOperationCompleted = AddressOf Me.OnGetExtensionOperationCompleted
            End If
            Me.InvokeAsync("GetExtension", New Object() {gTicket, ProyId}, Me.GetExtensionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExtensionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExtensionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExtensionCompleted(Me, New GetExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ReemplazaArchivoPackage", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReemplazaArchivoPackage( _
                    ByVal gTicket As IDTicket,  _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByRef NumLoteID As String,  _
                    ByRef DocIdRef As Long,  _
                    ByVal UserID As Integer,  _
                    ByVal strDatos As DocReceive,  _
                    ByRef ruta As String,  _
                    ByVal RemoteStorage As Integer,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByRef DispositivoID As String,  _
                    ByVal SizeExp As Long,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer) As Respuesta
            Dim results() As Object = Me.Invoke("ReemplazaArchivoPackage", New Object() {gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp, DocIdReemplazo, StatusReemplazo})
            NumLoteID = CType(results(1),String)
            DocIdRef = CType(results(2),Long)
            ruta = CType(results(3),String)
            DispositivoID = CType(results(4),String)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReemplazaArchivoPackageAsync( _
                    ByVal gTicket As IDTicket,  _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As Integer,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal ruta As String,  _
                    ByVal RemoteStorage As Integer,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal DispositivoID As String,  _
                    ByVal SizeExp As Long,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer)
            Me.ReemplazaArchivoPackageAsync(gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp, DocIdReemplazo, StatusReemplazo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReemplazaArchivoPackageAsync( _
                    ByVal gTicket As IDTicket,  _
                    ByVal DocPID As Long,  _
                    ByVal digicenter As Integer,  _
                    ByVal NumDoctos As Integer,  _
                    ByVal ProyId As Integer,  _
                    ByVal NumLoteID As String,  _
                    ByVal DocIdRef As Long,  _
                    ByVal UserID As Integer,  _
                    ByVal strDatos As DocReceive,  _
                    ByVal ruta As String,  _
                    ByVal RemoteStorage As Integer,  _
                    ByVal ConsecutivoLocal As String,  _
                    ByVal DispositivoID As String,  _
                    ByVal SizeExp As Long,  _
                    ByVal DocIdReemplazo As Long,  _
                    ByVal StatusReemplazo As Integer,  _
                    ByVal userState As Object)
            If (Me.ReemplazaArchivoPackageOperationCompleted Is Nothing) Then
                Me.ReemplazaArchivoPackageOperationCompleted = AddressOf Me.OnReemplazaArchivoPackageOperationCompleted
            End If
            Me.InvokeAsync("ReemplazaArchivoPackage", New Object() {gTicket, DocPID, digicenter, NumDoctos, ProyId, NumLoteID, DocIdRef, UserID, strDatos, ruta, RemoteStorage, ConsecutivoLocal, DispositivoID, SizeExp, DocIdReemplazo, StatusReemplazo}, Me.ReemplazaArchivoPackageOperationCompleted, userState)
        End Sub
        
        Private Sub OnReemplazaArchivoPackageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReemplazaArchivoPackageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReemplazaArchivoPackageCompleted(Me, New ReemplazaArchivoPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_GetMediosOffLine", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_GetMediosOffLine(ByVal ProyectoID As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Monitor_GetMediosOffLine", New Object() {ProyectoID, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetMediosOffLineAsync(ByVal ProyectoID As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.Monitor_GetMediosOffLineAsync(ProyectoID, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetMediosOffLineAsync(ByVal ProyectoID As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.Monitor_GetMediosOffLineOperationCompleted Is Nothing) Then
                Me.Monitor_GetMediosOffLineOperationCompleted = AddressOf Me.OnMonitor_GetMediosOffLineOperationCompleted
            End If
            Me.InvokeAsync("Monitor_GetMediosOffLine", New Object() {ProyectoID, gTicket, rRespuesta}, Me.Monitor_GetMediosOffLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_GetMediosOffLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_GetMediosOffLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_GetMediosOffLineCompleted(Me, New Monitor_GetMediosOffLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_GetSolicitudFL", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_GetSolicitudFL(ByVal ProyectoID As Integer, ByVal CDID As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Monitor_GetSolicitudFL", New Object() {ProyectoID, CDID, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetSolicitudFLAsync(ByVal ProyectoID As Integer, ByVal CDID As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.Monitor_GetSolicitudFLAsync(ProyectoID, CDID, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetSolicitudFLAsync(ByVal ProyectoID As Integer, ByVal CDID As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.Monitor_GetSolicitudFLOperationCompleted Is Nothing) Then
                Me.Monitor_GetSolicitudFLOperationCompleted = AddressOf Me.OnMonitor_GetSolicitudFLOperationCompleted
            End If
            Me.InvokeAsync("Monitor_GetSolicitudFL", New Object() {ProyectoID, CDID, gTicket, rRespuesta}, Me.Monitor_GetSolicitudFLOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_GetSolicitudFLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_GetSolicitudFLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_GetSolicitudFLCompleted(Me, New Monitor_GetSolicitudFLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_HSM_AsignaDispositivo", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_HSM_AsignaDispositivo(ByVal ProyectoBD As Integer, ByVal ProyectoIDLote As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String, ByVal SizePackage As Long, ByVal StatusLote As Integer, ByVal NumSolicitud As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Monitor_HSM_AsignaDispositivo", New Object() {ProyectoBD, ProyectoIDLote, DigicenterID, LoteID, SizePackage, StatusLote, NumSolicitud, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_HSM_AsignaDispositivoAsync(ByVal ProyectoBD As Integer, ByVal ProyectoIDLote As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String, ByVal SizePackage As Long, ByVal StatusLote As Integer, ByVal NumSolicitud As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.Monitor_HSM_AsignaDispositivoAsync(ProyectoBD, ProyectoIDLote, DigicenterID, LoteID, SizePackage, StatusLote, NumSolicitud, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_HSM_AsignaDispositivoAsync(ByVal ProyectoBD As Integer, ByVal ProyectoIDLote As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String, ByVal SizePackage As Long, ByVal StatusLote As Integer, ByVal NumSolicitud As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.Monitor_HSM_AsignaDispositivoOperationCompleted Is Nothing) Then
                Me.Monitor_HSM_AsignaDispositivoOperationCompleted = AddressOf Me.OnMonitor_HSM_AsignaDispositivoOperationCompleted
            End If
            Me.InvokeAsync("Monitor_HSM_AsignaDispositivo", New Object() {ProyectoBD, ProyectoIDLote, DigicenterID, LoteID, SizePackage, StatusLote, NumSolicitud, gTicket, rRespuesta}, Me.Monitor_HSM_AsignaDispositivoOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_HSM_AsignaDispositivoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_HSM_AsignaDispositivoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_HSM_AsignaDispositivoCompleted(Me, New Monitor_HSM_AsignaDispositivoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_UpStatusSolicitudFL", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_UpStatusSolicitudFL(ByVal ProyectoBD As Integer, ByVal NumSolicitud As Integer, ByVal usr_atenc As Integer, ByVal statusSolFL As Integer, ByVal obsSolFL As String, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As Boolean
            Dim results() As Object = Me.Invoke("Monitor_UpStatusSolicitudFL", New Object() {ProyectoBD, NumSolicitud, usr_atenc, statusSolFL, obsSolFL, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_UpStatusSolicitudFLAsync(ByVal ProyectoBD As Integer, ByVal NumSolicitud As Integer, ByVal usr_atenc As Integer, ByVal statusSolFL As Integer, ByVal obsSolFL As String, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.Monitor_UpStatusSolicitudFLAsync(ProyectoBD, NumSolicitud, usr_atenc, statusSolFL, obsSolFL, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_UpStatusSolicitudFLAsync(ByVal ProyectoBD As Integer, ByVal NumSolicitud As Integer, ByVal usr_atenc As Integer, ByVal statusSolFL As Integer, ByVal obsSolFL As String, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.Monitor_UpStatusSolicitudFLOperationCompleted Is Nothing) Then
                Me.Monitor_UpStatusSolicitudFLOperationCompleted = AddressOf Me.OnMonitor_UpStatusSolicitudFLOperationCompleted
            End If
            Me.InvokeAsync("Monitor_UpStatusSolicitudFL", New Object() {ProyectoBD, NumSolicitud, usr_atenc, statusSolFL, obsSolFL, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta}, Me.Monitor_UpStatusSolicitudFLOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_UpStatusSolicitudFLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_UpStatusSolicitudFLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_UpStatusSolicitudFLCompleted(Me, New Monitor_UpStatusSolicitudFLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_SaveFile", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub HSM_SaveFile(ByVal strPathDestino As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta)
            Dim results() As Object = Me.Invoke("HSM_SaveFile", New Object() {strPathDestino, file, gTicket, rRespuesta})
            gTicket = CType(results(0),IDTicket)
            rRespuesta = CType(results(1),Respuesta)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_SaveFileAsync(ByVal strPathDestino As String, ByVal file() As Byte, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_SaveFileAsync(strPathDestino, file, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_SaveFileAsync(ByVal strPathDestino As String, ByVal file() As Byte, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_SaveFileOperationCompleted Is Nothing) Then
                Me.HSM_SaveFileOperationCompleted = AddressOf Me.OnHSM_SaveFileOperationCompleted
            End If
            Me.InvokeAsync("HSM_SaveFile", New Object() {strPathDestino, file, gTicket, rRespuesta}, Me.HSM_SaveFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_SaveFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_SaveFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_SaveFileCompleted(Me, New HSM_SaveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_DelFile", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub HSM_DelFile(ByVal strPathDestino As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta)
            Dim results() As Object = Me.Invoke("HSM_DelFile", New Object() {strPathDestino, gTicket, rRespuesta})
            gTicket = CType(results(0),IDTicket)
            rRespuesta = CType(results(1),Respuesta)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_DelFileAsync(ByVal strPathDestino As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_DelFileAsync(strPathDestino, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_DelFileAsync(ByVal strPathDestino As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_DelFileOperationCompleted Is Nothing) Then
                Me.HSM_DelFileOperationCompleted = AddressOf Me.OnHSM_DelFileOperationCompleted
            End If
            Me.InvokeAsync("HSM_DelFile", New Object() {strPathDestino, gTicket, rRespuesta}, Me.HSM_DelFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_DelFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_DelFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_DelFileCompleted(Me, New HSM_DelFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/WS_HSM_GetVigenciaLote", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_HSM_GetVigenciaLote(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WS_HSM_GetVigenciaLote", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_HSM_GetVigenciaLoteAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.WS_HSM_GetVigenciaLoteAsync(ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_HSM_GetVigenciaLoteAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.WS_HSM_GetVigenciaLoteOperationCompleted Is Nothing) Then
                Me.WS_HSM_GetVigenciaLoteOperationCompleted = AddressOf Me.OnWS_HSM_GetVigenciaLoteOperationCompleted
            End If
            Me.InvokeAsync("WS_HSM_GetVigenciaLote", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta}, Me.WS_HSM_GetVigenciaLoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_HSM_GetVigenciaLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_HSM_GetVigenciaLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_HSM_GetVigenciaLoteCompleted(Me, New WS_HSM_GetVigenciaLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/WS_HSM_GetCaducidadlotes", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_HSM_GetCaducidadlotes(ByVal ProyectoBD As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WS_HSM_GetCaducidadlotes", New Object() {ProyectoBD, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_HSM_GetCaducidadlotesAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.WS_HSM_GetCaducidadlotesAsync(ProyectoBD, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_HSM_GetCaducidadlotesAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.WS_HSM_GetCaducidadlotesOperationCompleted Is Nothing) Then
                Me.WS_HSM_GetCaducidadlotesOperationCompleted = AddressOf Me.OnWS_HSM_GetCaducidadlotesOperationCompleted
            End If
            Me.InvokeAsync("WS_HSM_GetCaducidadlotes", New Object() {ProyectoBD, gTicket, rRespuesta}, Me.WS_HSM_GetCaducidadlotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_HSM_GetCaducidadlotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_HSM_GetCaducidadlotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_HSM_GetCaducidadlotesCompleted(Me, New WS_HSM_GetCaducidadlotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_TransitaEdoLote", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HSM_TransitaEdoLote(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As Boolean
            Dim results() As Object = Me.Invoke("HSM_TransitaEdoLote", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HSM_TransitaEdoLoteAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_TransitaEdoLoteAsync(ProyectoBD, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_TransitaEdoLoteAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal EstadoLoteid As Integer, ByVal Aplicacion As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_TransitaEdoLoteOperationCompleted Is Nothing) Then
                Me.HSM_TransitaEdoLoteOperationCompleted = AddressOf Me.OnHSM_TransitaEdoLoteOperationCompleted
            End If
            Me.InvokeAsync("HSM_TransitaEdoLote", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, EstadoLoteid, Aplicacion, gTicket, rRespuesta}, Me.HSM_TransitaEdoLoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_TransitaEdoLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_TransitaEdoLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_TransitaEdoLoteCompleted(Me, New HSM_TransitaEdoLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_GetRutaLotePackage", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HSM_GetRutaLotePackage(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As String
            Dim results() As Object = Me.Invoke("HSM_GetRutaLotePackage", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HSM_GetRutaLotePackageAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_GetRutaLotePackageAsync(ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_GetRutaLotePackageAsync(ByVal ProyectoBD As Integer, ByVal DigicenterID As Integer, ByVal ProyectoID As Integer, ByVal LoteID As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_GetRutaLotePackageOperationCompleted Is Nothing) Then
                Me.HSM_GetRutaLotePackageOperationCompleted = AddressOf Me.OnHSM_GetRutaLotePackageOperationCompleted
            End If
            Me.InvokeAsync("HSM_GetRutaLotePackage", New Object() {ProyectoBD, DigicenterID, ProyectoID, LoteID, gTicket, rRespuesta}, Me.HSM_GetRutaLotePackageOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_GetRutaLotePackageOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_GetRutaLotePackageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_GetRutaLotePackageCompleted(Me, New HSM_GetRutaLotePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_GetCFGLote", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_GetCFGLote(ByVal ProyectoID As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Monitor_GetCFGLote", New Object() {ProyectoID, DigicenterID, LoteID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetCFGLoteAsync(ByVal ProyectoID As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String)
            Me.Monitor_GetCFGLoteAsync(ProyectoID, DigicenterID, LoteID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_GetCFGLoteAsync(ByVal ProyectoID As Integer, ByVal DigicenterID As Integer, ByVal LoteID As String, ByVal userState As Object)
            If (Me.Monitor_GetCFGLoteOperationCompleted Is Nothing) Then
                Me.Monitor_GetCFGLoteOperationCompleted = AddressOf Me.OnMonitor_GetCFGLoteOperationCompleted
            End If
            Me.InvokeAsync("Monitor_GetCFGLote", New Object() {ProyectoID, DigicenterID, LoteID}, Me.Monitor_GetCFGLoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_GetCFGLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_GetCFGLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_GetCFGLoteCompleted(Me, New Monitor_GetCFGLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Monitor_CheckBD", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Monitor_CheckBD(ByVal ProyectoID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("Monitor_CheckBD", New Object() {ProyectoID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Monitor_CheckBDAsync(ByVal ProyectoID As Integer)
            Me.Monitor_CheckBDAsync(ProyectoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Monitor_CheckBDAsync(ByVal ProyectoID As Integer, ByVal userState As Object)
            If (Me.Monitor_CheckBDOperationCompleted Is Nothing) Then
                Me.Monitor_CheckBDOperationCompleted = AddressOf Me.OnMonitor_CheckBDOperationCompleted
            End If
            Me.InvokeAsync("Monitor_CheckBD", New Object() {ProyectoID}, Me.Monitor_CheckBDOperationCompleted, userState)
        End Sub
        
        Private Sub OnMonitor_CheckBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Monitor_CheckBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Monitor_CheckBDCompleted(Me, New Monitor_CheckBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_GetUltimoLote", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HSM_GetUltimoLote(ByVal ProyectoBD As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("HSM_GetUltimoLote", New Object() {ProyectoBD, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HSM_GetUltimoLoteAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_GetUltimoLoteAsync(ProyectoBD, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_GetUltimoLoteAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_GetUltimoLoteOperationCompleted Is Nothing) Then
                Me.HSM_GetUltimoLoteOperationCompleted = AddressOf Me.OnHSM_GetUltimoLoteOperationCompleted
            End If
            Me.InvokeAsync("HSM_GetUltimoLote", New Object() {ProyectoBD, gTicket, rRespuesta}, Me.HSM_GetUltimoLoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_GetUltimoLoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_GetUltimoLoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_GetUltimoLoteCompleted(Me, New HSM_GetUltimoLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_GetLotesBackup", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HSM_GetLotesBackup(ByVal ProyectoBD As Integer, ByVal UltimoLote As String, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("HSM_GetLotesBackup", New Object() {ProyectoBD, UltimoLote, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HSM_GetLotesBackupAsync(ByVal ProyectoBD As Integer, ByVal UltimoLote As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_GetLotesBackupAsync(ProyectoBD, UltimoLote, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_GetLotesBackupAsync(ByVal ProyectoBD As Integer, ByVal UltimoLote As String, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_GetLotesBackupOperationCompleted Is Nothing) Then
                Me.HSM_GetLotesBackupOperationCompleted = AddressOf Me.OnHSM_GetLotesBackupOperationCompleted
            End If
            Me.InvokeAsync("HSM_GetLotesBackup", New Object() {ProyectoBD, UltimoLote, gTicket, rRespuesta}, Me.HSM_GetLotesBackupOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_GetLotesBackupOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_GetLotesBackupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_GetLotesBackupCompleted(Me, New HSM_GetLotesBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/HSM_GetParametrosCFG", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HSM_GetParametrosCFG(ByVal ProyectoBD As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("HSM_GetParametrosCFG", New Object() {ProyectoBD, gTicket, rRespuesta})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HSM_GetParametrosCFGAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta)
            Me.HSM_GetParametrosCFGAsync(ProyectoBD, gTicket, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HSM_GetParametrosCFGAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.HSM_GetParametrosCFGOperationCompleted Is Nothing) Then
                Me.HSM_GetParametrosCFGOperationCompleted = AddressOf Me.OnHSM_GetParametrosCFGOperationCompleted
            End If
            Me.InvokeAsync("HSM_GetParametrosCFG", New Object() {ProyectoBD, gTicket, rRespuesta}, Me.HSM_GetParametrosCFGOperationCompleted, userState)
        End Sub
        
        Private Sub OnHSM_GetParametrosCFGOperationCompleted(ByVal arg As Object)
            If (Not (Me.HSM_GetParametrosCFGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HSM_GetParametrosCFGCompleted(Me, New HSM_GetParametrosCFGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/EliminaDocsIdHSM", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub EliminaDocsIdHSM(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As Integer, ByVal NumDoctos As Integer, ByVal SizeExp As Long)
            Me.Invoke("EliminaDocsIdHSM", New Object() {ProyId, DocsId, RemoteStorage, NumDoctos, SizeExp})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EliminaDocsIdHSMAsync(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As Integer, ByVal NumDoctos As Integer, ByVal SizeExp As Long)
            Me.EliminaDocsIdHSMAsync(ProyId, DocsId, RemoteStorage, NumDoctos, SizeExp, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EliminaDocsIdHSMAsync(ByVal ProyId As Integer, ByVal DocsId() As String, ByVal RemoteStorage As Integer, ByVal NumDoctos As Integer, ByVal SizeExp As Long, ByVal userState As Object)
            If (Me.EliminaDocsIdHSMOperationCompleted Is Nothing) Then
                Me.EliminaDocsIdHSMOperationCompleted = AddressOf Me.OnEliminaDocsIdHSMOperationCompleted
            End If
            Me.InvokeAsync("EliminaDocsIdHSM", New Object() {ProyId, DocsId, RemoteStorage, NumDoctos, SizeExp}, Me.EliminaDocsIdHSMOperationCompleted, userState)
        End Sub
        
        Private Sub OnEliminaDocsIdHSMOperationCompleted(ByVal arg As Object)
            If (Not (Me.EliminaDocsIdHSMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EliminaDocsIdHSMCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/BuscaInstanciasXEstadoID_Fecha", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuscaInstanciasXEstadoID_Fecha(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal estadoID As Integer, ByVal fechaProc As String, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BuscaInstanciasXEstadoID_Fecha", New Object() {gTicket, ProyId, flujoID, estadoID, fechaProc, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuscaInstanciasXEstadoID_FechaAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal estadoID As Integer, ByVal fechaProc As String, ByVal rRespuesta As Respuesta)
            Me.BuscaInstanciasXEstadoID_FechaAsync(gTicket, ProyId, flujoID, estadoID, fechaProc, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuscaInstanciasXEstadoID_FechaAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal estadoID As Integer, ByVal fechaProc As String, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.BuscaInstanciasXEstadoID_FechaOperationCompleted Is Nothing) Then
                Me.BuscaInstanciasXEstadoID_FechaOperationCompleted = AddressOf Me.OnBuscaInstanciasXEstadoID_FechaOperationCompleted
            End If
            Me.InvokeAsync("BuscaInstanciasXEstadoID_Fecha", New Object() {gTicket, ProyId, flujoID, estadoID, fechaProc, rRespuesta}, Me.BuscaInstanciasXEstadoID_FechaOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuscaInstanciasXEstadoID_FechaOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuscaInstanciasXEstadoID_FechaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuscaInstanciasXEstadoID_FechaCompleted(Me, New BuscaInstanciasXEstadoID_FechaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/CreaExpediente", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreaExpediente(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal procesoID As Integer, ByVal observaciones As String, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("CreaExpediente", New Object() {gTicket, ProyId, docID, procesoID, observaciones, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreaExpedienteAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal procesoID As Integer, ByVal observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.CreaExpedienteAsync(gTicket, ProyId, docID, procesoID, observaciones, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreaExpedienteAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal procesoID As Integer, ByVal observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.CreaExpedienteOperationCompleted Is Nothing) Then
                Me.CreaExpedienteOperationCompleted = AddressOf Me.OnCreaExpedienteOperationCompleted
            End If
            Me.InvokeAsync("CreaExpediente", New Object() {gTicket, ProyId, docID, procesoID, observaciones, flujoID, rRespuesta}, Me.CreaExpedienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreaExpedienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreaExpedienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreaExpedienteCompleted(Me, New CreaExpedienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneExpedientesXEvento", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneExpedientesXEvento(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Long()
            Dim results() As Object = Me.Invoke("ObtieneExpedientesXEvento", New Object() {gTicket, ProyId, eventoID, tipo, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientesXEventoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneExpedientesXEventoAsync(gTicket, ProyId, eventoID, tipo, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientesXEventoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneExpedientesXEventoOperationCompleted Is Nothing) Then
                Me.ObtieneExpedientesXEventoOperationCompleted = AddressOf Me.OnObtieneExpedientesXEventoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneExpedientesXEvento", New Object() {gTicket, ProyId, eventoID, tipo, flujoID, rRespuesta}, Me.ObtieneExpedientesXEventoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneExpedientesXEventoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneExpedientesXEventoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneExpedientesXEventoCompleted(Me, New ObtieneExpedientesXEventoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneExpedientesXEvento_Fecha", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneExpedientesXEvento_Fecha(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal fechaProc As String, ByRef rRespuesta As Respuesta) As Long()
            Dim results() As Object = Me.Invoke("ObtieneExpedientesXEvento_Fecha", New Object() {gTicket, ProyId, eventoID, tipo, flujoID, fechaProc, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientesXEvento_FechaAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal fechaProc As String, ByVal rRespuesta As Respuesta)
            Me.ObtieneExpedientesXEvento_FechaAsync(gTicket, ProyId, eventoID, tipo, flujoID, fechaProc, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientesXEvento_FechaAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal fechaProc As String, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneExpedientesXEvento_FechaOperationCompleted Is Nothing) Then
                Me.ObtieneExpedientesXEvento_FechaOperationCompleted = AddressOf Me.OnObtieneExpedientesXEvento_FechaOperationCompleted
            End If
            Me.InvokeAsync("ObtieneExpedientesXEvento_Fecha", New Object() {gTicket, ProyId, eventoID, tipo, flujoID, fechaProc, rRespuesta}, Me.ObtieneExpedientesXEvento_FechaOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneExpedientesXEvento_FechaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneExpedientesXEvento_FechaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneExpedientesXEvento_FechaCompleted(Me, New ObtieneExpedientesXEvento_FechaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ReservaExpedientesXEvento", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReservaExpedientesXEvento(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal registros As Integer, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Long()
            Dim results() As Object = Me.Invoke("ReservaExpedientesXEvento", New Object() {gTicket, ProyId, estadoID, registros, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReservaExpedientesXEventoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal registros As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ReservaExpedientesXEventoAsync(gTicket, ProyId, estadoID, registros, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReservaExpedientesXEventoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal registros As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ReservaExpedientesXEventoOperationCompleted Is Nothing) Then
                Me.ReservaExpedientesXEventoOperationCompleted = AddressOf Me.OnReservaExpedientesXEventoOperationCompleted
            End If
            Me.InvokeAsync("ReservaExpedientesXEvento", New Object() {gTicket, ProyId, estadoID, registros, flujoID, rRespuesta}, Me.ReservaExpedientesXEventoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReservaExpedientesXEventoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReservaExpedientesXEventoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReservaExpedientesXEventoCompleted(Me, New ReservaExpedientesXEventoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneEventosxFlujo", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEventosxFlujo(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEventosxFlujo", New Object() {gTicket, ProyId, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventosxFlujoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneEventosxFlujoAsync(gTicket, ProyId, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventosxFlujoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneEventosxFlujoOperationCompleted Is Nothing) Then
                Me.ObtieneEventosxFlujoOperationCompleted = AddressOf Me.OnObtieneEventosxFlujoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEventosxFlujo", New Object() {gTicket, ProyId, flujoID, rRespuesta}, Me.ObtieneEventosxFlujoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEventosxFlujoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEventosxFlujoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEventosxFlujoCompleted(Me, New ObtieneEventosxFlujoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TransitaExpediente", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransitaExpediente(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("TransitaExpediente", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransitaExpedienteAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.TransitaExpedienteAsync(gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransitaExpedienteAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.TransitaExpedienteOperationCompleted Is Nothing) Then
                Me.TransitaExpedienteOperationCompleted = AddressOf Me.OnTransitaExpedienteOperationCompleted
            End If
            Me.InvokeAsync("TransitaExpediente", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta}, Me.TransitaExpedienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransitaExpedienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransitaExpedienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransitaExpedienteCompleted(Me, New TransitaExpedienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TransitaExpedienteLibre", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransitaExpedienteLibre(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("TransitaExpedienteLibre", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransitaExpedienteLibreAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.TransitaExpedienteLibreAsync(gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransitaExpedienteLibreAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.TransitaExpedienteLibreOperationCompleted Is Nothing) Then
                Me.TransitaExpedienteLibreOperationCompleted = AddressOf Me.OnTransitaExpedienteLibreOperationCompleted
            End If
            Me.InvokeAsync("TransitaExpedienteLibre", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta}, Me.TransitaExpedienteLibreOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransitaExpedienteLibreOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransitaExpedienteLibreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransitaExpedienteLibreCompleted(Me, New TransitaExpedienteLibreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/TransitaGrupoExpedientes", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransitaGrupoExpedientes(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID() As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("TransitaGrupoExpedientes", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransitaGrupoExpedientesAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID() As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.TransitaGrupoExpedientesAsync(gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransitaGrupoExpedientesAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID() As Long, ByVal eventoID As Integer, ByVal Observaciones As String, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.TransitaGrupoExpedientesOperationCompleted Is Nothing) Then
                Me.TransitaGrupoExpedientesOperationCompleted = AddressOf Me.OnTransitaGrupoExpedientesOperationCompleted
            End If
            Me.InvokeAsync("TransitaGrupoExpedientes", New Object() {gTicket, ProyId, docID, eventoID, Observaciones, flujoID, rRespuesta}, Me.TransitaGrupoExpedientesOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransitaGrupoExpedientesOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransitaGrupoExpedientesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransitaGrupoExpedientesCompleted(Me, New TransitaGrupoExpedientesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneEventosXprocesoID", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEventosXprocesoID(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal ProcesoID As Integer, ByVal FlujoID As Integer, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEventosXprocesoID", New Object() {gTicket, ProyId, ProcesoID, FlujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventosXprocesoIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal ProcesoID As Integer, ByVal FlujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneEventosXprocesoIDAsync(gTicket, ProyId, ProcesoID, FlujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventosXprocesoIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal ProcesoID As Integer, ByVal FlujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneEventosXprocesoIDOperationCompleted Is Nothing) Then
                Me.ObtieneEventosXprocesoIDOperationCompleted = AddressOf Me.OnObtieneEventosXprocesoIDOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEventosXprocesoID", New Object() {gTicket, ProyId, ProcesoID, FlujoID, rRespuesta}, Me.ObtieneEventosXprocesoIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEventosXprocesoIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEventosXprocesoIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEventosXprocesoIDCompleted(Me, New ObtieneEventosXprocesoIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneEventoXEstadoID", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEventoXEstadoID(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEventoXEstadoID", New Object() {gTicket, ProyId, estadoID, tipo, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventoXEstadoIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneEventoXEstadoIDAsync(gTicket, ProyId, estadoID, tipo, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEventoXEstadoIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal estadoID As Integer, ByVal tipo As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneEventoXEstadoIDOperationCompleted Is Nothing) Then
                Me.ObtieneEventoXEstadoIDOperationCompleted = AddressOf Me.OnObtieneEventoXEstadoIDOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEventoXEstadoID", New Object() {gTicket, ProyId, estadoID, tipo, flujoID, rRespuesta}, Me.ObtieneEventoXEstadoIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEventoXEstadoIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEventoXEstadoIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEventoXEstadoIDCompleted(Me, New ObtieneEventoXEstadoIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneEstados", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEstados(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEstados", New Object() {gTicket, ProyId, flujoID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstadosAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer)
            Me.ObtieneEstadosAsync(gTicket, ProyId, flujoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstadosAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal userState As Object)
            If (Me.ObtieneEstadosOperationCompleted Is Nothing) Then
                Me.ObtieneEstadosOperationCompleted = AddressOf Me.OnObtieneEstadosOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEstados", New Object() {gTicket, ProyId, flujoID}, Me.ObtieneEstadosOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEstadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEstadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEstadosCompleted(Me, New ObtieneEstadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneEstado", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEstado(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEstado", New Object() {gTicket, ProyId, flujoID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstadoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneEstadoAsync(gTicket, ProyId, flujoID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstadoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoID As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneEstadoOperationCompleted Is Nothing) Then
                Me.ObtieneEstadoOperationCompleted = AddressOf Me.OnObtieneEstadoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEstado", New Object() {gTicket, ProyId, flujoID, rRespuesta}, Me.ObtieneEstadoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEstadoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEstadoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEstadoCompleted(Me, New ObtieneEstadoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneInstanciaXDocID", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneInstanciaXDocID(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneInstanciaXDocID", New Object() {gTicket, ProyId, docID, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneInstanciaXDocIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal rRespuesta As Respuesta)
            Me.ObtieneInstanciaXDocIDAsync(gTicket, ProyId, docID, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneInstanciaXDocIDAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal docID As Long, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneInstanciaXDocIDOperationCompleted Is Nothing) Then
                Me.ObtieneInstanciaXDocIDOperationCompleted = AddressOf Me.OnObtieneInstanciaXDocIDOperationCompleted
            End If
            Me.InvokeAsync("ObtieneInstanciaXDocID", New Object() {gTicket, ProyId, docID, rRespuesta}, Me.ObtieneInstanciaXDocIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneInstanciaXDocIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneInstanciaXDocIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneInstanciaXDocIDCompleted(Me, New ObtieneInstanciaXDocIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneFlujo", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneFlujo(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoDesc As String, ByRef rRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("ObtieneFlujo", New Object() {gTicket, ProyId, flujoDesc, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneFlujoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoDesc As String, ByVal rRespuesta As Respuesta)
            Me.ObtieneFlujoAsync(gTicket, ProyId, flujoDesc, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneFlujoAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal flujoDesc As String, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneFlujoOperationCompleted Is Nothing) Then
                Me.ObtieneFlujoOperationCompleted = AddressOf Me.OnObtieneFlujoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneFlujo", New Object() {gTicket, ProyId, flujoDesc, rRespuesta}, Me.ObtieneFlujoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneFlujoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneFlujoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneFlujoCompleted(Me, New ObtieneFlujoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtieneFlujos", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneFlujos(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByRef rRespuesta As Respuesta) As String()
            Dim results() As Object = Me.Invoke("ObtieneFlujos", New Object() {gTicket, ProyId, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneFlujosAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtieneFlujosAsync(gTicket, ProyId, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneFlujosAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneFlujosOperationCompleted Is Nothing) Then
                Me.ObtieneFlujosOperationCompleted = AddressOf Me.OnObtieneFlujosOperationCompleted
            End If
            Me.InvokeAsync("ObtieneFlujos", New Object() {gTicket, ProyId, rRespuesta}, Me.ObtieneFlujosOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneFlujosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneFlujosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneFlujosCompleted(Me, New ObtieneFlujosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ObtenEventosFlujoVisual", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenEventosFlujoVisual(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoInicial As Integer, ByRef rRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtenEventosFlujoVisual", New Object() {gTicket, ProyId, eventoInicial, rRespuesta})
            rRespuesta = CType(results(1),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenEventosFlujoVisualAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoInicial As Integer, ByVal rRespuesta As Respuesta)
            Me.ObtenEventosFlujoVisualAsync(gTicket, ProyId, eventoInicial, rRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenEventosFlujoVisualAsync(ByVal gTicket As IDTicket, ByVal ProyId As Integer, ByVal eventoInicial As Integer, ByVal rRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtenEventosFlujoVisualOperationCompleted Is Nothing) Then
                Me.ObtenEventosFlujoVisualOperationCompleted = AddressOf Me.OnObtenEventosFlujoVisualOperationCompleted
            End If
            Me.InvokeAsync("ObtenEventosFlujoVisual", New Object() {gTicket, ProyId, eventoInicial, rRespuesta}, Me.ObtenEventosFlujoVisualOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenEventosFlujoVisualOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenEventosFlujoVisualCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenEventosFlujoVisualCompleted(Me, New ObtenEventosFlujoVisualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/BorraExpedientesRegistrados", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BorraExpedientesRegistrados(ByVal paramElimina() As String, ByVal ProyId As Integer) As Integer
            Dim results() As Object = Me.Invoke("BorraExpedientesRegistrados", New Object() {paramElimina, ProyId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BorraExpedientesRegistradosAsync(ByVal paramElimina() As String, ByVal ProyId As Integer)
            Me.BorraExpedientesRegistradosAsync(paramElimina, ProyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BorraExpedientesRegistradosAsync(ByVal paramElimina() As String, ByVal ProyId As Integer, ByVal userState As Object)
            If (Me.BorraExpedientesRegistradosOperationCompleted Is Nothing) Then
                Me.BorraExpedientesRegistradosOperationCompleted = AddressOf Me.OnBorraExpedientesRegistradosOperationCompleted
            End If
            Me.InvokeAsync("BorraExpedientesRegistrados", New Object() {paramElimina, ProyId}, Me.BorraExpedientesRegistradosOperationCompleted, userState)
        End Sub
        
        Private Sub OnBorraExpedientesRegistradosOperationCompleted(ByVal arg As Object)
            If (Not (Me.BorraExpedientesRegistradosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BorraExpedientesRegistradosCompleted(Me, New BorraExpedientesRegistradosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/RegistraArcivoFE", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegistraArcivoFE(ByVal nombreArchivo As String, ByVal idArchivo As String, ByVal ProyId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("RegistraArcivoFE", New Object() {nombreArchivo, idArchivo, ProyId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegistraArcivoFEAsync(ByVal nombreArchivo As String, ByVal idArchivo As String, ByVal ProyId As Integer)
            Me.RegistraArcivoFEAsync(nombreArchivo, idArchivo, ProyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegistraArcivoFEAsync(ByVal nombreArchivo As String, ByVal idArchivo As String, ByVal ProyId As Integer, ByVal userState As Object)
            If (Me.RegistraArcivoFEOperationCompleted Is Nothing) Then
                Me.RegistraArcivoFEOperationCompleted = AddressOf Me.OnRegistraArcivoFEOperationCompleted
            End If
            Me.InvokeAsync("RegistraArcivoFE", New Object() {nombreArchivo, idArchivo, ProyId}, Me.RegistraArcivoFEOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegistraArcivoFEOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegistraArcivoFECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegistraArcivoFECompleted(Me, New RegistraArcivoFECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/registraEXPTransmitido", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub registraEXPTransmitido(ByVal nombreEXP As String, ByVal ProyId As Integer)
            Me.Invoke("registraEXPTransmitido", New Object() {nombreEXP, ProyId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub registraEXPTransmitidoAsync(ByVal nombreEXP As String, ByVal ProyId As Integer)
            Me.registraEXPTransmitidoAsync(nombreEXP, ProyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub registraEXPTransmitidoAsync(ByVal nombreEXP As String, ByVal ProyId As Integer, ByVal userState As Object)
            If (Me.registraEXPTransmitidoOperationCompleted Is Nothing) Then
                Me.registraEXPTransmitidoOperationCompleted = AddressOf Me.OnregistraEXPTransmitidoOperationCompleted
            End If
            Me.InvokeAsync("registraEXPTransmitido", New Object() {nombreEXP, ProyId}, Me.registraEXPTransmitidoOperationCompleted, userState)
        End Sub
        
        Private Sub OnregistraEXPTransmitidoOperationCompleted(ByVal arg As Object)
            If (Not (Me.registraEXPTransmitidoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent registraEXPTransmitidoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ProcesaEXPFiles", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcesaEXPFiles(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal archivoZip() As Byte, ByVal zipFileName As String, ByVal rutaSalidaEXP As String, ByVal rutaDescomprime As String, ByVal esFactura As Integer, ByVal ProyId As Integer, ByVal myTicket As IDTicket) As String
            Dim results() As Object = Me.Invoke("ProcesaEXPFiles", New Object() {archivoZip, zipFileName, rutaSalidaEXP, rutaDescomprime, esFactura, ProyId, myTicket})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcesaEXPFilesAsync(ByVal archivoZip() As Byte, ByVal zipFileName As String, ByVal rutaSalidaEXP As String, ByVal rutaDescomprime As String, ByVal esFactura As Integer, ByVal ProyId As Integer, ByVal myTicket As IDTicket)
            Me.ProcesaEXPFilesAsync(archivoZip, zipFileName, rutaSalidaEXP, rutaDescomprime, esFactura, ProyId, myTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcesaEXPFilesAsync(ByVal archivoZip() As Byte, ByVal zipFileName As String, ByVal rutaSalidaEXP As String, ByVal rutaDescomprime As String, ByVal esFactura As Integer, ByVal ProyId As Integer, ByVal myTicket As IDTicket, ByVal userState As Object)
            If (Me.ProcesaEXPFilesOperationCompleted Is Nothing) Then
                Me.ProcesaEXPFilesOperationCompleted = AddressOf Me.OnProcesaEXPFilesOperationCompleted
            End If
            Me.InvokeAsync("ProcesaEXPFiles", New Object() {archivoZip, zipFileName, rutaSalidaEXP, rutaDescomprime, esFactura, ProyId, myTicket}, Me.ProcesaEXPFilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcesaEXPFilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcesaEXPFilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcesaEXPFilesCompleted(Me, New ProcesaEXPFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/ConsultaExpedientesRegistrados", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultaExpedientesRegistrados(ByVal ProyId As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ConsultaExpedientesRegistrados", New Object() {ProyId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultaExpedientesRegistradosAsync(ByVal ProyId As Integer)
            Me.ConsultaExpedientesRegistradosAsync(ProyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultaExpedientesRegistradosAsync(ByVal ProyId As Integer, ByVal userState As Object)
            If (Me.ConsultaExpedientesRegistradosOperationCompleted Is Nothing) Then
                Me.ConsultaExpedientesRegistradosOperationCompleted = AddressOf Me.OnConsultaExpedientesRegistradosOperationCompleted
            End If
            Me.InvokeAsync("ConsultaExpedientesRegistrados", New Object() {ProyId}, Me.ConsultaExpedientesRegistradosOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultaExpedientesRegistradosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaExpedientesRegistradosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaExpedientesRegistradosCompleted(Me, New ConsultaExpedientesRegistradosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WsImagenes/WsImagenes/Loader_TransitaEdoDocumento", RequestNamespace:="http://tempuri.org/WsImagenes/WsImagenes", ResponseNamespace:="http://tempuri.org/WsImagenes/WsImagenes", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Loader_TransitaEdoDocumento(ByVal ProyectoBD As Integer, ByRef gTicket As IDTicket, ByRef rRespuesta As Respuesta, ByVal Docid As Long, ByVal EstadoDocto As Integer, ByVal tipoCatalogoID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Loader_TransitaEdoDocumento", New Object() {ProyectoBD, gTicket, rRespuesta, Docid, EstadoDocto, tipoCatalogoID})
            gTicket = CType(results(1),IDTicket)
            rRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Loader_TransitaEdoDocumentoAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal Docid As Long, ByVal EstadoDocto As Integer, ByVal tipoCatalogoID As Integer)
            Me.Loader_TransitaEdoDocumentoAsync(ProyectoBD, gTicket, rRespuesta, Docid, EstadoDocto, tipoCatalogoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Loader_TransitaEdoDocumentoAsync(ByVal ProyectoBD As Integer, ByVal gTicket As IDTicket, ByVal rRespuesta As Respuesta, ByVal Docid As Long, ByVal EstadoDocto As Integer, ByVal tipoCatalogoID As Integer, ByVal userState As Object)
            If (Me.Loader_TransitaEdoDocumentoOperationCompleted Is Nothing) Then
                Me.Loader_TransitaEdoDocumentoOperationCompleted = AddressOf Me.OnLoader_TransitaEdoDocumentoOperationCompleted
            End If
            Me.InvokeAsync("Loader_TransitaEdoDocumento", New Object() {ProyectoBD, gTicket, rRespuesta, Docid, EstadoDocto, tipoCatalogoID}, Me.Loader_TransitaEdoDocumentoOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoader_TransitaEdoDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Loader_TransitaEdoDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Loader_TransitaEdoDocumentoCompleted(Me, New Loader_TransitaEdoDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="Main")>  _
    Partial Public Class Respuesta
        
        Private respuestaIDField As String
        
        Private categoriaField As String
        
        Private descripcionCategoriaField As String
        
        Private descripcionRespuestaField As String
        
        Private respuestaToStringField As String
        
        '''<comentarios/>
        Public Property RespuestaID() As String
            Get
                Return Me.respuestaIDField
            End Get
            Set
                Me.respuestaIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Categoria() As String
            Get
                Return Me.categoriaField
            End Get
            Set
                Me.categoriaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DescripcionCategoria() As String
            Get
                Return Me.descripcionCategoriaField
            End Get
            Set
                Me.descripcionCategoriaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DescripcionRespuesta() As String
            Get
                Return Me.descripcionRespuestaField
            End Get
            Set
                Me.descripcionRespuestaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property RespuestaToString() As String
            Get
                Return Me.respuestaToStringField
            End Get
            Set
                Me.respuestaToStringField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class clsExtension
        
        Private extIDField As Integer
        
        Private descripcionField As String
        
        Private manejadorField As String
        
        '''<comentarios/>
        Public Property ExtID() As Integer
            Get
                Return Me.extIDField
            End Get
            Set
                Me.extIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Descripcion() As String
            Get
                Return Me.descripcionField
            End Get
            Set
                Me.descripcionField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Manejador() As String
            Get
                Return Me.manejadorField
            End Get
            Set
                Me.manejadorField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class CampoReceive
        
        Private nombreCampoField As String
        
        Private valorField As String
        
        '''<comentarios/>
        Public Property NombreCampo() As String
            Get
                Return Me.nombreCampoField
            End Get
            Set
                Me.nombreCampoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Valor() As String
            Get
                Return Me.valorField
            End Get
            Set
                Me.valorField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class DocReceive
        
        Private tablaField As String
        
        Private descripcionField As String
        
        Private docIDField As Long
        
        Private tipoDocField As Integer
        
        Private tipoDocPIDField As Integer
        
        Private separadorField As Boolean
        
        Private guardarseField As Boolean
        
        Private imgField() As Byte
        
        Private camposField() As CampoReceive
        
        Private tipoDocHijoField() As DocReceive
        
        Private extField As Integer
        
        Private sizeFileField As Long
        
        '''<comentarios/>
        Public Property Tabla() As String
            Get
                Return Me.tablaField
            End Get
            Set
                Me.tablaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Descripcion() As String
            Get
                Return Me.descripcionField
            End Get
            Set
                Me.descripcionField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DocID() As Long
            Get
                Return Me.docIDField
            End Get
            Set
                Me.docIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDoc() As Integer
            Get
                Return Me.tipoDocField
            End Get
            Set
                Me.tipoDocField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDocPID() As Integer
            Get
                Return Me.tipoDocPIDField
            End Get
            Set
                Me.tipoDocPIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Separador() As Boolean
            Get
                Return Me.separadorField
            End Get
            Set
                Me.separadorField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Guardarse() As Boolean
            Get
                Return Me.guardarseField
            End Get
            Set
                Me.guardarseField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property Img() As Byte()
            Get
                Return Me.imgField
            End Get
            Set
                Me.imgField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Campos() As CampoReceive()
            Get
                Return Me.camposField
            End Get
            Set
                Me.camposField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDocHijo() As DocReceive()
            Get
                Return Me.tipoDocHijoField
            End Get
            Set
                Me.tipoDocHijoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Ext() As Integer
            Get
                Return Me.extField
            End Get
            Set
                Me.extField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property SizeFile() As Long
            Get
                Return Me.sizeFileField
            End Get
            Set
                Me.sizeFileField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class CamposDocumento
        
        Private tablaField As String
        
        Private campoIdField As Integer
        
        Private nombreField As String
        
        Private nombreCampoField As String
        
        Private tipoDatoField As String
        
        Private lenghtMaxField As Integer
        
        Private lenghtMinField As Integer
        
        Private obligatorioField As Boolean
        
        Private mostrarField As Boolean
        
        Private mascaraField As String
        
        Private reglaField As String
        
        Private accionField As String
        
        Private proConsultaField As String
        
        Private templateIdField As Integer
        
        Private pedirScanerField As Boolean
        
        Private permisoIDField As Integer
        
        Private tipoDatoConsultaField As Integer
        
        Private condicion1Field As String
        
        Private condicion2Field As String
        
        Private condicion3Field As String
        
        Private tipoDatoClienteField As Integer
        
        Private valorField As String
        
        Private campoLlaveConsultaField As Boolean
        
        '''<comentarios/>
        Public Property Tabla() As String
            Get
                Return Me.tablaField
            End Get
            Set
                Me.tablaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property CampoId() As Integer
            Get
                Return Me.campoIdField
            End Get
            Set
                Me.campoIdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Nombre() As String
            Get
                Return Me.nombreField
            End Get
            Set
                Me.nombreField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombreCampo() As String
            Get
                Return Me.nombreCampoField
            End Get
            Set
                Me.nombreCampoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDato() As String
            Get
                Return Me.tipoDatoField
            End Get
            Set
                Me.tipoDatoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property LenghtMax() As Integer
            Get
                Return Me.lenghtMaxField
            End Get
            Set
                Me.lenghtMaxField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property LenghtMin() As Integer
            Get
                Return Me.lenghtMinField
            End Get
            Set
                Me.lenghtMinField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Obligatorio() As Boolean
            Get
                Return Me.obligatorioField
            End Get
            Set
                Me.obligatorioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Mostrar() As Boolean
            Get
                Return Me.mostrarField
            End Get
            Set
                Me.mostrarField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Mascara() As String
            Get
                Return Me.mascaraField
            End Get
            Set
                Me.mascaraField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Regla() As String
            Get
                Return Me.reglaField
            End Get
            Set
                Me.reglaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Accion() As String
            Get
                Return Me.accionField
            End Get
            Set
                Me.accionField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property ProConsulta() As String
            Get
                Return Me.proConsultaField
            End Get
            Set
                Me.proConsultaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TemplateId() As Integer
            Get
                Return Me.templateIdField
            End Get
            Set
                Me.templateIdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property PedirScaner() As Boolean
            Get
                Return Me.pedirScanerField
            End Get
            Set
                Me.pedirScanerField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property PermisoID() As Integer
            Get
                Return Me.permisoIDField
            End Get
            Set
                Me.permisoIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDatoConsulta() As Integer
            Get
                Return Me.tipoDatoConsultaField
            End Get
            Set
                Me.tipoDatoConsultaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Condicion1() As String
            Get
                Return Me.condicion1Field
            End Get
            Set
                Me.condicion1Field = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Condicion2() As String
            Get
                Return Me.condicion2Field
            End Get
            Set
                Me.condicion2Field = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Condicion3() As String
            Get
                Return Me.condicion3Field
            End Get
            Set
                Me.condicion3Field = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDatoCliente() As Integer
            Get
                Return Me.tipoDatoClienteField
            End Get
            Set
                Me.tipoDatoClienteField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Valor() As String
            Get
                Return Me.valorField
            End Get
            Set
                Me.valorField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property CampoLlaveConsulta() As Boolean
            Get
                Return Me.campoLlaveConsultaField
            End Get
            Set
                Me.campoLlaveConsultaField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class TiposDocumento
        
        Private pTipoDocIDField As Integer
        
        Private pDocIDField As Long
        
        Private pDescripcionField As String
        
        Private pTablaField As String
        
        Private pJerarquiaField As Integer
        
        Private pObligatorioField As Boolean
        
        Private pOrdenDigitalField As Integer
        
        Private pTipoDocPIDField As Integer
        
        Private pCapturaField As Boolean
        
        Private pSeparadorField As Boolean
        
        Private pGuardarseField As Boolean
        
        Private pActivoField As Boolean
        
        Private pImgField() As Byte
        
        Private pTipoDocHijosField() As TiposDocumento
        
        Private pCampoField() As CamposDocumento
        
        Private camposField() As CamposDocumento
        
        Private docIDField As Long
        
        Private tipoDocIDField As Integer
        
        Private descripcionField As String
        
        Private tablaField As String
        
        Private jerarquiaField As Integer
        
        Private obligatorioField As Boolean
        
        Private ordenDigitalField As Integer
        
        Private tipoDocPIDField As Integer
        
        Private tipoDocHijoField() As TiposDocumento
        
        Private capturaField As Boolean
        
        Private separadorField As Boolean
        
        Private guardarseField As Boolean
        
        Private activoField As Boolean
        
        Private imgField() As Byte
        
        Private extField As Integer
        
        Private codigoIdField As String
        
        '''<comentarios/>
        Public Property pTipoDocID() As Integer
            Get
                Return Me.pTipoDocIDField
            End Get
            Set
                Me.pTipoDocIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pDocID() As Long
            Get
                Return Me.pDocIDField
            End Get
            Set
                Me.pDocIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pDescripcion() As String
            Get
                Return Me.pDescripcionField
            End Get
            Set
                Me.pDescripcionField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pTabla() As String
            Get
                Return Me.pTablaField
            End Get
            Set
                Me.pTablaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pJerarquia() As Integer
            Get
                Return Me.pJerarquiaField
            End Get
            Set
                Me.pJerarquiaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pObligatorio() As Boolean
            Get
                Return Me.pObligatorioField
            End Get
            Set
                Me.pObligatorioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pOrdenDigital() As Integer
            Get
                Return Me.pOrdenDigitalField
            End Get
            Set
                Me.pOrdenDigitalField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pTipoDocPID() As Integer
            Get
                Return Me.pTipoDocPIDField
            End Get
            Set
                Me.pTipoDocPIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pCaptura() As Boolean
            Get
                Return Me.pCapturaField
            End Get
            Set
                Me.pCapturaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pSeparador() As Boolean
            Get
                Return Me.pSeparadorField
            End Get
            Set
                Me.pSeparadorField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pGuardarse() As Boolean
            Get
                Return Me.pGuardarseField
            End Get
            Set
                Me.pGuardarseField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pActivo() As Boolean
            Get
                Return Me.pActivoField
            End Get
            Set
                Me.pActivoField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property pImg() As Byte()
            Get
                Return Me.pImgField
            End Get
            Set
                Me.pImgField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pTipoDocHijos() As TiposDocumento()
            Get
                Return Me.pTipoDocHijosField
            End Get
            Set
                Me.pTipoDocHijosField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property pCampo() As CamposDocumento()
            Get
                Return Me.pCampoField
            End Get
            Set
                Me.pCampoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Campos() As CamposDocumento()
            Get
                Return Me.camposField
            End Get
            Set
                Me.camposField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DocID() As Long
            Get
                Return Me.docIDField
            End Get
            Set
                Me.docIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDocID() As Integer
            Get
                Return Me.tipoDocIDField
            End Get
            Set
                Me.tipoDocIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Descripcion() As String
            Get
                Return Me.descripcionField
            End Get
            Set
                Me.descripcionField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Tabla() As String
            Get
                Return Me.tablaField
            End Get
            Set
                Me.tablaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Jerarquia() As Integer
            Get
                Return Me.jerarquiaField
            End Get
            Set
                Me.jerarquiaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Obligatorio() As Boolean
            Get
                Return Me.obligatorioField
            End Get
            Set
                Me.obligatorioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property OrdenDigital() As Integer
            Get
                Return Me.ordenDigitalField
            End Get
            Set
                Me.ordenDigitalField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDocPID() As Integer
            Get
                Return Me.tipoDocPIDField
            End Get
            Set
                Me.tipoDocPIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TipoDocHijo() As TiposDocumento()
            Get
                Return Me.tipoDocHijoField
            End Get
            Set
                Me.tipoDocHijoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Captura() As Boolean
            Get
                Return Me.capturaField
            End Get
            Set
                Me.capturaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Separador() As Boolean
            Get
                Return Me.separadorField
            End Get
            Set
                Me.separadorField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Guardarse() As Boolean
            Get
                Return Me.guardarseField
            End Get
            Set
                Me.guardarseField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Activo() As Boolean
            Get
                Return Me.activoField
            End Get
            Set
                Me.activoField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property Img() As Byte()
            Get
                Return Me.imgField
            End Get
            Set
                Me.imgField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Ext() As Integer
            Get
                Return Me.extField
            End Get
            Set
                Me.extField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property CodigoId() As String
            Get
                Return Me.codigoIdField
            End Get
            Set
                Me.codigoIdField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/WsImagenes/WsImagenes")>  _
    Partial Public Class clsFileHSM
        
        Private arrayFileField() As Byte
        
        Private extField As String
        
        Private consecutivoField As String
        
        Private separadorField As Boolean
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property ArrayFile() As Byte()
            Get
                Return Me.arrayFileField
            End Get
            Set
                Me.arrayFileField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Ext() As String
            Get
                Return Me.extField
            End Get
            Set
                Me.extField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Consecutivo() As String
            Get
                Return Me.consecutivoField
            End Get
            Set
                Me.consecutivoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Separador() As Boolean
            Get
                Return Me.separadorField
            End Get
            Set
                Me.separadorField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="Main")>  _
    Partial Public Class IDTicket
        
        Private ticketIDField() As Byte
        
        Private usrIDField As String
        
        Private ipField As String
        
        Private proyectoIDField As Integer
        
        Private versionAplicacionIDField As Integer
        
        Private fechaHoraInicioField As Date
        
        Private fechaHoraUltimoAccesoField As Date
        
        Private tiempoVidaField As Integer
        
        Private tiempoRestanteField As Integer
        
        Private nombreCompletoField As String
        
        Private nombreUsuarioField As String
        
        Private grupoAdminIDField As Integer
        
        Private clienteIDField As Integer
        
        Private perfilUsuarioIDField As Integer
        
        Private tiempoVidaPwdField As Integer
        
        Private tiempoActualizoPwdField As Integer
        
        Private noIdentidadField As Integer
        
        Private fechaUltLoginField As Date
        
        Private duracionDiasField As Integer
        
        Private avisoCaducidadPwdDiasField As Integer
        
        Private fechaCreacionPwdField As Date
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property TicketID() As Byte()
            Get
                Return Me.ticketIDField
            End Get
            Set
                Me.ticketIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property UsrID() As String
            Get
                Return Me.usrIDField
            End Get
            Set
                Me.usrIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property IP() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property ProyectoID() As Integer
            Get
                Return Me.proyectoIDField
            End Get
            Set
                Me.proyectoIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property VersionAplicacionID() As Integer
            Get
                Return Me.versionAplicacionIDField
            End Get
            Set
                Me.versionAplicacionIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaHoraInicio() As Date
            Get
                Return Me.fechaHoraInicioField
            End Get
            Set
                Me.fechaHoraInicioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaHoraUltimoAcceso() As Date
            Get
                Return Me.fechaHoraUltimoAccesoField
            End Get
            Set
                Me.fechaHoraUltimoAccesoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoVida() As Integer
            Get
                Return Me.tiempoVidaField
            End Get
            Set
                Me.tiempoVidaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoRestante() As Integer
            Get
                Return Me.tiempoRestanteField
            End Get
            Set
                Me.tiempoRestanteField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombreCompleto() As String
            Get
                Return Me.nombreCompletoField
            End Get
            Set
                Me.nombreCompletoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombreUsuario() As String
            Get
                Return Me.nombreUsuarioField
            End Get
            Set
                Me.nombreUsuarioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property GrupoAdminID() As Integer
            Get
                Return Me.grupoAdminIDField
            End Get
            Set
                Me.grupoAdminIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property ClienteID() As Integer
            Get
                Return Me.clienteIDField
            End Get
            Set
                Me.clienteIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property PerfilUsuarioID() As Integer
            Get
                Return Me.perfilUsuarioIDField
            End Get
            Set
                Me.perfilUsuarioIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoVidaPwd() As Integer
            Get
                Return Me.tiempoVidaPwdField
            End Get
            Set
                Me.tiempoVidaPwdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoActualizoPwd() As Integer
            Get
                Return Me.tiempoActualizoPwdField
            End Get
            Set
                Me.tiempoActualizoPwdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NoIdentidad() As Integer
            Get
                Return Me.noIdentidadField
            End Get
            Set
                Me.noIdentidadField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaUltLogin() As Date
            Get
                Return Me.fechaUltLoginField
            End Get
            Set
                Me.fechaUltLoginField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DuracionDias() As Integer
            Get
                Return Me.duracionDiasField
            End Get
            Set
                Me.duracionDiasField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property AvisoCaducidadPwdDias() As Integer
            Get
                Return Me.avisoCaducidadPwdDiasField
            End Get
            Set
                Me.avisoCaducidadPwdDiasField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaCreacionPwd() As Date
            Get
                Return Me.fechaCreacionPwdField
            End Get
            Set
                Me.fechaCreacionPwdField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ValidaCampoLlaveCompletedEventHandler(ByVal sender As Object, ByVal e As ValidaCampoLlaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidaCampoLlaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ContestaImagenCompletedEventHandler(ByVal sender As Object, ByVal e As ContestaImagenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContestaImagenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ContestaImagenURLCompletedEventHandler(ByVal sender As Object, ByVal e As ContestaImagenURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContestaImagenURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ContestaImagenProtegidaCompletedEventHandler(ByVal sender As Object, ByVal e As ContestaImagenProtegidaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContestaImagenProtegidaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ContestaFileHSMCompletedEventHandler(ByVal sender As Object, ByVal e As ContestaFileHSMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContestaFileHSMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsFileHSM
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsFileHSM)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetConfigWebScanCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigWebScanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigWebScanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TipoDocumentoConJerarquiaCompletedEventHandler(ByVal sender As Object, ByVal e As TipoDocumentoConJerarquiaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TipoDocumentoConJerarquiaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TiposDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As TiposDocumentoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TiposDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TipoDocumentoConJerarquiaInvercapCompletedEventHandler(ByVal sender As Object, ByVal e As TipoDocumentoConJerarquiaInvercapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TipoDocumentoConJerarquiaInvercapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneHijosConDocTypeCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneHijosConDocTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneHijosConDocTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneDocInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDocInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneDocInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTiposDocumentoSinJerarquiaCompletedEventHandler(ByVal sender As Object, ByVal e As GetTiposDocumentoSinJerarquiaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTiposDocumentoSinJerarquiaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TipoDocumetoReemplazoCompletedEventHandler(ByVal sender As Object, ByVal e As TipoDocumetoReemplazoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TipoDocumetoReemplazoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TipoDocumetoReemplazoInvercapCompletedEventHandler(ByVal sender As Object, ByVal e As TipoDocumetoReemplazoInvercapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TipoDocumetoReemplazoInvercapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TiposDocumento()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TiposDocumento())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UserLoginCompletedEventHandler(ByVal sender As Object, ByVal e As UserLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSequentialCompletedEventHandler(ByVal sender As Object, ByVal e As GetSequentialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSequentialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property respuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateScanStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateScanStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateScanStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub EliminaDocsIdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GuardarImagenSMegaCompletedEventHandler(ByVal sender As Object, ByVal e As GuardarImagenSMegaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GuardarImagenSMegaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NumLoteID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocIdRef() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ruta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DispositivoID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReemplazaImagenDatosCompletedEventHandler(ByVal sender As Object, ByVal e As ReemplazaImagenDatosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReemplazaImagenDatosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NumLoteID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocIdRef() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PathImagenLocal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ConsecutivoLocal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ruta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DispositivoID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ActualizaCamposCapturaCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizaCamposCapturaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ActualizaCamposCapturaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GuardarArchivoPackageCompletedEventHandler(ByVal sender As Object, ByVal e As GuardarArchivoPackageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GuardarArchivoPackageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NumLoteID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocIdRef() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ruta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DispositivoID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetExtensionCompletedEventHandler(ByVal sender As Object, ByVal e As GetExtensionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExtensionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsExtension()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsExtension())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReemplazaArchivoPackageCompletedEventHandler(ByVal sender As Object, ByVal e As ReemplazaArchivoPackageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReemplazaArchivoPackageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NumLoteID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocIdRef() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ruta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DispositivoID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_GetMediosOffLineCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_GetMediosOffLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_GetMediosOffLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_GetSolicitudFLCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_GetSolicitudFLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_GetSolicitudFLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_HSM_AsignaDispositivoCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_HSM_AsignaDispositivoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_HSM_AsignaDispositivoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_UpStatusSolicitudFLCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_UpStatusSolicitudFLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_UpStatusSolicitudFLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_SaveFileCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_SaveFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_SaveFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_DelFileCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_DelFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_DelFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub WS_HSM_GetVigenciaLoteCompletedEventHandler(ByVal sender As Object, ByVal e As WS_HSM_GetVigenciaLoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_HSM_GetVigenciaLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub WS_HSM_GetCaducidadlotesCompletedEventHandler(ByVal sender As Object, ByVal e As WS_HSM_GetCaducidadlotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_HSM_GetCaducidadlotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_TransitaEdoLoteCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_TransitaEdoLoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_TransitaEdoLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_GetRutaLotePackageCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_GetRutaLotePackageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_GetRutaLotePackageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_GetCFGLoteCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_GetCFGLoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_GetCFGLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Monitor_CheckBDCompletedEventHandler(ByVal sender As Object, ByVal e As Monitor_CheckBDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Monitor_CheckBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_GetUltimoLoteCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_GetUltimoLoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_GetUltimoLoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_GetLotesBackupCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_GetLotesBackupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_GetLotesBackupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HSM_GetParametrosCFGCompletedEventHandler(ByVal sender As Object, ByVal e As HSM_GetParametrosCFGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HSM_GetParametrosCFGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub EliminaDocsIdHSMCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub BuscaInstanciasXEstadoID_FechaCompletedEventHandler(ByVal sender As Object, ByVal e As BuscaInstanciasXEstadoID_FechaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuscaInstanciasXEstadoID_FechaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreaExpedienteCompletedEventHandler(ByVal sender As Object, ByVal e As CreaExpedienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreaExpedienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneExpedientesXEventoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneExpedientesXEventoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneExpedientesXEventoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneExpedientesXEvento_FechaCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneExpedientesXEvento_FechaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneExpedientesXEvento_FechaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReservaExpedientesXEventoCompletedEventHandler(ByVal sender As Object, ByVal e As ReservaExpedientesXEventoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReservaExpedientesXEventoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEventosxFlujoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEventosxFlujoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEventosxFlujoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TransitaExpedienteCompletedEventHandler(ByVal sender As Object, ByVal e As TransitaExpedienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransitaExpedienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TransitaExpedienteLibreCompletedEventHandler(ByVal sender As Object, ByVal e As TransitaExpedienteLibreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransitaExpedienteLibreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TransitaGrupoExpedientesCompletedEventHandler(ByVal sender As Object, ByVal e As TransitaGrupoExpedientesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransitaGrupoExpedientesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEventosXprocesoIDCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEventosXprocesoIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEventosXprocesoIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEventoXEstadoIDCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEventoXEstadoIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEventoXEstadoIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEstadosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEstadosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEstadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEstadoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEstadoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEstadoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneInstanciaXDocIDCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneInstanciaXDocIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneInstanciaXDocIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneFlujoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneFlujoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneFlujoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneFlujosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneFlujosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneFlujosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtenEventosFlujoVisualCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenEventosFlujoVisualCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenEventosFlujoVisualCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub BorraExpedientesRegistradosCompletedEventHandler(ByVal sender As Object, ByVal e As BorraExpedientesRegistradosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BorraExpedientesRegistradosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub RegistraArcivoFECompletedEventHandler(ByVal sender As Object, ByVal e As RegistraArcivoFECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegistraArcivoFECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub registraEXPTransmitidoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ProcesaEXPFilesCompletedEventHandler(ByVal sender As Object, ByVal e As ProcesaEXPFilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcesaEXPFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ConsultaExpedientesRegistradosCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaExpedientesRegistradosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultaExpedientesRegistradosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Loader_TransitaEdoDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As Loader_TransitaEdoDocumentoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Loader_TransitaEdoDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property gTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
End Namespace
