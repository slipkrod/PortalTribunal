'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5448
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=2.0.50727.5448.
'
Namespace WsConsultas
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ConsultasWebSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class ConsultasWeb
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private BuscaCriterioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneExpedientePadreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneExpedienteHijoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtienecamposOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtienecamposPadreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActualizaCamposCapturaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidaDato_EROperationCompleted As System.Threading.SendOrPostCallback
        
        Private BuscaCriterioGrupoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BuscaCriterioGrupoVerificaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerInfoDocPadreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerInfoDocHijosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActualizaImgExportadoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsLogExportadorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetImageNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetXmlDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReceivedXmlDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneHijosPorDocTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EjecutaSPCondicionalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EjecutaSPparamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteNonQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExpedienteOK_MCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidaExpObligatoriosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneEstatusExpImgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneCifrasControlRecorteGlobalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtieneCifrasControlRecorteDetalleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Portalv9.My.MySettings.Default.Portalv9_WsConsultas_ConsultasWeb
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event BuscaCriterioCompleted As BuscaCriterioCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneExpedientePadreCompleted As ObtieneExpedientePadreCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneExpedienteHijoCompleted As ObtieneExpedienteHijoCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtienecamposCompleted As ObtienecamposCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtienecamposPadreCompleted As ObtienecamposPadreCompletedEventHandler
        
        '''<remarks/>
        Public Event ActualizaCamposCapturaCompleted As ActualizaCamposCapturaCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidaDato_ERCompleted As ValidaDato_ERCompletedEventHandler
        
        '''<remarks/>
        Public Event BuscaCriterioGrupoCompleted As BuscaCriterioGrupoCompletedEventHandler
        
        '''<remarks/>
        Public Event BuscaCriterioGrupoVerificaCompleted As BuscaCriterioGrupoVerificaCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerInfoDocPadreCompleted As ObtenerInfoDocPadreCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerInfoDocHijosCompleted As ObtenerInfoDocHijosCompletedEventHandler
        
        '''<remarks/>
        Public Event ActualizaImgExportadoCompleted As ActualizaImgExportadoCompletedEventHandler
        
        '''<remarks/>
        Public Event InsLogExportadorCompleted As InsLogExportadorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetImageNameCompleted As GetImageNameCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerTemplateCompleted As ObtenerTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetXmlDataCompleted As GetXmlDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ReceivedXmlDataCompleted As ReceivedXmlDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneHijosPorDocTypeCompleted As ObtieneHijosPorDocTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event EjecutaSPCondicionalCompleted As EjecutaSPCondicionalCompletedEventHandler
        
        '''<remarks/>
        Public Event EjecutaSPparamCompleted As EjecutaSPparamCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteDataSetCompleted As ExecuteDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteNonQueryCompleted As ExecuteNonQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event ExpedienteOK_MCCompleted As ExpedienteOK_MCCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidaExpObligatoriosCompleted As ValidaExpObligatoriosCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneEstatusExpImgCompleted As ObtieneEstatusExpImgCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneCifrasControlRecorteGlobalCompleted As ObtieneCifrasControlRecorteGlobalCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtieneCifrasControlRecorteDetalleCompleted As ObtieneCifrasControlRecorteDetalleCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuscaCriterio", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuscaCriterio(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal Valor As String, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BuscaCriterio", New Object() {ptTicket, ProyectoID, Template, Valor, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal Valor As String, ByVal pRespuesta As Respuesta)
            Me.BuscaCriterioAsync(ptTicket, ProyectoID, Template, Valor, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal Valor As String, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.BuscaCriterioOperationCompleted Is Nothing) Then
                Me.BuscaCriterioOperationCompleted = AddressOf Me.OnBuscaCriterioOperationCompleted
            End If
            Me.InvokeAsync("BuscaCriterio", New Object() {ptTicket, ProyectoID, Template, Valor, pRespuesta}, Me.BuscaCriterioOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuscaCriterioOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuscaCriterioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuscaCriterioCompleted(Me, New BuscaCriterioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneExpedientePadre", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneExpedientePadre(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneExpedientePadre", New Object() {ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientePadreAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtieneExpedientePadreAsync(ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedientePadreAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneExpedientePadreOperationCompleted Is Nothing) Then
                Me.ObtieneExpedientePadreOperationCompleted = AddressOf Me.OnObtieneExpedientePadreOperationCompleted
            End If
            Me.InvokeAsync("ObtieneExpedientePadre", New Object() {ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, pRespuesta}, Me.ObtieneExpedientePadreOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneExpedientePadreOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneExpedientePadreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneExpedientePadreCompleted(Me, New ObtieneExpedientePadreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneExpedienteHijo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneExpedienteHijo(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByVal Docidp As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneExpedienteHijo", New Object() {ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, Docidp, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedienteHijoAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByVal Docidp As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtieneExpedienteHijoAsync(ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, Docidp, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneExpedienteHijoAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal ValorLlave As String, ByVal TemplateID As String, ByVal DocID As Integer, ByVal Docidp As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtieneExpedienteHijoOperationCompleted Is Nothing) Then
                Me.ObtieneExpedienteHijoOperationCompleted = AddressOf Me.OnObtieneExpedienteHijoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneExpedienteHijo", New Object() {ptTicket, ProyectoID, ValorLlave, TemplateID, DocID, Docidp, pRespuesta}, Me.ObtieneExpedienteHijoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneExpedienteHijoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneExpedienteHijoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneExpedienteHijoCompleted(Me, New ObtieneExpedienteHijoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Obtienecampos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Obtienecampos(ByRef ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Obtienecampos", New Object() {ptTicket, iDocid, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtienecamposAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtienecamposAsync(ptTicket, iDocid, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtienecamposAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtienecamposOperationCompleted Is Nothing) Then
                Me.ObtienecamposOperationCompleted = AddressOf Me.OnObtienecamposOperationCompleted
            End If
            Me.InvokeAsync("Obtienecampos", New Object() {ptTicket, iDocid, ProyectoID, pRespuesta}, Me.ObtienecamposOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtienecamposOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtienecamposCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtienecamposCompleted(Me, New ObtienecamposCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtienecamposPadre", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtienecamposPadre(ByRef ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtienecamposPadre", New Object() {ptTicket, iDocid, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtienecamposPadreAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtienecamposPadreAsync(ptTicket, iDocid, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtienecamposPadreAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtienecamposPadreOperationCompleted Is Nothing) Then
                Me.ObtienecamposPadreOperationCompleted = AddressOf Me.OnObtienecamposPadreOperationCompleted
            End If
            Me.InvokeAsync("ObtienecamposPadre", New Object() {ptTicket, iDocid, ProyectoID, pRespuesta}, Me.ObtienecamposPadreOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtienecamposPadreOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtienecamposPadreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtienecamposPadreCompleted(Me, New ObtienecamposPadreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActualizaCamposCaptura", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActualizaCamposCaptura(ByRef ptTicket As IDTicket, ByVal iDocid As Integer, ByVal valor As String, ByVal Campo As String, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As String
            Dim results() As Object = Me.Invoke("ActualizaCamposCaptura", New Object() {ptTicket, iDocid, valor, Campo, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ActualizaCamposCapturaAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal valor As String, ByVal Campo As String, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ActualizaCamposCapturaAsync(ptTicket, iDocid, valor, Campo, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActualizaCamposCapturaAsync(ByVal ptTicket As IDTicket, ByVal iDocid As Integer, ByVal valor As String, ByVal Campo As String, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ActualizaCamposCapturaOperationCompleted Is Nothing) Then
                Me.ActualizaCamposCapturaOperationCompleted = AddressOf Me.OnActualizaCamposCapturaOperationCompleted
            End If
            Me.InvokeAsync("ActualizaCamposCaptura", New Object() {ptTicket, iDocid, valor, Campo, ProyectoID, pRespuesta}, Me.ActualizaCamposCapturaOperationCompleted, userState)
        End Sub
        
        Private Sub OnActualizaCamposCapturaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaCamposCapturaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaCamposCapturaCompleted(Me, New ActualizaCamposCapturaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidaDato_ER", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidaDato_ER(ByRef ptTicket As IDTicket, ByVal valor As String, ByVal tipoDato As String, ByVal LongitudMax As Integer, ByVal LongitudMin As Integer, ByVal Mascara As String, ByVal Regla As String) As Respuesta
            Dim results() As Object = Me.Invoke("ValidaDato_ER", New Object() {ptTicket, valor, tipoDato, LongitudMax, LongitudMin, Mascara, Regla})
            ptTicket = CType(results(1),IDTicket)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidaDato_ERAsync(ByVal ptTicket As IDTicket, ByVal valor As String, ByVal tipoDato As String, ByVal LongitudMax As Integer, ByVal LongitudMin As Integer, ByVal Mascara As String, ByVal Regla As String)
            Me.ValidaDato_ERAsync(ptTicket, valor, tipoDato, LongitudMax, LongitudMin, Mascara, Regla, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidaDato_ERAsync(ByVal ptTicket As IDTicket, ByVal valor As String, ByVal tipoDato As String, ByVal LongitudMax As Integer, ByVal LongitudMin As Integer, ByVal Mascara As String, ByVal Regla As String, ByVal userState As Object)
            If (Me.ValidaDato_EROperationCompleted Is Nothing) Then
                Me.ValidaDato_EROperationCompleted = AddressOf Me.OnValidaDato_EROperationCompleted
            End If
            Me.InvokeAsync("ValidaDato_ER", New Object() {ptTicket, valor, tipoDato, LongitudMax, LongitudMin, Mascara, Regla}, Me.ValidaDato_EROperationCompleted, userState)
        End Sub
        
        Private Sub OnValidaDato_EROperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidaDato_ERCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidaDato_ERCompleted(Me, New ValidaDato_ERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuscaCriterioGrupo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuscaCriterioGrupo(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BuscaCriterioGrupo", New Object() {ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioGrupoAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByVal pRespuesta As Respuesta)
            Me.BuscaCriterioGrupoAsync(ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioGrupoAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.BuscaCriterioGrupoOperationCompleted Is Nothing) Then
                Me.BuscaCriterioGrupoOperationCompleted = AddressOf Me.OnBuscaCriterioGrupoOperationCompleted
            End If
            Me.InvokeAsync("BuscaCriterioGrupo", New Object() {ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta}, Me.BuscaCriterioGrupoOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuscaCriterioGrupoOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuscaCriterioGrupoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuscaCriterioGrupoCompleted(Me, New BuscaCriterioGrupoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BuscaCriterioGrupoVerifica", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuscaCriterioGrupoVerifica(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByRef pRespuesta As Respuesta) As Boolean
            Dim results() As Object = Me.Invoke("BuscaCriterioGrupoVerifica", New Object() {ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioGrupoVerificaAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByVal pRespuesta As Respuesta)
            Me.BuscaCriterioGrupoVerificaAsync(ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuscaCriterioGrupoVerificaAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal Template As String, ByVal GrupoID As String, ByVal Valor As String, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.BuscaCriterioGrupoVerificaOperationCompleted Is Nothing) Then
                Me.BuscaCriterioGrupoVerificaOperationCompleted = AddressOf Me.OnBuscaCriterioGrupoVerificaOperationCompleted
            End If
            Me.InvokeAsync("BuscaCriterioGrupoVerifica", New Object() {ptTicket, ProyectoID, Template, GrupoID, Valor, pRespuesta}, Me.BuscaCriterioGrupoVerificaOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuscaCriterioGrupoVerificaOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuscaCriterioGrupoVerificaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuscaCriterioGrupoVerificaCompleted(Me, New BuscaCriterioGrupoVerificaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerInfoDocPadre", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerInfoDocPadre(ByRef ptTicket As IDTicket, ByVal strFecha As String, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtenerInfoDocPadre", New Object() {ptTicket, strFecha, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenerInfoDocPadreAsync(ByVal ptTicket As IDTicket, ByVal strFecha As String, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtenerInfoDocPadreAsync(ptTicket, strFecha, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerInfoDocPadreAsync(ByVal ptTicket As IDTicket, ByVal strFecha As String, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtenerInfoDocPadreOperationCompleted Is Nothing) Then
                Me.ObtenerInfoDocPadreOperationCompleted = AddressOf Me.OnObtenerInfoDocPadreOperationCompleted
            End If
            Me.InvokeAsync("ObtenerInfoDocPadre", New Object() {ptTicket, strFecha, ProyectoID, pRespuesta}, Me.ObtenerInfoDocPadreOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerInfoDocPadreOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerInfoDocPadreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerInfoDocPadreCompleted(Me, New ObtenerInfoDocPadreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerInfoDocHijos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerInfoDocHijos(ByRef ptTicket As IDTicket, ByVal lngDocID As Long, ByVal lngDocPid As Long, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtenerInfoDocHijos", New Object() {ptTicket, lngDocID, lngDocPid, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenerInfoDocHijosAsync(ByVal ptTicket As IDTicket, ByVal lngDocID As Long, ByVal lngDocPid As Long, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtenerInfoDocHijosAsync(ptTicket, lngDocID, lngDocPid, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerInfoDocHijosAsync(ByVal ptTicket As IDTicket, ByVal lngDocID As Long, ByVal lngDocPid As Long, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtenerInfoDocHijosOperationCompleted Is Nothing) Then
                Me.ObtenerInfoDocHijosOperationCompleted = AddressOf Me.OnObtenerInfoDocHijosOperationCompleted
            End If
            Me.InvokeAsync("ObtenerInfoDocHijos", New Object() {ptTicket, lngDocID, lngDocPid, ProyectoID, pRespuesta}, Me.ObtenerInfoDocHijosOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerInfoDocHijosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerInfoDocHijosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerInfoDocHijosCompleted(Me, New ObtenerInfoDocHijosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActualizaImgExportado", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActualizaImgExportado(ByRef ptTicket As IDTicket, ByVal lngDocID As Long, ByVal intExp As Integer, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta) As Integer
            Dim results() As Object = Me.Invoke("ActualizaImgExportado", New Object() {ptTicket, lngDocID, intExp, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ActualizaImgExportadoAsync(ByVal ptTicket As IDTicket, ByVal lngDocID As Long, ByVal intExp As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta)
            Me.ActualizaImgExportadoAsync(ptTicket, lngDocID, intExp, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActualizaImgExportadoAsync(ByVal ptTicket As IDTicket, ByVal lngDocID As Long, ByVal intExp As Integer, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ActualizaImgExportadoOperationCompleted Is Nothing) Then
                Me.ActualizaImgExportadoOperationCompleted = AddressOf Me.OnActualizaImgExportadoOperationCompleted
            End If
            Me.InvokeAsync("ActualizaImgExportado", New Object() {ptTicket, lngDocID, intExp, ProyectoID, pRespuesta}, Me.ActualizaImgExportadoOperationCompleted, userState)
        End Sub
        
        Private Sub OnActualizaImgExportadoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaImgExportadoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaImgExportadoCompleted(Me, New ActualizaImgExportadoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsLogExportador", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsLogExportador(ByRef ptTicket As IDTicket, ByVal ProyectoID As Integer, ByRef pRespuesta As Respuesta, ByVal sLoteID As String, ByVal sNss As String, ByVal sFolio As String, ByVal nNoExp As Integer, ByVal nImgExp As Integer, ByVal dFecDig As Date, ByVal dFecExp As Date, ByVal bExportado As Boolean, ByVal sMotivo As String, ByVal nUserDig As Integer, ByVal nUserExp As Integer) As Integer
            Dim results() As Object = Me.Invoke("InsLogExportador", New Object() {ptTicket, ProyectoID, pRespuesta, sLoteID, sNss, sFolio, nNoExp, nImgExp, dFecDig, dFecExp, bExportado, sMotivo, nUserDig, nUserExp})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsLogExportadorAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal sLoteID As String, ByVal sNss As String, ByVal sFolio As String, ByVal nNoExp As Integer, ByVal nImgExp As Integer, ByVal dFecDig As Date, ByVal dFecExp As Date, ByVal bExportado As Boolean, ByVal sMotivo As String, ByVal nUserDig As Integer, ByVal nUserExp As Integer)
            Me.InsLogExportadorAsync(ptTicket, ProyectoID, pRespuesta, sLoteID, sNss, sFolio, nNoExp, nImgExp, dFecDig, dFecExp, bExportado, sMotivo, nUserDig, nUserExp, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsLogExportadorAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As Integer, ByVal pRespuesta As Respuesta, ByVal sLoteID As String, ByVal sNss As String, ByVal sFolio As String, ByVal nNoExp As Integer, ByVal nImgExp As Integer, ByVal dFecDig As Date, ByVal dFecExp As Date, ByVal bExportado As Boolean, ByVal sMotivo As String, ByVal nUserDig As Integer, ByVal nUserExp As Integer, ByVal userState As Object)
            If (Me.InsLogExportadorOperationCompleted Is Nothing) Then
                Me.InsLogExportadorOperationCompleted = AddressOf Me.OnInsLogExportadorOperationCompleted
            End If
            Me.InvokeAsync("InsLogExportador", New Object() {ptTicket, ProyectoID, pRespuesta, sLoteID, sNss, sFolio, nNoExp, nImgExp, dFecDig, dFecExp, bExportado, sMotivo, nUserDig, nUserExp}, Me.InsLogExportadorOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsLogExportadorOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsLogExportadorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsLogExportadorCompleted(Me, New InsLogExportadorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetImageName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetImageName(ByRef ptTicket As IDTicket, ByVal DocId As Integer, ByVal ProyectoID As String, ByRef pRespuesta As Respuesta) As String
            Dim results() As Object = Me.Invoke("GetImageName", New Object() {ptTicket, DocId, ProyectoID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetImageNameAsync(ByVal ptTicket As IDTicket, ByVal DocId As Integer, ByVal ProyectoID As String, ByVal pRespuesta As Respuesta)
            Me.GetImageNameAsync(ptTicket, DocId, ProyectoID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetImageNameAsync(ByVal ptTicket As IDTicket, ByVal DocId As Integer, ByVal ProyectoID As String, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.GetImageNameOperationCompleted Is Nothing) Then
                Me.GetImageNameOperationCompleted = AddressOf Me.OnGetImageNameOperationCompleted
            End If
            Me.InvokeAsync("GetImageName", New Object() {ptTicket, DocId, ProyectoID, pRespuesta}, Me.GetImageNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetImageNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetImageNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetImageNameCompleted(Me, New GetImageNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerTemplate(ByRef ptTicket As IDTicket, ByVal ProyectoID As String, ByVal TemplateID As Integer, ByRef pRespuesta As Respuesta) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtenerTemplate", New Object() {ptTicket, ProyectoID, TemplateID, pRespuesta})
            ptTicket = CType(results(1),IDTicket)
            pRespuesta = CType(results(2),Respuesta)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenerTemplateAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As String, ByVal TemplateID As Integer, ByVal pRespuesta As Respuesta)
            Me.ObtenerTemplateAsync(ptTicket, ProyectoID, TemplateID, pRespuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerTemplateAsync(ByVal ptTicket As IDTicket, ByVal ProyectoID As String, ByVal TemplateID As Integer, ByVal pRespuesta As Respuesta, ByVal userState As Object)
            If (Me.ObtenerTemplateOperationCompleted Is Nothing) Then
                Me.ObtenerTemplateOperationCompleted = AddressOf Me.OnObtenerTemplateOperationCompleted
            End If
            Me.InvokeAsync("ObtenerTemplate", New Object() {ptTicket, ProyectoID, TemplateID, pRespuesta}, Me.ObtenerTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerTemplateCompleted(Me, New ObtenerTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXmlData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetXmlData(ByRef ticket As IDTicket, ByVal proyectoId As Integer, ByRef respuesta As Respuesta) As String
            Dim results() As Object = Me.Invoke("GetXmlData", New Object() {ticket, proyectoId, respuesta})
            ticket = CType(results(1),IDTicket)
            respuesta = CType(results(2),Respuesta)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetXmlDataAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal respuesta As Respuesta)
            Me.GetXmlDataAsync(ticket, proyectoId, respuesta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetXmlDataAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal respuesta As Respuesta, ByVal userState As Object)
            If (Me.GetXmlDataOperationCompleted Is Nothing) Then
                Me.GetXmlDataOperationCompleted = AddressOf Me.OnGetXmlDataOperationCompleted
            End If
            Me.InvokeAsync("GetXmlData", New Object() {ticket, proyectoId, respuesta}, Me.GetXmlDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetXmlDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetXmlDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetXmlDataCompleted(Me, New GetXmlDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceivedXmlData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReceivedXmlData(ByRef ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long) As Respuesta
            Dim results() As Object = Me.Invoke("ReceivedXmlData", New Object() {ticket, proyectoId, docId})
            ticket = CType(results(1),IDTicket)
            Return CType(results(0),Respuesta)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReceivedXmlDataAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long)
            Me.ReceivedXmlDataAsync(ticket, proyectoId, docId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReceivedXmlDataAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long, ByVal userState As Object)
            If (Me.ReceivedXmlDataOperationCompleted Is Nothing) Then
                Me.ReceivedXmlDataOperationCompleted = AddressOf Me.OnReceivedXmlDataOperationCompleted
            End If
            Me.InvokeAsync("ReceivedXmlData", New Object() {ticket, proyectoId, docId}, Me.ReceivedXmlDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReceivedXmlDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReceivedXmlDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReceivedXmlDataCompleted(Me, New ReceivedXmlDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneHijosPorDocType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneHijosPorDocType(ByRef ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long, ByVal docType As Integer) As Long()
            Dim results() As Object = Me.Invoke("ObtieneHijosPorDocType", New Object() {ticket, proyectoId, docId, docType})
            ticket = CType(results(1),IDTicket)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneHijosPorDocTypeAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long, ByVal docType As Integer)
            Me.ObtieneHijosPorDocTypeAsync(ticket, proyectoId, docId, docType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneHijosPorDocTypeAsync(ByVal ticket As IDTicket, ByVal proyectoId As Integer, ByVal docId As Long, ByVal docType As Integer, ByVal userState As Object)
            If (Me.ObtieneHijosPorDocTypeOperationCompleted Is Nothing) Then
                Me.ObtieneHijosPorDocTypeOperationCompleted = AddressOf Me.OnObtieneHijosPorDocTypeOperationCompleted
            End If
            Me.InvokeAsync("ObtieneHijosPorDocType", New Object() {ticket, proyectoId, docId, docType}, Me.ObtieneHijosPorDocTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneHijosPorDocTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneHijosPorDocTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneHijosPorDocTypeCompleted(Me, New ObtieneHijosPorDocTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EjecutaSPCondicional", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EjecutaSPCondicional(ByRef Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal Condicion1 As String, ByVal Condicion2 As String, ByVal Condicion3 As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("EjecutaSPCondicional", New Object() {Ticket, ProyectoID, SP, Condicion1, Condicion2, Condicion3})
            Ticket = CType(results(1),IDTicket)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EjecutaSPCondicionalAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal Condicion1 As String, ByVal Condicion2 As String, ByVal Condicion3 As String)
            Me.EjecutaSPCondicionalAsync(Ticket, ProyectoID, SP, Condicion1, Condicion2, Condicion3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EjecutaSPCondicionalAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal Condicion1 As String, ByVal Condicion2 As String, ByVal Condicion3 As String, ByVal userState As Object)
            If (Me.EjecutaSPCondicionalOperationCompleted Is Nothing) Then
                Me.EjecutaSPCondicionalOperationCompleted = AddressOf Me.OnEjecutaSPCondicionalOperationCompleted
            End If
            Me.InvokeAsync("EjecutaSPCondicional", New Object() {Ticket, ProyectoID, SP, Condicion1, Condicion2, Condicion3}, Me.EjecutaSPCondicionalOperationCompleted, userState)
        End Sub
        
        Private Sub OnEjecutaSPCondicionalOperationCompleted(ByVal arg As Object)
            If (Not (Me.EjecutaSPCondicionalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EjecutaSPCondicionalCompleted(Me, New EjecutaSPCondicionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EjecutaSPparam", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EjecutaSPparam(ByRef Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal pstrValor As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("EjecutaSPparam", New Object() {Ticket, ProyectoID, SP, pstrValor})
            Ticket = CType(results(1),IDTicket)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EjecutaSPparamAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal pstrValor As String)
            Me.EjecutaSPparamAsync(Ticket, ProyectoID, SP, pstrValor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EjecutaSPparamAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SP As String, ByVal pstrValor As String, ByVal userState As Object)
            If (Me.EjecutaSPparamOperationCompleted Is Nothing) Then
                Me.EjecutaSPparamOperationCompleted = AddressOf Me.OnEjecutaSPparamOperationCompleted
            End If
            Me.InvokeAsync("EjecutaSPparam", New Object() {Ticket, ProyectoID, SP, pstrValor}, Me.EjecutaSPparamOperationCompleted, userState)
        End Sub
        
        Private Sub OnEjecutaSPparamOperationCompleted(ByVal arg As Object)
            If (Not (Me.EjecutaSPparamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EjecutaSPparamCompleted(Me, New EjecutaSPparamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteDataSet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteDataSet(ByRef Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ExecuteDataSet", New Object() {Ticket, ProyectoID, SPName, values})
            Ticket = CType(results(1),IDTicket)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteDataSetAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object)
            Me.ExecuteDataSetAsync(Ticket, ProyectoID, SPName, values, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteDataSetAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object, ByVal userState As Object)
            If (Me.ExecuteDataSetOperationCompleted Is Nothing) Then
                Me.ExecuteDataSetOperationCompleted = AddressOf Me.OnExecuteDataSetOperationCompleted
            End If
            Me.InvokeAsync("ExecuteDataSet", New Object() {Ticket, ProyectoID, SPName, values}, Me.ExecuteDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteDataSetCompleted(Me, New ExecuteDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteNonQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteNonQuery(ByRef Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object) As Integer
            Dim results() As Object = Me.Invoke("ExecuteNonQuery", New Object() {Ticket, ProyectoID, SPName, values})
            Ticket = CType(results(1),IDTicket)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteNonQueryAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object)
            Me.ExecuteNonQueryAsync(Ticket, ProyectoID, SPName, values, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteNonQueryAsync(ByVal Ticket As IDTicket, ByVal ProyectoID As Integer, ByVal SPName As String, ByVal values() As Object, ByVal userState As Object)
            If (Me.ExecuteNonQueryOperationCompleted Is Nothing) Then
                Me.ExecuteNonQueryOperationCompleted = AddressOf Me.OnExecuteNonQueryOperationCompleted
            End If
            Me.InvokeAsync("ExecuteNonQuery", New Object() {Ticket, ProyectoID, SPName, values}, Me.ExecuteNonQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteNonQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteNonQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteNonQueryCompleted(Me, New ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExpedienteOK_MC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExpedienteOK_MC(ByVal ProyectoID As Integer, ByVal strFecha As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ExpedienteOK_MC", New Object() {ProyectoID, strFecha})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExpedienteOK_MCAsync(ByVal ProyectoID As Integer, ByVal strFecha As String)
            Me.ExpedienteOK_MCAsync(ProyectoID, strFecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExpedienteOK_MCAsync(ByVal ProyectoID As Integer, ByVal strFecha As String, ByVal userState As Object)
            If (Me.ExpedienteOK_MCOperationCompleted Is Nothing) Then
                Me.ExpedienteOK_MCOperationCompleted = AddressOf Me.OnExpedienteOK_MCOperationCompleted
            End If
            Me.InvokeAsync("ExpedienteOK_MC", New Object() {ProyectoID, strFecha}, Me.ExpedienteOK_MCOperationCompleted, userState)
        End Sub
        
        Private Sub OnExpedienteOK_MCOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExpedienteOK_MCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExpedienteOK_MCCompleted(Me, New ExpedienteOK_MCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidaExpObligatorios", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidaExpObligatorios(ByVal intDocID As Integer, ByVal ProyectoID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("ValidaExpObligatorios", New Object() {intDocID, ProyectoID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidaExpObligatoriosAsync(ByVal intDocID As Integer, ByVal ProyectoID As Integer)
            Me.ValidaExpObligatoriosAsync(intDocID, ProyectoID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidaExpObligatoriosAsync(ByVal intDocID As Integer, ByVal ProyectoID As Integer, ByVal userState As Object)
            If (Me.ValidaExpObligatoriosOperationCompleted Is Nothing) Then
                Me.ValidaExpObligatoriosOperationCompleted = AddressOf Me.OnValidaExpObligatoriosOperationCompleted
            End If
            Me.InvokeAsync("ValidaExpObligatorios", New Object() {intDocID, ProyectoID}, Me.ValidaExpObligatoriosOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidaExpObligatoriosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidaExpObligatoriosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidaExpObligatoriosCompleted(Me, New ValidaExpObligatoriosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneEstatusExpImg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneEstatusExpImg(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Estatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneEstatusExpImg", New Object() {ProyectoId, FechaInicio, FechaFin, Estatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstatusExpImgAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Estatus As String)
            Me.ObtieneEstatusExpImgAsync(ProyectoId, FechaInicio, FechaFin, Estatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneEstatusExpImgAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal Estatus As String, ByVal userState As Object)
            If (Me.ObtieneEstatusExpImgOperationCompleted Is Nothing) Then
                Me.ObtieneEstatusExpImgOperationCompleted = AddressOf Me.OnObtieneEstatusExpImgOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEstatusExpImg", New Object() {ProyectoId, FechaInicio, FechaFin, Estatus}, Me.ObtieneEstatusExpImgOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneEstatusExpImgOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEstatusExpImgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEstatusExpImgCompleted(Me, New ObtieneEstatusExpImgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneCifrasControlRecorteGlobal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneCifrasControlRecorteGlobal(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneCifrasControlRecorteGlobal", New Object() {ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneCifrasControlRecorteGlobalAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String)
            Me.ObtieneCifrasControlRecorteGlobalAsync(ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneCifrasControlRecorteGlobalAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String, ByVal userState As Object)
            If (Me.ObtieneCifrasControlRecorteGlobalOperationCompleted Is Nothing) Then
                Me.ObtieneCifrasControlRecorteGlobalOperationCompleted = AddressOf Me.OnObtieneCifrasControlRecorteGlobalOperationCompleted
            End If
            Me.InvokeAsync("ObtieneCifrasControlRecorteGlobal", New Object() {ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus}, Me.ObtieneCifrasControlRecorteGlobalOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneCifrasControlRecorteGlobalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneCifrasControlRecorteGlobalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneCifrasControlRecorteGlobalCompleted(Me, New ObtieneCifrasControlRecorteGlobalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtieneCifrasControlRecorteDetalle", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtieneCifrasControlRecorteDetalle(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneCifrasControlRecorteDetalle", New Object() {ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtieneCifrasControlRecorteDetalleAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String)
            Me.ObtieneCifrasControlRecorteDetalleAsync(ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtieneCifrasControlRecorteDetalleAsync(ByVal ProyectoId As Integer, ByVal FechaInicio As String, ByVal FechaFin As String, ByVal ZonaId As String, ByVal SucursalId As String, ByVal Estatus As String, ByVal userState As Object)
            If (Me.ObtieneCifrasControlRecorteDetalleOperationCompleted Is Nothing) Then
                Me.ObtieneCifrasControlRecorteDetalleOperationCompleted = AddressOf Me.OnObtieneCifrasControlRecorteDetalleOperationCompleted
            End If
            Me.InvokeAsync("ObtieneCifrasControlRecorteDetalle", New Object() {ProyectoId, FechaInicio, FechaFin, ZonaId, SucursalId, Estatus}, Me.ObtieneCifrasControlRecorteDetalleOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtieneCifrasControlRecorteDetalleOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneCifrasControlRecorteDetalleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneCifrasControlRecorteDetalleCompleted(Me, New ObtieneCifrasControlRecorteDetalleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="Main")>  _
    Partial Public Class IDTicket
        
        Private ticketIDField() As Byte
        
        Private usrIDField As String
        
        Private ipField As String
        
        Private proyectoIDField As Integer
        
        Private versionAplicacionIDField As Integer
        
        Private fechaHoraInicioField As Date
        
        Private fechaHoraUltimoAccesoField As Date
        
        Private tiempoVidaField As Integer
        
        Private tiempoRestanteField As Integer
        
        Private nombreCompletoField As String
        
        Private nombreUsuarioField As String
        
        Private grupoAdminIDField As Integer
        
        Private clienteIDField As Integer
        
        Private perfilUsuarioIDField As Integer
        
        Private tiempoVidaPwdField As Integer
        
        Private tiempoActualizoPwdField As Integer
        
        Private noIdentidadField As Integer
        
        Private fechaUltLoginField As Date
        
        Private duracionDiasField As Integer
        
        Private avisoCaducidadPwdDiasField As Integer
        
        Private fechaCreacionPwdField As Date
        
        '''<comentarios/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property TicketID() As Byte()
            Get
                Return Me.ticketIDField
            End Get
            Set
                Me.ticketIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property UsrID() As String
            Get
                Return Me.usrIDField
            End Get
            Set
                Me.usrIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property IP() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property ProyectoID() As Integer
            Get
                Return Me.proyectoIDField
            End Get
            Set
                Me.proyectoIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property VersionAplicacionID() As Integer
            Get
                Return Me.versionAplicacionIDField
            End Get
            Set
                Me.versionAplicacionIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaHoraInicio() As Date
            Get
                Return Me.fechaHoraInicioField
            End Get
            Set
                Me.fechaHoraInicioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaHoraUltimoAcceso() As Date
            Get
                Return Me.fechaHoraUltimoAccesoField
            End Get
            Set
                Me.fechaHoraUltimoAccesoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoVida() As Integer
            Get
                Return Me.tiempoVidaField
            End Get
            Set
                Me.tiempoVidaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoRestante() As Integer
            Get
                Return Me.tiempoRestanteField
            End Get
            Set
                Me.tiempoRestanteField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombreCompleto() As String
            Get
                Return Me.nombreCompletoField
            End Get
            Set
                Me.nombreCompletoField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NombreUsuario() As String
            Get
                Return Me.nombreUsuarioField
            End Get
            Set
                Me.nombreUsuarioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property GrupoAdminID() As Integer
            Get
                Return Me.grupoAdminIDField
            End Get
            Set
                Me.grupoAdminIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property ClienteID() As Integer
            Get
                Return Me.clienteIDField
            End Get
            Set
                Me.clienteIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property PerfilUsuarioID() As Integer
            Get
                Return Me.perfilUsuarioIDField
            End Get
            Set
                Me.perfilUsuarioIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoVidaPwd() As Integer
            Get
                Return Me.tiempoVidaPwdField
            End Get
            Set
                Me.tiempoVidaPwdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property TiempoActualizoPwd() As Integer
            Get
                Return Me.tiempoActualizoPwdField
            End Get
            Set
                Me.tiempoActualizoPwdField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property NoIdentidad() As Integer
            Get
                Return Me.noIdentidadField
            End Get
            Set
                Me.noIdentidadField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaUltLogin() As Date
            Get
                Return Me.fechaUltLoginField
            End Get
            Set
                Me.fechaUltLoginField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DuracionDias() As Integer
            Get
                Return Me.duracionDiasField
            End Get
            Set
                Me.duracionDiasField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property AvisoCaducidadPwdDias() As Integer
            Get
                Return Me.avisoCaducidadPwdDiasField
            End Get
            Set
                Me.avisoCaducidadPwdDiasField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property FechaCreacionPwd() As Date
            Get
                Return Me.fechaCreacionPwdField
            End Get
            Set
                Me.fechaCreacionPwdField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="Main")>  _
    Partial Public Class Respuesta
        
        Private respuestaIDField As String
        
        Private categoriaField As String
        
        Private descripcionCategoriaField As String
        
        Private descripcionRespuestaField As String
        
        Private respuestaToStringField As String
        
        '''<comentarios/>
        Public Property RespuestaID() As String
            Get
                Return Me.respuestaIDField
            End Get
            Set
                Me.respuestaIDField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Categoria() As String
            Get
                Return Me.categoriaField
            End Get
            Set
                Me.categoriaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DescripcionCategoria() As String
            Get
                Return Me.descripcionCategoriaField
            End Get
            Set
                Me.descripcionCategoriaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property DescripcionRespuesta() As String
            Get
                Return Me.descripcionRespuestaField
            End Get
            Set
                Me.descripcionRespuestaField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property RespuestaToString() As String
            Get
                Return Me.respuestaToStringField
            End Get
            Set
                Me.respuestaToStringField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub BuscaCriterioCompletedEventHandler(ByVal sender As Object, ByVal e As BuscaCriterioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuscaCriterioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneExpedientePadreCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneExpedientePadreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneExpedientePadreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneExpedienteHijoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneExpedienteHijoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneExpedienteHijoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtienecamposCompletedEventHandler(ByVal sender As Object, ByVal e As ObtienecamposCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtienecamposCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtienecamposPadreCompletedEventHandler(ByVal sender As Object, ByVal e As ObtienecamposPadreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtienecamposPadreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ActualizaCamposCapturaCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizaCamposCapturaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ActualizaCamposCapturaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ValidaDato_ERCompletedEventHandler(ByVal sender As Object, ByVal e As ValidaDato_ERCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidaDato_ERCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub BuscaCriterioGrupoCompletedEventHandler(ByVal sender As Object, ByVal e As BuscaCriterioGrupoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuscaCriterioGrupoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub BuscaCriterioGrupoVerificaCompletedEventHandler(ByVal sender As Object, ByVal e As BuscaCriterioGrupoVerificaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuscaCriterioGrupoVerificaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtenerInfoDocPadreCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerInfoDocPadreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerInfoDocPadreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtenerInfoDocHijosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerInfoDocHijosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerInfoDocHijosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ActualizaImgExportadoCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizaImgExportadoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ActualizaImgExportadoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub InsLogExportadorCompletedEventHandler(ByVal sender As Object, ByVal e As InsLogExportadorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsLogExportadorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetImageNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetImageNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetImageNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtenerTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ptTicket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRespuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetXmlDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetXmlDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetXmlDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property respuesta() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Respuesta)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReceivedXmlDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReceivedXmlDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReceivedXmlDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Respuesta
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Respuesta)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneHijosPorDocTypeCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneHijosPorDocTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneHijosPorDocTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub EjecutaSPCondicionalCompletedEventHandler(ByVal sender As Object, ByVal e As EjecutaSPCondicionalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EjecutaSPCondicionalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub EjecutaSPparamCompletedEventHandler(ByVal sender As Object, ByVal e As EjecutaSPparamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EjecutaSPparamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ExecuteDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ExecuteNonQueryCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteNonQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteNonQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Ticket() As IDTicket
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),IDTicket)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ExpedienteOK_MCCompletedEventHandler(ByVal sender As Object, ByVal e As ExpedienteOK_MCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExpedienteOK_MCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ValidaExpObligatoriosCompletedEventHandler(ByVal sender As Object, ByVal e As ValidaExpObligatoriosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidaExpObligatoriosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneEstatusExpImgCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEstatusExpImgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneEstatusExpImgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneCifrasControlRecorteGlobalCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCifrasControlRecorteGlobalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneCifrasControlRecorteGlobalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ObtieneCifrasControlRecorteDetalleCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCifrasControlRecorteDetalleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtieneCifrasControlRecorteDetalleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
