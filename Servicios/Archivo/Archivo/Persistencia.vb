'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  Persistencia.vb
''  Implementation of the Class Persistencia
''  Generated by Enterprise Architect
''  Created on:      22-Nov-2004 01:28:41 p.m.
'  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit On
Option Strict On

'Imports System.Data
'Imports System.Data.SqlClient
Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports System.Data.Common
Imports System.Data



Public Class Persistencia
    Const mstrModName As String = "Persistencia"
    Private mstrCS As String
    Public Enum eTipoBD As Integer
        SQLServer
        Oracle
        Invalido = -1
    End Enum
    Private meTipoBD As eTipoBD

    Private Property CS() As String
        Get
            Return mstrCS
        End Get
        Set(ByVal Value As String)
            mstrCS = Value
        End Set
    End Property
    Private Property BDH() As String
        Get
            Return mstrCS
        End Get
        Set(ByVal Value As String)
            mstrCS = Value
        End Set
    End Property
    Private Property TipoBD() As eTipoBD
        Get
            Return meTipoBD
        End Get
        Set(ByVal Value As eTipoBD)
            meTipoBD = Value
        End Set
    End Property

#Region "Nombres de SP"

    Private Const SVRUSR_SP_AltaPermiso As String = "SVRUSR_SP_AltaPermiso"
    Private Const SVRUSR_SP_ABCPERMISOPERFILUSR As String = "SVRUSR_SP_ABCPERMISOPERFILUSR"

    Private Const SP_ABC_Archivo_Fisico As String = "ABC_Archivo_Fisico"
    Private Const SP_ABC_Archivo_Fisico_elemento As String = "ABC_Archivo_Fisico_elemento"
    Private Const SP_ABC_Archivo_Fisico_Unidades As String = "ABC_Archivo_Fisico_Unidades"
    Private Const SP_ABC_Archivo_Fisico_Estructura As String = "ABC_Archivo_Fisico_Estructura"

    Private Const SP_ListaNormas As String = "ListaNormas"
    Private Const SP_Lista_Archivo_Fisico As String = "Lista_Archivo_Fisico"
    Private Const SP_ABC_Normas As String = "ABC_Normas"
    Private Const SP_ListaNormas_Niveles As String = "ListaNormas_Niveles"
    Private Const SP_ListaNormas_Niveles_Hijos As String = "ListaNormas_Niveles_Hijos"
    Private Const SP_ListaNorma_Nivel As String = "ListaNorma_Nivel"
    Private Const SP_ListaNorma_Nivel_SerieyDocumento As String = "ListaNorma_Nivel_SerieyDocumento"
    Private Const SP_ABC_Normas_Niveles As String = "ABC_Normas_Niveles"
    Private Const SP_ListaNormas_Areas As String = "ListaNormas_Areas"
    Private Const SP_ListaNormas_Areas_Especial As String = "ListaNormas_Areas_Especial"
    Private Const SP_ABC_Normas_Areas As String = "ABC_Normas_Areas"
    Private Const SP_ListaNormas_Elementos As String = "ListaNormas_Elementos"
    Private Const SP_ListaNormas_ElementosxSeriexElemento_Visible As String = "ListaNormas_ElementosxSeriexElemento_Visible"
    Private Const SP_ListaNormas_Elementos_Especial As String = "ListaNormas_Elementos_Especial"
    Private Const SP_ABC_Normas_Elementos As String = "ABC_Normas_Elementos"
    Private Const SP_ABC_Normas_relacion As String = "ABC_Normas_relacion"
    Private Const SP_ABC_Niveles_Plantilla_Captura As String = "ABC_Niveles_Plantilla_Captura"
    Private Const SP_ABC_Catalogo As String = "ABC_Catalogo"
    Private Const SP_ABC_Solicitud_Prestamos As String = "ABC_Solicitud_Prestamos"

    Private Const SP_ListaCatalogo As String = "ListaCatalogo"
    Private Const SP_ABC_Catalogo_Datos As String = "ABC_Catalogo_Datos"
    Private Const SP_ListaCatalogo_Datos As String = "ListaCatalogo_Datos"

    Private Const SP_ListaNormas_Campos As String = "ListaNormas_Campos"
    Private Const SP_ListaNormas_Elementos_Campos As String = "ListaNormas_Elementos_Campos"
    Private Const SP_ListaNormas_Elementos_CamposxSerie As String = "ListaNormas_Elementos_CamposxSerie"
    Private Const SP_ListaNormas_Elementos_CamposxSerie_Visibles As String = "ListaNormas_Elementos_CamposxSerie_Visibles"

    Private Const SP_ListaNormas_Elementos_CamposxSerie_Defaults As String = "ListaNormas_Elementos_CamposxSerie_Defaults"
    Private Const SP_ListaNormas_Elementos_CamposxSeriexElemento As String = "ListaNormas_Elementos_CamposxSeriexElemento"

    Private Const SP_ListaNormas_Elementos_Campos_Especial As String = "ListaNormas_Elementos_Campos_Especial"
    Private Const SP_ListaNormas_Elementos_Campo As String = "ListaNormas_Elementos_Campo"
    Private Const SP_ListaNormas_Elementos_CampoxSerie_and_PK As String = "ListaNormas_Elementos_CampoxSerie_and_PK"

    Private Const SP_ABC_Normas_Elementos_Campos As String = "ABC_Normas_Elementos_Campos"

    Private Const SP_ListaArchivos As String = "ListaArchivos"
    Private Const SP_ListaArchivo As String = "ListaArchivo"
    Private Const SP_ABC_Archivos As String = "ABC_Archivos"
    Private Const SP_ListaArchivo_Cat_Elementos As String = "ListaArchivo_Cat_Elementos"
    Private Const SP_ABC_Archivo_Cat_Elementos As String = "ABC_Archivo_Cat_Elementos"
    Private Const SP_ListaArchivo_Cat_Campos As String = "ListaArchivo_Cat_Campos"
    Private Const SP_ListaArchivo_Cat_Campo As String = "ListaArchivo_Cat_Campo"
    Private Const SP_ListaArchivo_val_Campo As String = "ListaArchivo_val_Campo"
    Private Const SP_ABC_Archivo_val_campo As String = "ABC_Archivo_val_campo"
    Private Const SP_ABC_Archivo_Elementos_Campos As String = "ABC_Archivo_Elementos_Campos"



    Private Const SP_ListaArchivo_Descripciones As String = "ListaArchivo_Descripciones"
    Private Const SP_ListaArchivo_Descripciones_nivel As String = "ListaArchivo_Descripciones_nivel"
    Private Const SP_ListaArchivo_Descripciones_idSerie As String = "ListaArchivo_Descripciones_idSerie"
    Private Const SP_ListaArchivo_Descripciones_idDescripcion As String = "ListaArchivo_Descripciones_idDescripcion"
    Private Const SP_ListaArchivo_Descripciones_idDescripcion_Hijos As String = "ListaArchivo_Descripciones_idDescripcion_Hijos"

    Private Const SP_ListaArchivo_Descripciones_Nivel_Logico As String = "ListaArchivo_Descripciones_Nivel_Logico"
    Private Const SP_ListaArchivo_Codigo_clasificacion As String = "ListaArchivo_Codigo_clasificacion"


    Private Const SP_ListaNorma_Descripciones As String = "ListaNorma_Descripciones"
    Private Const SP_ABC_Archivo_Descripciones As String = "ABC_Archivo_Descripciones"
    Private Const SP_ListaArchivo_indice As String = "ListaArchivo_indice"
    Private Const SP_ListaArchivo_indicexFolio_norma As String = "ListaArchivo_indicexFolio_norma"
    Private Const SP_ABC_Archivo_indice As String = "ABC_Archivo_indice"

    Private Const SP_ListaNorma_Plantillas As String = "ListaNorma_Plantillas"
    Private Const SP_ListaNorma_Plantilla As String = "ListaNorma_Plantilla"
    Private Const SP_ABC_Normas_plantillas As String = "ABC_Normas_plantillas"
    Private Const SP_ABC_Normas_Plantilla_Areas As String = "ABC_Normas_Plantilla_Areas"
    Private Const SP_ABC_Normas_Plantilla_Elementos As String = "ABC_Normas_Plantilla_Elementos"
    Private Const SP_ABC_Normas_Plantilla_Campos As String = "ABC_Normas_Plantilla_Campos"

    Private Const SP_Carga_Normas_Plantilla_Campos As String = "Carga_Normas_Plantilla_Campos"

    Private Const SP_ListaPlantilla_Areas As String = "ListaPlantilla_Areas"
    Private Const SP_ListaPlantilla_Elementos As String = "ListaPlantilla_Elementos"
    Private Const SP_ListaPlantilla_Elementos_Campos As String = "ListaPlantilla_Elementos_Campos"

    Private Const SP_ListaArchivo_Niveles_Norma As String = "ListaArchivo_Niveles_Norma"
    Private Const SP_Busca_enArchivo As String = "Busca_enArchivo"
    Private Const SP_ListaArchivo_indicexelemen As String = "ListaArchivo_indicexelemen"
    Private Const SP_ABC_BajaElementos_Campos As String = "ABC_BajaElementos_Campos"
    Private Const SP_ListaArchivo_val_Campo_bus As String = "ListaArchivo_val_Campo_bus"
    Private Const SP_Reportecgca_datos As String = "Reportecgca_datos"
    Private Const SP_Reportegs_datos As String = "Reportegs_datos"

    Private Const SP_Lista_Normas_relacion As String = "Lista_Normas_relacion"
    Private Const SP_Lista_Normas_ISAAR As String = "Lista_Normas_ISAAR"
    Private Const SP_Lista_Normas_ISAD As String = "Lista_Normas_ISAD"
    Private Const SP_ListaNivel_Plantilla_captura As String = "ListaNivel_Plantilla_captura"

    Private Const SP_Func_Concatena_padres As String = "Func_Concatena_padres"
    Private Const SP_Func_Maximo_valor As String = "Func_Maximo_valor_hijos"
    Private Const SP_Func_Minimo_valor As String = "Func_Minimo_valor_hijos"
    Private Const SP_Func_Suma_valor_hijos As String = "Func_Suma_valor_hijos"
    Private Const SP_ABC_ISAAR As String = "ABC_ISAAR"
    Private Const SP_ABC_ISAAR_Relaciones As String = "ABC_ISAAR_Relaciones"
    Private Const SP_ABC_ISAAR_Series_Modelo As String = "ABC_ISAAR_Series_Modelo"
    Private Const SP_ABC_ISAAR_Entidades As String = "ABC_ISAAR_Entidades"

    Private Const SP_ListaISAAR As String = "ListaISAAR"
    Private Const SP_ListaISAAR_Relaciones As String = "ListaISAAR_Relaciones"
    Private Const SP_ListaISAARxtipoent As String = "ListaISAARxtipoent"
    Private Const SP_ListaISAARxid As String = "ListaISAARxid"
    Private Const SP_ListaISAAR_Series_Modelo As String = "ListaISAAR_Series_Modelo"
    Private Const SP_ListaISAAR_Entidades As String = "ListaISAAR_Entidades"
    Private Const SP_Lista_ISAAR_EntidadesxUsuario As String = "Lista_ISAAR_EntidadesxUsuario"



    Private Const SP_ListaSeries_Modelo As String = "ListaSeries_Modelo"
    Private Const SP_ListaSeries_ModeloxNivel As String = "ListaSeries_ModeloxNivel"
    Private Const SP_ListaSeries_ModeloxRango As String = "ListaSeries_ModeloxRango"

    Private Const SP_PermisosAD As String = "SP_PermisosAD"
    Private Const SP_ABC_Series_Modelo As String = "ABC_Series_Modelo"
    Private Const SP_ListaSeries_Modelo_Hijos As String = "ListaSeries_Modelo_Hijos"
    
    Private Const SP_ListaSeries_Indices As String = "ListaSeries_Indices"
    Private Const SP_ListaSeries_Indices_padres As String = "ListaSeries_Indices_padres"
    Private Const SP_ABC_Series_Indices As String = "ABC_Series_Indices"
    Private Const SP_ListaSeries_Area_Elemento As String = "ListaSeries_Area_Elemento"

    Private Const SP_ListaArchivo_indices_PK As String = "ListaArchivo_indices_PK"
    Private Const SP_Obten_Secuencia As String = "Obten_Secuencia"
    Private Const SP_Func_Indice_repetido As String = "Func_Indice_repetido"

    Private Const SP_ListaFondoxNivel As String = "ListaFondoxNivel"
    Private Const SP_ListaFondoxNivelxPadre As String = "ListaFondoxNivelxPadre"
    Private Const SP_ListaFondo As String = "ListaFondo"
    Private Const SP_ListaArchivo_Serie As String = "ListaArchivo_Serie"

    Private Const SP_ListaArchivo_indicexidDescripcion As String = "ListaArchivo_indicexidDescripcion"
    Private Const SP_ListaArchivo_indicexidDescripcion_folio_norma As String = "ListaArchivo_indicexidDescripcion_folio_norma"
    Private Const SP_ListaArchivo_indicexidDescripcion_idIndice As String = "ListaArchivo_indicexidDescripcion_idIndice"

    Private Const SP_ListaSeries_Modelo_indice_sistema As String = "ListaSeries_Modelo_indice_sistema"

    Private Const SP_Transfiere_Archivo_Descripciones As String = "Transfiere_Archivo_Descripciones"

    Private Const SP_ListaOperadores As String = "ListaOperadores"

    Private Const SP_getPadresBusqueda As String = "getPadresBusqueda"
    Private Const SP_ListaArchivo_conLimite As String = "ListaArchivo_conLimite"
    Private Const SP_ListaCatalogo_disposicion As String = "ListaCatalogo_disposicion"
    Private Const SP_Lista_Archivo_Fisico_Elemento As String = "Lista_Archivo_Fisico_Elemento"
    Private Const SP_Lista_Archivo_Fisico_Unidades As String = "Lista_Archivo_Fisico_Unidades"
    Private Const SP_Lista_Archivo_Fisico_Estructura As String = "Lista_Archivo_Fisico_Estructura"
    Private Const SP_ListaVencimientos_Archivo_Tramite As String = "ListaVencimientos_Archivo_Tramite"



#End Region
    Public Sub New(ByVal pstrCS As String, ByVal peTipoBD As eTipoBD)
        MyBase.New()
        Me.CS = pstrCS
        Me.TipoBD = peTipoBD
    End Sub
#Region "Métodos Friend"
    Public Function ListaNormas() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Archivo_Fisico() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaFiltros_Master(ByVal idFiltro As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaFiltros_Master", idFiltro, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaFiltros_Master", idFiltro)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaOperadores(ByVal OpType As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaOperadores, OpType, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaOperadores, OpType)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaFiltros(ByVal idFiltro As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaFiltros", idFiltro, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaFiltros", idFiltro)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaFiltros_Master_All(ByVal idFiltro As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaFiltros_Master_All", idFiltro, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaFiltros_Master_All", idFiltro)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaFiltros_Indices(ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaFiltros_Indices", idNorma, idNivel, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaFiltros_Indices", idNorma, idNivel, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaTraspasos_ArchivoOrigen(ByVal idTraspasos As Integer, ByVal idArchivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaTraspasos_ArchivoOrigen", idTraspasos, idArchivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaTraspasos_ArchivoOrigen", idTraspasos, idArchivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Filtros_Master(ByVal op As OperacionesABC, ByVal idFiltro As Integer, ByVal idArchivo As Integer, ByVal idSerie As Integer, ByVal Nombre As String, ByVal FAlias As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Filtros_Master", op, idFiltro, idArchivo, idSerie, Nombre, FAlias, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Filtros_Master", op, idFiltro, idArchivo, idSerie, Nombre, FAlias)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idFiltro").Value, Integer)
        Return nID
    End Function

    Public Function ABC_Filtros(ByVal op As OperacionesABC, ByVal idFiltro As Integer, ByVal Parentesis As String, ByVal ParentesisDesc As String, ByVal AndOr As String, ByVal AndOrDesc As String, ByVal FieldName As String, ByVal FieldTitle As String, ByVal FieldType As String, ByVal Operador As String, ByVal OperadorDesc As String, ByVal Valor1 As String, ByVal Valor2 As String, ByVal ValorDesc As String, ByVal idIndice As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Filtros", op, idFiltro, Parentesis, ParentesisDesc, AndOr, AndOrDesc, FieldName, FieldTitle, FieldType, Operador, OperadorDesc, Valor1, Valor2, ValorDesc, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Filtros", op, idFiltro, Parentesis, ParentesisDesc, AndOr, AndOrDesc, FieldName, FieldTitle, FieldType, Operador, OperadorDesc, Valor1, Valor2, ValorDesc, idIndice)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idFiltro").Value, Integer)
        Return nID
    End Function


    Public Function ABC_Indices_Sistema(ByVal op As OperacionesABC, ByVal idIndice_Sistema As Integer, ByVal Area_Recomendada As String, ByVal Elemento_Recomendado As String, ByVal Indice_descripcion As String, ByVal Indice_Tipo As Integer, ByVal Indice_LongitudMax As Integer, ByVal Indice_Mascara As String, ByVal Indice_PK As Integer, ByVal Indice_Obligatorio As Integer, ByVal Indice_Unico As Integer, ByVal Indice_buscar As Integer, ByVal Indice_CopiarValor As Integer, ByVal Indice_EsAutoincremental As Integer, ByVal IndiceReadOnly As Integer, ByVal Indice_Visible As Integer, ByVal relacion_con_normaPID As Integer, ByVal folio_norma As String, ByVal Indice_ValorInicial As Integer, ByVal Indice_ValorActual As Integer, ByVal Indice_ValorMaximo As Integer, ByVal Muestra_padres As Integer, ByVal Multi_valor As Integer, ByVal Asigned As Integer, ByVal Asigned_value As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Indices_Sistema", op, idIndice_Sistema, Area_Recomendada, Elemento_Recomendado, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, folio_norma, Indice_ValorInicial, Indice_ValorActual, Indice_ValorMaximo, Muestra_padres, Multi_valor, Asigned, Asigned_value, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Indices_Sistema", op, idIndice_Sistema, Area_Recomendada, Elemento_Recomendado, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, folio_norma, Indice_ValorInicial, Indice_ValorActual, Indice_ValorMaximo, Muestra_padres, Multi_valor, Asigned, Asigned_value)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idIndice_Sistema").Value, Integer)
        Return nID
    End Function

    Public Sub ABC_Normas(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal Norma_descripcion As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas, op, idNorma, Norma_descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas, op, idNorma, Norma_descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Archivo_Fisico(ByVal op As OperacionesABC, ByVal idArchivo_Fisico As Integer, ByVal Archivo_Fisico_Descripcion As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico, op, idArchivo_Fisico, Archivo_Fisico_Descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico, op, idArchivo_Fisico, Archivo_Fisico_Descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Archivo_Fisico_Unidades(ByVal op As OperacionesABC, ByVal idUnidad_medida As String, ByVal Unidad_medida_descripcion As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_Unidades, op, idUnidad_medida, Unidad_medida_descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_Unidades, op, idUnidad_medida, Unidad_medida_descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub
    Public Sub ABC_Archivo_Fisico_elemento(ByVal op As OperacionesABC, ByVal idTipoElemento As Integer, ByVal TipoElemento As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_elemento, op, idTipoElemento, TipoElemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_elemento, op, idTipoElemento, TipoElemento)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Archivo_Fisico_Estructura(ByVal op As OperacionesABC, ByVal idArchivo_Fisico As Integer, ByVal idEstructura As Integer, ByVal Descripcion As String, ByVal idTipoElemento As Integer, ByVal idEstructuraPID As Integer, ByVal Alto As Double, ByVal Ancho As Double, ByVal Fondo As Double, ByVal idUnidad_medida As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_Estructura, op, idArchivo_Fisico, idEstructura, Descripcion, idTipoElemento, idEstructuraPID, Alto, Ancho, Fondo, idUnidad_medida, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Fisico_Estructura, op, idArchivo_Fisico, idEstructura, Descripcion, idTipoElemento, idEstructuraPID, Alto, Ancho, Fondo, idUnidad_medida)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub
    Public Function ListaIndices_Sistema(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaIndices_Sistema", idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaIndices_Sistema", idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaIndices_SistemaxNorma(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaIndices_SistemaxNorma", idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaIndices_SistemaxNorma", idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Niveles(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Niveles, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Niveles, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Niveles_Hijos(ByVal idNorma As Integer, ByVal Nivel_padre As Integer, ByVal Nivel_Logico_Fisico As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Niveles_Hijos, idNorma, Nivel_padre, Nivel_Logico_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Niveles_Hijos, idNorma, Nivel_padre, Nivel_Logico_Fisico)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaNorma_Nivel(ByVal idNorma As Integer, ByVal idNivel As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Nivel, idNorma, idNivel, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Nivel, idNorma, idNivel)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNorma_Nivel_SerieyDocumento(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Nivel_SerieyDocumento, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Nivel_SerieyDocumento, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Normas_Niveles(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal Nivel As Integer, ByVal valuePath As String, ByVal Nivel_descripcion As String, ByVal idDocumentoPID As Integer, ByVal Imagen_open As String, ByVal Imagen_close As String, ByVal Nivel_Logico_Fisico As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, op, idNorma, idNivel, Nivel, valuePath, Nivel_descripcion, idDocumentoPID, Imagen_open, Imagen_close, Nivel_Logico_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, op, idNorma, idNivel, Nivel, valuePath, Nivel_descripcion, idDocumentoPID, Imagen_open, Imagen_close, Nivel_Logico_Fisico)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idNivel").Value, Integer)
        Return nID
    End Function

    Public Function Normas_Niveles_Del(ByVal idNorma As Integer, ByVal idNivel As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, 1, idNorma, idNivel, "", "", 0, "", "", 0, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, 1, idNorma, idNivel, "", "", 0, "", "", 0)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idNivel").Value, Integer)
        Return nID
    End Function

    Public Function Normas_Niveles_up(ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal valuePath As String, ByVal Nivel_descripcion As String, ByVal idDocumentoPID As Integer, ByVal Imagen_open As String, ByVal Imagen_close As String, ByVal Nivel_Logico_Fisico As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, 2, idNorma, idNivel, valuePath, Nivel_descripcion, idDocumentoPID, Imagen_open, Imagen_close, Nivel_Logico_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Niveles, 2, idNorma, idNivel, valuePath, Nivel_descripcion, idDocumentoPID, Imagen_open, Imagen_close, Nivel_Logico_Fisico)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idNivel").Value, Integer)
        Return nID
    End Function

    Public Function ListaNormas_Areas(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Areas, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Areas, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Areas_Especial(ByVal idNorma As Integer, ByVal idplantilla As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Areas_Especial, idNorma, idplantilla, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Areas_Especial, idNorma, idplantilla)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Normas_Areas(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal Area_descripcion As String, ByVal folio_norma As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Areas, op, idNorma, idArea, Area_descripcion, folio_norma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Areas, op, idNorma, idArea, Area_descripcion, folio_norma)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaNormas_Elementos(ByVal idNorma As Integer, ByVal idArea As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos, idNorma, idArea, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos, idNorma, idArea)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_ElementosxSeriexElemento_Visible(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_ElementosxSeriexElemento_Visible, idNorma, idArea, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_ElementosxSeriexElemento_Visible, idNorma, idArea, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_Especial(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idPlantilla As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Especial, idNorma, idArea, idPlantilla, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Especial, idNorma, idArea, idPlantilla)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Normas_Elementos(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal Elemento_descripcion As String, ByVal folio_norma As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Elementos, op, idNorma, idArea, idElemento, Elemento_descripcion, folio_norma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Elementos, op, idNorma, idArea, idElemento, Elemento_descripcion, folio_norma)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub



    Public Function ListaNormas_Campos(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Campos, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Campos, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaNormas_Elementos_Campos(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campos, idNorma, idArea, idElemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campos, idNorma, idArea, idElemento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSerie(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSerie_Visibles(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie_Visibles, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie_Visibles, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSerie_Defaults(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie_Defaults, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSerie_Defaults, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSerie_Heredar(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSerie_Heredar", idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSerie_Heredar", idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSerie_idIndiceNorma(ByVal idSerie As Integer, ByVal idIndice_Norma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSerie_idIndiceNorma", idSerie, idIndice_Norma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSerie_idIndiceNorma", idSerie, idIndice_Norma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposXArea_Serie(ByVal idArea As Integer, ByVal idSerie As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposXArea_Serie", idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposXArea_Serie", idArea, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_CamposxSeriexElemento(ByVal idSerie As Integer, ByVal idElemento As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSeriexElemento, idSerie, idElemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CamposxSeriexElemento, idSerie, idElemento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaNormas_Elementos_CamposxSeriexElemento_Visible(ByVal idSerie As Integer, ByVal idElemento As Integer, ByVal Tipo_Archivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSeriexElemento_Visible", idSerie, idElemento, Tipo_Archivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaNormas_Elementos_CamposxSeriexElemento_Visible", idSerie, idElemento, Tipo_Archivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaNormas_Elementos_Campos_Especial(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idPlantilla As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campos_Especial, idNorma, idArea, idElemento, idPlantilla, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campos_Especial, idNorma, idArea, idElemento, idPlantilla)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNormas_Elementos_Campo(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campo, idNorma, idArea, idElemento, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_Campo, idNorma, idArea, idElemento, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaNormas_Elementos_CampoxSerie_and_PK(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CampoxSerie_and_PK, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNormas_Elementos_CampoxSerie_and_PK, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Normas_Elementos_Campos(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal idIndice As Integer, ByVal Indice_descripcion As String, ByVal Indice_Tipo As Integer, ByVal Indice_LongitudMax As Integer, ByVal Indice_Mascara As String, ByVal Indice_PK As Integer, ByVal Indice_Obligatorio As Integer, ByVal Indice_Unico As Integer, ByVal Indice_buscar As Integer, ByVal Indice_CopiarValor As Integer, ByVal Indice_EsAutoincremental As Integer, ByVal IndiceReadOnly As Integer, ByVal Indice_Visible As Integer, ByVal Indice_Visible_Concentracion As Integer, ByVal Indice_Visible_Historico As Integer, ByVal Indice_Hereda_valor As Integer, ByVal relacion_con_normaPID As Integer, ByVal folio_norma As String, ByVal Muestra_padres As Integer, ByVal Multi_valor As Integer, ByVal Asigned As Integer, ByVal Asigned_value As String, ByVal Indice_Sistema As Integer, ByVal idIndice_Sistema As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Elementos_Campos, op, idNorma, idArea, idElemento, idNivel, idSerie, idIndice, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, Indice_Visible_Concentracion, Indice_Visible_Historico, Indice_Hereda_valor, relacion_con_normaPID, folio_norma, Muestra_padres, Multi_valor, Asigned, Asigned_value, Indice_Sistema, idIndice_Sistema, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Elementos_Campos, op, idNorma, idArea, idElemento, idNivel, idSerie, idIndice, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, Indice_Visible_Concentracion, Indice_Visible_Historico, Indice_Hereda_valor, relacion_con_normaPID, folio_norma, Muestra_padres, Multi_valor, Asigned, Asigned_value, Indice_Sistema, idIndice_Sistema)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Function ListaArchivos() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivos, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivos)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivos_Tipo(ByVal Tipo_Archivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaArchivos_Tipo", Tipo_Archivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaArchivos_Tipo", Tipo_Archivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo(ByVal idArchivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo, idArchivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo, idArchivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Sub ABC_Archivos(ByVal op As OperacionesABC, ByVal idArchivo As Integer, ByVal idNorma As Integer, ByVal Archivo_descripcion As String, ByVal Codigo_clasificacion As String, ByVal Tipo_Archivo As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivos, op, idArchivo, idNorma, Archivo_descripcion, Codigo_clasificacion, Tipo_Archivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivos, op, idArchivo, idNorma, Archivo_descripcion, Codigo_clasificacion, Tipo_Archivo)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaArchivo_Descripciones(ByVal idArchivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones, idArchivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones, idArchivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Descripciones_nivel(ByVal idArchivo As Integer, ByVal idNivel As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_nivel, idArchivo, idNivel, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_nivel, idArchivo, idNivel)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Descripciones_Nivel_Logico(ByVal idArchivo As Integer, ByVal Nivel_Logico_Fisico As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_Nivel_Logico, idArchivo, Nivel_Logico_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_Nivel_Logico, idArchivo, Nivel_Logico_Fisico)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Descripciones_idSerie(ByVal idArchivo As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal idDocumentoPID As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idSerie, idArchivo, idNivel, idSerie, idDocumentoPID, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idSerie, idArchivo, idNivel, idSerie, idDocumentoPID)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Descripciones_idDescripcion(ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idDescripcion, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idDescripcion, idArchivo, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Descripciones_idDescripcion_Hijos(ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idDescripcion_Hijos, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones_idDescripcion_Hijos, idArchivo, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaArchivo_Codigo_clasificacion(ByVal idArchivo As Integer, ByVal Codigo_clasificacion As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Codigo_clasificacion, idArchivo, Codigo_clasificacion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Codigo_clasificacion, idArchivo, Codigo_clasificacion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function Func_GeneraCodigoDeSeries(ByVal idArchivo As Integer, ByVal FormatoCodigo As Integer, ByVal idDocumentoPID As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                Return Integer.Parse(db.ExecuteScalar("Func_GeneraCodigoDeSeries", idArchivo, FormatoCodigo, idDocumentoPID, Nothing).ToString())
            Case eTipoBD.SQLServer
                Return Integer.Parse(db.ExecuteScalar("Func_GeneraCodigoDeSeries", idArchivo, FormatoCodigo, idDocumentoPID).ToString())
        End Select
    End Function

    Public Function ABC_Archivo_Descripciones(ByVal op As OperacionesABC, ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal Codigo_clasificacion As String, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal valuePath As String, ByVal idUnidadInstalacion As Integer, ByVal Descripcion As String, ByVal idTipoElemento As Integer, ByVal idDocumentoPID As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Descripciones, op, idArchivo, idDescripcion, Codigo_clasificacion, idNivel, idSerie, valuePath, idUnidadInstalacion, Descripcion, idTipoElemento, idDocumentoPID, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Descripciones, op, idArchivo, idDescripcion, Codigo_clasificacion, idNivel, idSerie, valuePath, idUnidadInstalacion, Descripcion, idTipoElemento, idDocumentoPID)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idDescripcion").Value, Integer)
        Return nID
    End Function

    Public Function ListaArchivo_indice(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indice, idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indice, idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_indicexFolio_norma(ByVal idNorma As Integer, ByVal idSerie As Integer, ByVal Folio_norma As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexFolio_norma, idNorma, idSerie, Folio_norma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexFolio_norma, idNorma, idSerie, Folio_norma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Archivo_indice(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal idFolio As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal relacion_con_normaPID As Integer, ByVal Valor As String, ByVal Indice_Tipo As Integer, ByVal IDCatalogo_item As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Dim varValue As Object

        'Select Case Indice_Tipo
        '    Case 0, 1 'Texto y TextoLargo
        '        varValue = Valor
        '    Case 2 'Fecha
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            varValue = CDate(Valor).Date
        '        End If
        '    Case 3 'Periodo
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            'Habra que ver los formatos de periodos para la funcinalidad en calculos
        '            varValue = Valor
        '        End If
        '    Case 4 'PeriodoAnoMes
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            'Habra que ver los formatos de periodos para la funcinalidad en calculos
        '            varValue = Valor
        '        End If
        '    Case 5 'PeriodoAnos
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            'Habra que ver los formatos de periodos para la funcinalidad en calculos
        '            varValue = Valor
        '        End If
        '    Case 6 'Si/No
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            'Habra que ver los formatos de periodos para la funcinalidad en calculos
        '            varValue = Valor
        '        End If
        '    Case 7 'Entero
        '        If Trim(CStr(Valor)) = "" Then
        '            varValue = DBNull.Value
        '        Else
        '            varValue = Int64.Parse(CStr(Valor))
        '        End If
        '        'Case ..... todos los tipos faltantes
        'End Select

        varValue = Valor

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_indice, op, idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion, idFolio, idNivel, idSerie, relacion_con_normaPID, varValue, Indice_Tipo, IDCatalogo_item, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_indice, op, idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion, idFolio, idNivel, idSerie, relacion_con_normaPID, varValue, Indice_Tipo, IDCatalogo_item)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idFolio").Value, Integer)
        Return nID
    End Function

    Public Function ListaNorma_Plantillas(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Plantillas, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Plantillas, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaNorma_Plantilla(ByVal idNorma As Integer, ByVal idplantilla As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Plantilla, idNorma, idplantilla, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Plantilla, idNorma, idplantilla)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Normas_Plantilla_Areas(ByVal op As OperacionesABC, ByVal idPlantilla As Integer, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal Visible As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Areas, op, idPlantilla, idNorma, idArea, Visible, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Areas, op, idPlantilla, idNorma, idArea, Visible)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Sub ABC_Normas_Plantilla_Elementos(ByVal op As OperacionesABC, ByVal idPlantilla As Integer, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal Visible As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Elementos, op, idPlantilla, idNorma, idArea, idElemento, Visible, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Elementos, op, idPlantilla, idNorma, idArea, idElemento, Visible)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Normas_Plantilla_Campos(ByVal op As OperacionesABC, ByVal idPlantilla As Integer, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal Visible As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Campos, op, idPlantilla, idNorma, idArea, idElemento, idIndice, Visible, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_Plantilla_Campos, op, idPlantilla, idNorma, idArea, idElemento, idIndice, Visible)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ABC_Normas_plantillas(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idPlantilla As Integer, ByVal Plantilla_descripcion As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_plantillas, op, idNorma, idPlantilla, Plantilla_descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_plantillas, op, idNorma, idPlantilla, Plantilla_descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idPlantilla").Value, Integer)
        Return nID
    End Function


    Public Sub Carga_Normas_Plantilla_Campos(ByVal idPlantilla As Integer, ByVal idNorma As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Carga_Normas_Plantilla_Campos, idPlantilla, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Carga_Normas_Plantilla_Campos, idPlantilla, idNorma)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub
    Public Function ListaPlantilla_Areas(ByVal idPlantilla As Integer, ByVal idNorma As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Areas, idPlantilla, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Areas, idPlantilla, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaPlantilla_Elementos(ByVal idPlantilla As Integer, ByVal idNorma As Integer, ByVal idArea As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Elementos, idPlantilla, idNorma, idArea, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Elementos, idPlantilla, idNorma, idArea)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaPlantilla_Elementos_Campos(ByVal idPlantilla As Integer, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Elementos_Campos, idPlantilla, idNorma, idArea, idElemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaPlantilla_Elementos_Campos, idPlantilla, idNorma, idArea, idElemento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function Archivo_Descripciones_Del(ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Descripciones, 1, idArchivo, idDescripcion, "", 0, "", 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "")
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Descripciones, 1, idArchivo, idDescripcion, "", 0, "", 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "")
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idDescripcion").Value, Integer)
        Return nID
    End Function


    Public Function ListaArchivo_Cat_Elementos() As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Elementos, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Elementos)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ABC_Archivo_Cat_Elementos(ByVal op As OperacionesABC, ByVal idElemento As Integer, ByVal Elemento_descripcion As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Cat_Elementos, op, idElemento, Elemento_descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Cat_Elementos, op, idElemento, Elemento_descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idElemento").Value, Integer)
        Return nID
    End Function

    Public Function ListaArchivo_Cat_Campos(ByVal idElemento As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Campos, idElemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Campos, idElemento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Cat_Campo(ByVal idElemento As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Campo, idElemento, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Cat_Campo, idElemento, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Archivo_Elementos_Campos(ByVal op As OperacionesABC, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal Indice_descripcion As String, ByVal Indice_Tipo As Integer, ByVal Indice_LongitudMax As Integer, ByVal Indice_Mascara As String, ByVal Indice_Obligatorio As Integer, ByVal Indice_Unico As Integer, ByVal Indice_buscar As Integer, ByVal Indice_CopiarValor As Integer, ByVal Indice_EsAutoincremental As Integer, ByVal IndiceReadOnly As Integer, ByVal Indice_Visible As Integer, ByVal relacion_con_normaPID As Integer, _
                ByVal Indice_Sistema As Integer, ByVal idIndice_Sistema As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Elementos_Campos, op, idElemento, idIndice, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, Indice_Sistema, idIndice_Sistema, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_Elementos_Campos, op, idElemento, idIndice, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, Indice_Sistema, idIndice_Sistema)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaArchivo_val_Campo(ByVal idArchivo As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_val_Campo, idArchivo, idElemento, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_val_Campo, idArchivo, idElemento, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Sub ABC_Archivo_val_campo(ByVal op As OperacionesABC, ByVal idArchivo As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal Indice_Tipo As Integer, ByVal relacion_con_normaPID As Integer, ByVal Valor As Object)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim varValue As Object

        Select Case Indice_Tipo
            Case 0, 1 'Texto y TextoLargo
                varValue = Valor
            Case 2 'Fecha
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    varValue = CDate(Valor).Date
                End If
            Case 3 'Periodo
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    'Habra que ver los formatos de periodos para la funcinalidad en calculos
                    varValue = Valor
                End If
            Case 4 'PeriodoAnoMes
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    'Habra que ver los formatos de periodos para la funcinalidad en calculos
                    varValue = Valor
                End If
            Case 5 'PeriodoAnos
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    'Habra que ver los formatos de periodos para la funcinalidad en calculos
                    varValue = Valor
                End If
            Case 6 'Si/No
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    'Habra que ver los formatos de periodos para la funcinalidad en calculos
                    varValue = Valor
                End If
            Case 7 'Entero
                If Trim(CStr(Valor)) = "" Then
                    varValue = DBNull.Value
                Else
                    varValue = Int64.Parse(CStr(Valor))
                End If
                'Case ..... todos los tipos faltantes
        End Select

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_val_campo, op, idArchivo, idElemento, idIndice, Indice_Tipo, relacion_con_normaPID, varValue, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivo_val_campo, op, idArchivo, idElemento, idIndice, Indice_Tipo, relacion_con_normaPID, varValue)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaArchivo_Niveles_Norma(ByVal idArchivo As Integer, ByVal Nivel_Logico_Fisico As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Niveles_Norma, idArchivo, Nivel_Logico_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Niveles_Norma, idArchivo, Nivel_Logico_Fisico)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Busca_enArchivo(ByVal idArchivo As Integer, ByVal Palabra As String) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Busca_enArchivo, idArchivo, Palabra, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Busca_enArchivo, idArchivo, Palabra)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_indicexelemen(ByVal idIndice As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexelemen, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexelemen, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ABC_BajaElementos_Campos(ByVal idIndice As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nRes As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_BajaElementos_Campos, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_BajaElementos_Campos, idIndice)
        End Select
        db.ExecuteNonQuery(dbCW)
        nRes = 1
        Return nRes
    End Function

    Public Function ListaArchivo_val_Campo_bus(ByVal idElemento As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_val_Campo_bus, idElemento, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_val_Campo_bus, idElemento, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Reportecgca_datos(ByVal idNorma As Integer, ByVal idArchivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Reportecgca_datos, idNorma, idArchivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Reportecgca_datos, idNorma, idArchivo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Reportegs_datos(ByVal idArchivo As Integer, ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Reportegs_datos, idArchivo, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Reportegs_datos, idArchivo, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Normas_relacion() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_relacion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_relacion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Normas_ISAAR() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_ISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_ISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Normas_ISAD() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_ISAD, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Normas_ISAD)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Normas_relacion(ByVal op As OperacionesABC, ByVal idNr As Integer, ByVal idisad As String, ByVal idisaar As String, ByVal descripcion As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_relacion, op, idNr, idisad, idisaar, descripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Normas_relacion, op, idNr, idisad, idisaar, descripcion)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaNivel_Plantilla_captura(ByVal idNorma As Integer, ByVal idNivel As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNivel_Plantilla_captura, idNorma, idNivel, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaNivel_Plantilla_captura, idNorma, idNivel)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Sub ABC_Niveles_Plantilla_Captura(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal idPlantillaold As Integer, ByVal idPlantillanew As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Niveles_Plantilla_Captura, op, idNorma, idNivel, idPlantillaold, idPlantillanew, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Niveles_Plantilla_Captura, op, idNorma, idNivel, idPlantillaold, idPlantillanew)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function Func_Concatena_Indices_Grid(ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Func_Concatena_Indices_Grid", idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Func_Concatena_Indices_Grid", idNorma, idArea, idElemento, idIndice, idArchivo, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Concatena_padres(ByVal idArchivo As Integer, ByVal idIndice As Integer, ByVal idFolio As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Func_Concatena_padres, idArchivo, idIndice, idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Func_Concatena_padres, idArchivo, idIndice, idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Maximo_valor(ByVal idArchivo As Integer, ByVal idIndice As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Func_Maximo_valor, idArchivo, idIndice, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Func_Maximo_valor, idArchivo, idIndice, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Minimo_valor(ByVal idArchivo As Integer, ByVal idIndice As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Func_Minimo_valor, idArchivo, idIndice, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Func_Minimo_valor, idArchivo, idIndice, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Suma_valor_hijos(ByVal idArchivo As Integer, ByVal idIndice As Integer, ByVal idDescripcion As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Func_Minimo_valor, idArchivo, idIndice, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Func_Minimo_valor, idArchivo, idIndice, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ABC_Catalogo(ByVal op As Integer, ByVal IDCatalogo As Integer, ByVal Descripcion As String, ByVal A1_Titulo As String, ByVal A1_Ancho As Integer, ByVal A1_Visible As Integer, ByVal A2_Titulo As String, ByVal A2_Ancho As Integer, ByVal A2_Visible As Integer, ByVal A3_Titulo As String, ByVal A3_Ancho As Integer, ByVal A3_Visible As Integer, ByVal Tipo_Dato As Integer, ByVal Valores_Aceptados As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Catalogo, op, IDCatalogo, Descripcion, A1_Titulo, A1_Ancho, A1_Visible, A2_Titulo, A2_Ancho, A2_Visible, A3_Titulo, A3_Ancho, A3_Visible, Tipo_Dato, Valores_Aceptados, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Catalogo, op, IDCatalogo, Descripcion, A1_Titulo, A1_Ancho, A1_Visible, A2_Titulo, A2_Ancho, A2_Visible, A3_Titulo, A3_Ancho, A3_Visible, Tipo_Dato, Valores_Aceptados)
        End Select
        db.ExecuteDataSet(dbCW)
    End Function

    Public Function ListaCatalogo() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Catalogo_Datos(ByVal op As OperacionesABC, ByVal IDCatalogo As Integer, ByVal IDCatalogo_item As Integer, ByVal Descripcion As String, ByVal A1 As String, ByVal A2 As String, ByVal A3 As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Catalogo_Datos, op, IDCatalogo, IDCatalogo_item, Descripcion, A1, A2, A3, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Catalogo_Datos, op, IDCatalogo, IDCatalogo_item, Descripcion, A1, A2, A3)
        End Select
        db.ExecuteDataSet(dbCW)
    End Function

    Public Function ListaCatalogo_Datos(ByVal IDCatalogo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo_Datos, IDCatalogo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo_Datos, IDCatalogo)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaCatalogo_DatosXIndice(ByVal IDCatalogo As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaCatalogo_DatosXIndice", IDCatalogo, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaCatalogo_DatosXIndice", IDCatalogo, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub Archivos_Del(ByVal idNorma As Integer, ByVal idArchivo As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivos, 1, idArchivo, idNorma, "", "", Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Archivos, 1, idArchivo, idNorma, "", "")
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaNorma_Descripciones(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaNorma_Descripciones, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Descripciones, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ABC_ISAAR(ByVal op As OperacionesABC, ByVal idISAAR As Integer, ByVal Tipo_de_entidad As String, ByVal Formas_autorizadas_nombre As String, ByVal Formas_paralelas_nombre As String, ByVal Formas_normalizadas_nombre As String, ByVal Otras_formas_nombre As String, ByVal Identificadores_para_instituciones As String, ByVal Fechas_de_existencia As Date, ByVal Historia As String, ByVal Lugares As String, ByVal Estatuto_jurídico As String, ByVal Funciones_ocupaciones_actividades As String, ByVal Atribuciones_Fuentes_legales As String, ByVal Estructuras_internas_Genealogía As String, ByVal Contexto_general As String, ByVal Identificador_registro_autoridad As String, ByVal Identificadores_institución As String, ByVal Reglas_convenciones As String, ByVal Estado_elaboración As String, ByVal Nivel_detalle As String, ByVal Fechas_creación_revisión_eliminación As Date, ByVal Lenguas_escrituras As String, ByVal Fuentes As String, ByVal Notas_de_mantenimiento As String) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR, op, idISAAR, Tipo_de_entidad, Formas_autorizadas_nombre, Formas_paralelas_nombre, Formas_normalizadas_nombre, Otras_formas_nombre, Identificadores_para_instituciones, Fechas_de_existencia, Historia, Lugares, Estatuto_jurídico, Funciones_ocupaciones_actividades, Atribuciones_Fuentes_legales, Estructuras_internas_Genealogía, Contexto_general, Identificador_registro_autoridad, Identificadores_institución, Reglas_convenciones, Estado_elaboración, Nivel_detalle, Fechas_creación_revisión_eliminación, Lenguas_escrituras, Fuentes, Notas_de_mantenimiento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR, op, idISAAR, Tipo_de_entidad, Formas_autorizadas_nombre, Formas_paralelas_nombre, Formas_normalizadas_nombre, Otras_formas_nombre, Identificadores_para_instituciones, Fechas_de_existencia, Historia, Lugares, Estatuto_jurídico, Funciones_ocupaciones_actividades, Atribuciones_Fuentes_legales, Estructuras_internas_Genealogía, Contexto_general, Identificador_registro_autoridad, Identificadores_institución, Reglas_convenciones, Estado_elaboración, Nivel_detalle, Fechas_creación_revisión_eliminación, Lenguas_escrituras, Fuentes, Notas_de_mantenimiento)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idISAAR").Value, Integer)
        Return nID
    End Function

    Public Sub ABC_ISAAR_Relaciones(ByVal op As OperacionesABC, ByVal idISAAR As Integer, ByVal idRelacion As Integer, ByVal idISAAR_REL As Integer, ByVal IDCatalogo_item As Integer, ByVal Descripción_relación As String, ByVal Fechas_relación As Date)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Relaciones, op, idISAAR, idRelacion, idISAAR_REL, IDCatalogo_item, Descripción_relación, Fechas_relación, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Relaciones, op, idISAAR, idRelacion, idISAAR_REL, IDCatalogo_item, Descripción_relación, Fechas_relación)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_ISAAR_Series_Modelo(ByVal op As OperacionesABC, ByVal idISAAR As Integer, ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Series_Modelo, op, idISAAR, idNorma, idNivel, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Series_Modelo, op, idISAAR, idNorma, idNivel, idSerie)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_ISAAR_Entidades(ByVal op As OperacionesABC, ByVal idISAAR As Integer, ByVal idArchivo As Integer, ByVal idDescripcion As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Entidades, op, idISAAR, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_ISAAR_Entidades, op, idISAAR, idArchivo, idDescripcion)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaISAAR() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaISAAR_Relaciones(ByVal idISAAR As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Relaciones, idISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Relaciones, idISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaISAARxtipoent(ByVal tipo_de_entidad As String) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAARxtipoent, tipo_de_entidad, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAARxtipoent, tipo_de_entidad)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaISAARxid(ByVal idISAAR As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAARxid, idISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAARxid, idISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaISAAR_Series_Modelo(ByVal idISAAR As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Series_Modelo, idISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Series_Modelo, idISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaISAAR_Entidades(ByVal idISAAR As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Entidades, idISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaISAAR_Entidades, idISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_ISAAR_EntidadesxUsuario(ByVal idISAAR As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_ISAAR_EntidadesxUsuario, idISAAR, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_ISAAR_EntidadesxUsuario, idISAAR)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_Modelo(ByVal identidad As Integer, ByVal Profundidad As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo, identidad, Profundidad, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo, identidad, Profundidad)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_ModeloXNorma(ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal NoIdentidad As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaSeries_ModeloXNorma", idNorma, idNivel, NoIdentidad, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaSeries_ModeloXNorma", idNorma, idNivel, NoIdentidad)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_ModeloxNivel(ByVal identidad As Integer, ByVal idNivel As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_ModeloxNivel, identidad, idNivel, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_ModeloxNivel, identidad, idNivel)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_ModeloxRango(ByVal identidad As Integer, ByVal nivel_ini As Integer, ByVal nivel_fin As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_ModeloxRango, identidad, nivel_ini, nivel_fin, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_ModeloxRango, identidad, nivel_ini, nivel_fin)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function PermisosAccesos(ByVal identidad As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_PermisosAD, identidad, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_PermisosAD, identidad)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Series_Modelo(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal Serie_nombre As String, ByVal Clave As String, ByVal Atributo As Integer, ByVal idSeriePID As Integer, ByVal permiso As Integer, _
                                      ByVal Periodo_Prestamo As Integer, ByVal idFrecuencia_prestamo As Integer, ByVal Num_Resellos As Integer, _
                                      ByVal idFrecuencia_guardaActivo As Integer, ByVal Periodo_guardaActivo As Integer, _
                                      ByVal idFrecuencia_guardaInactivo As Integer, ByVal Periodo_guardaInactivo As Integer, _
                                      ByVal Valor_administrativo As Integer, ByVal Valor_legal As Integer, ByVal Valor_contable As Integer, ByVal Metodo_Destruccion As Integer, _
                                                    ByVal Clasificacion_De_Informacion As Integer, _
                                                    ByVal Fecha_Ultimo_Cambio As Date) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Series_Modelo, op, idNorma, idNivel, idSerie, Serie_nombre, Clave, Atributo, idSeriePID, permiso, Periodo_Prestamo, idFrecuencia_prestamo, Num_Resellos, idFrecuencia_guardaActivo, Periodo_guardaActivo, idFrecuencia_guardaInactivo, Periodo_guardaInactivo, Valor_administrativo, Valor_legal, Valor_contable, Metodo_Destruccion, Clasificacion_De_Informacion, Fecha_Ultimo_Cambio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Series_Modelo, op, idNorma, idNivel, idSerie, Serie_nombre, Clave, Atributo, idSeriePID, permiso, Periodo_Prestamo, idFrecuencia_prestamo, Num_Resellos, idFrecuencia_guardaActivo, Periodo_guardaActivo, idFrecuencia_guardaInactivo, Periodo_guardaInactivo, Valor_administrativo, Valor_legal, Valor_contable, Metodo_Destruccion, Clasificacion_De_Informacion, Fecha_Ultimo_Cambio)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idSerie").Value, Integer)
        Return nID
    End Function

    Public Function ListaSeries_Modelo_Hijos(ByVal idSerie As Integer, ByVal identidad As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo_Hijos, idSerie, identidad, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo_Hijos, idSerie, identidad)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function CrearPermiso(ByVal Nombre As String, ByVal VersionAp As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SVRUSR_SP_AltaPermiso, Nombre, Nombre, VersionAp, 0)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SVRUSR_SP_AltaPermiso, Nombre, Nombre, VersionAp, 0)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function OtorgarPermiso(ByVal PerfilUsuarioID As Integer, ByVal PermisoID As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SVRUSR_SP_ABCPERMISOPERFILUSR, 0, PerfilUsuarioID, PermisoID)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SVRUSR_SP_ABCPERMISOPERFILUSR, 0, PerfilUsuarioID, PermisoID)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_Indices_padres(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Indices_padres, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Indices_padres, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaSeries_Indices(ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Indices, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Indices, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ABC_Series_Indices(ByVal op As OperacionesABC, ByVal idNorma As Integer, ByVal idArea As Integer, ByVal idElemento As Integer, ByVal idIndice As Integer, ByVal idNivel As Integer, ByVal idSerie As Integer, ByVal Indice_descripcion As String, ByVal Indice_Tipo As Integer, ByVal Indice_LongitudMax As Integer, ByVal Indice_Mascara As String, ByVal Indice_PK As Integer, ByVal Indice_Obligatorio As Integer, ByVal Indice_Unico As Integer, ByVal Indice_buscar As Integer, ByVal Indice_CopiarValor As Integer, ByVal Indice_EsAutoincremental As Integer, ByVal IndiceReadOnly As Integer, ByVal Indice_Visible As Integer, ByVal relacion_con_normaPID As Integer, ByVal folio_norma As String, ByVal Muestra_padres As Integer, ByVal Multi_valor As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer = 0
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Series_Indices, op, idNorma, idArea, idElemento, idIndice, idNivel, idSerie, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, folio_norma, Muestra_padres, Multi_valor, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Series_Indices, op, idNorma, idArea, idElemento, idIndice, idNivel, idSerie, Indice_descripcion, Indice_Tipo, Indice_LongitudMax, Indice_Mascara, Indice_PK, Indice_Obligatorio, Indice_Unico, Indice_buscar, Indice_CopiarValor, Indice_EsAutoincremental, IndiceReadOnly, Indice_Visible, relacion_con_normaPID, folio_norma, Muestra_padres, Multi_valor)
        End Select
        db.ExecuteDataSet(dbCW)
        nID = CType(dbCW.Parameters.Item("@idIndice").Value, Integer)
    End Function


    Public Function ListaSeries_Area_Elemento(ByVal idNorma As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Area_Elemento, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Area_Elemento, idNorma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_indices_PK(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal indice_PK As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indices_PK, idArchivo, idDescripcion, indice_PK, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indices_PK, idArchivo, idDescripcion, indice_PK)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Obten_Secuencia(ByVal idArchivo As Integer, ByVal idNorma As Integer, ByVal idSerie As Integer, ByVal ano As String, ByVal mes As String, ByVal dia As String, ByVal folio_norma As String, ByVal idDocumentoPID As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Obten_Secuencia, idArchivo, idNorma, idSerie, ano, mes, dia, folio_norma, idDocumentoPID, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Obten_Secuencia, idArchivo, idNorma, idSerie, ano, mes, dia, folio_norma, idDocumentoPID)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Indice_repetido(ByVal idArchivo As Integer, ByVal idIndice As Integer, ByVal valor As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Func_Indice_repetido, idArchivo, idIndice, valor, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Func_Indice_repetido, idArchivo, idIndice, valor)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Func_Suma_IndicesSistemaXNorma(ByVal idIndice_Sistema As Integer, ByVal idNorma As Integer) As System.Data.DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Func_Suma_IndicesSistemaXNorma", idIndice_Sistema, idNorma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Func_Suma_IndicesSistemaXNorma", idIndice_Sistema, idNorma)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaFondoxNivel(ByVal idArchivo As Integer, ByVal Fondo_ini As Integer, ByVal Fondo_fin As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaFondoxNivel, idArchivo, Fondo_ini, Fondo_fin, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaFondoxNivel, idArchivo, Fondo_ini, Fondo_fin)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaFondo(ByVal idArchivo As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaFondo, idArchivo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaFondo, idArchivo)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_Serie(ByVal idArchivo As Integer, ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Serie, idArchivo, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_Serie, idArchivo, idSerie)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_indicexidDescripcion(ByVal idArchivo As Integer, ByVal idDescripcion As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion, idArchivo, idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion, idArchivo, idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_indicexidDescripcion_folio_norma(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal folio_norma As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion_folio_norma, idArchivo, idDescripcion, folio_norma, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion_folio_norma, idArchivo, idDescripcion, folio_norma)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaArchivo_indicexidDescripcion_idIndice(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal idIndice As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion_idIndice, idArchivo, idDescripcion, idIndice, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_indicexidDescripcion_idIndice, idArchivo, idDescripcion, idIndice)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function





    Public Function ListaSeries_Modelo_indice_sistema(ByVal idIndice_Sistema As Integer, ByVal idSerie As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo_indice_sistema, idIndice_Sistema, idSerie, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaSeries_Modelo_indice_sistema, idIndice_Sistema, idSerie)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaFondoxNivelxPadre(ByVal idArchivo As Integer, ByVal Fondo_ini As Integer, ByVal Fondo_fin As Integer, ByVal Padre As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaFondoxNivelxPadre, idArchivo, Fondo_ini, Fondo_fin, Padre, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaFondoxNivelxPadre, idArchivo, Fondo_ini, Fondo_fin, Padre)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub Transfiere_Archivo_Descripciones(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal idArchivoNew As Integer, ByVal idDocumentoPIDNew As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Transfiere_Archivo_Descripciones, idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Transfiere_Archivo_Descripciones, idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew)
        End Select
        db.ExecuteNonQuery(dbCW)
    End Sub

    Public Function getPadresBusqueda(ByVal idArchivo As Integer, ByVal Entidad As String, ByVal Area As String, ByVal Tipo_expediente As Integer, ByVal ano As String, ByVal mes As String, ByVal dia As String, ByVal Palabra As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_getPadresBusqueda, idArchivo, Entidad, Area, Tipo_expediente, ano, mes, dia, Palabra, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_getPadresBusqueda, idArchivo, Entidad, Area, Tipo_expediente, ano, mes, dia, Palabra)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaArchivo_conLimite(ByVal idArchivo As Integer, ByVal nivelMax As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_conLimite, idArchivo, nivelMax, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaArchivo_conLimite, idArchivo, nivelMax)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaCatalogo_disposicion(ByVal idArchivo As Integer, ByVal nivelIni As Integer, ByVal nivelMax As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo_disposicion, idArchivo, nivelIni, nivelMax, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaCatalogo_disposicion, idArchivo, nivelIni, nivelMax)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function ListaValoracion_Archivo(ByVal idArchivo As Integer, ByVal Tipo As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaValoracion_Archivo", idArchivo, Tipo, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaValoracion_Archivo", idArchivo, Tipo)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function
    Public Function Lista_Archivo_Fisico_Elemento() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Elemento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Elemento)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Archivo_Fisico_Unidades() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Unidades, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Unidades)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Archivo_Fisico_Estructura(ByVal idArchivo_Fisico As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Estructura, idArchivo_Fisico, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_Lista_Archivo_Fisico_Estructura, idArchivo_Fisico)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaVencimientos_Archivo_Tramite(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ListaVencimientos_Archivo_Tramite, idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ListaVencimientos_Archivo_Tramite, idFolio, Baja)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    '-------------------------------------------------
    '-------------------------------------------------
    'Solicitud de prestamos

    Friend Function BuscaExpediente(ByVal SQLString As String) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetSqlStringCommand(SQLString)
            Case eTipoBD.SQLServer
                dbCW = db.GetSqlStringCommand(SQLString)
        End Select
        BuscaExpediente = db.ExecuteDataSet(dbCW)
    End Function


    Public Function ABC_Solicitud_Prestamos(ByVal op As OperacionesABC, ByVal idSolicitudPrestamo As Integer, ByVal idArchivo As Integer, ByVal idDescripcion As Integer, _
            ByVal folio As String, ByVal atendida As Boolean, ByVal fechaAtencion As Nullable(Of Date), ByVal estatus As Integer, ByVal idUsuario_Solicitante As String, _
            ByVal idUsuario_Atencion As String, ByVal dias As Integer, ByVal fechaEstimadaDevolucion As Nullable(Of Date), ByVal fechaDevolucion As Nullable(Of Date)) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand(SP_ABC_Solicitud_Prestamos, op, idSolicitudPrestamo, idArchivo, idDescripcion, folio, atendida, fechaAtencion, estatus, idUsuario_Solicitante, idUsuario_Atencion, dias, fechaEstimadaDevolucion, fechaDevolucion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand(SP_ABC_Solicitud_Prestamos, op, idSolicitudPrestamo, idArchivo, idDescripcion, folio, atendida, fechaAtencion, estatus, idUsuario_Solicitante, idUsuario_Atencion, dias, fechaEstimadaDevolucion, fechaDevolucion)
        End Select

        Return CType(db.ExecuteScalar(dbCW), Integer)
    End Function

    Public Function Busca_Solicitud_Prestamo(ByVal idSolicitud As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Busca_Solicitud_Prestamo", idSolicitud, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Busca_Solicitud_Prestamo", idSolicitud)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Solicitudes_Prestamos(ByVal estatus As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Solicitudes_Prestamos", estatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Solicitudes_Prestamos", estatus)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Solicitudes_Prestamos_Por_Vencer() As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Solicitudes_Prestamos_Por_Vencer", Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Solicitudes_Prestamos_Por_Vencer")
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function Cuenta_Solicitudes_Expediente_Estatus(ByVal idDescripcion As Integer, ByVal estatus As Integer) As Integer

        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim resultado As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                resultado = CType(db.ExecuteScalar("Cuenta_Solicitudes_Expediente_Estatus", idDescripcion, estatus), Integer)
            Case eTipoBD.SQLServer
                resultado = CType(db.ExecuteScalar("Cuenta_Solicitudes_Expediente_Estatus", idDescripcion, estatus), Integer)
        End Select
        Return resultado

    End Function

    Public Function ObtenFechaDevolucionExpedientePrestado(ByVal idDescripcion As Integer) As String

        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim resultado As String = ""

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                resultado = CType(db.ExecuteScalar("Obten_Fecha_Devolucion_Expediente_Prestado", idDescripcion), String)
            Case eTipoBD.SQLServer
                resultado = CType(db.ExecuteScalar("Obten_Fecha_Devolucion_Expediente_Prestado", idDescripcion), String)
        End Select
        Return resultado

    End Function


    '-------------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------------
    ' Transferencia Primara

    Public Sub Prepara_Vencimientos_Archivo_Tramite(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal Fecha_Corte As Date)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Tramite", idArchivo, idFolio, Fecha_Corte, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Tramite", idArchivo, idFolio, Fecha_Corte)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub
    Public Sub Prepara_Vencimientos_Archivo_Tramite_Bajas(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal Fecha_Corte As Date)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Tramite_Bajas", idArchivo, idFolio, Fecha_Corte, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Tramite_Bajas", idArchivo, idFolio, Fecha_Corte)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub Prepara_Vencimientos_Concentracion_Bajas(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal Fecha_Corte As Date)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Concentracion_Bajas", idArchivo, idFolio, Fecha_Corte, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Concentracion_Bajas", idArchivo, idFolio, Fecha_Corte)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaTransferencias_Primarias(ByVal Status As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaTransferencias_Primarias", Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaTransferencias_Primarias", Status)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaVencimientos_Archivo_Tramite_Seleccionados(ByVal idFolio As Integer, ByVal idStatus As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccionados", idFolio, idStatus, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccionados", idFolio, idStatus, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBajas_Archivo_Tramite(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Tramite", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Tramite", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBajas_Archivo_Tramite_Seleccionados(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Tramite_Seleccionados", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Tramite_Seleccionados", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBajas_Archivo_Concentracion(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Concentracion", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Concentracion", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBajas_Archivo_Concentracion_Seleccionados(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Concentracion_Seleccionados", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Archivo_Concentracion_Seleccionados", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaVencimientos_Archivo_Concentracion_Seleccionados(ByVal idFolio As Integer, ByVal idStatus As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccionados", idFolio, idStatus, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccionados", idFolio, idStatus, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Transferencias_Primarias(ByVal op As Integer, ByVal idFolio As Integer, ByVal Usrid As Integer, ByVal Fecha_Solicitud As Date, ByVal idArchivoOrigen As Integer, ByVal idArchivoDestino As Integer, ByVal Notas_Solicitud As String, ByVal Status As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, idArchivoDestino, Notas_Solicitud, Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, idArchivoDestino, Notas_Solicitud, Status)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Sub ABC_Transferencias_Primarias_Documentos(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idFolioDetalleDocumento As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Documentos", op, idFolio, idFolioDetalle, idFolioDetalleDocumento, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Documentos", op, idFolio, idFolioDetalle, idFolioDetalleDocumento, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Primarias_Expedientes(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Expedientes", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Expedientes", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Primarias_Bajas_Documentos(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Bajas_Documentos", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Bajas_Documentos", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Secundarias_Bajas_Documentos(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Bajas_Documentos", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Bajas_Documentos", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaArchivo_Descripciones_Transferencia_Filtro(ByVal idArchivo As Integer, ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaArchivo_Descripciones_Transferencia_Filtro", idArchivo, idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaArchivo_Descripciones_Transferencia_Filtro", idArchivo, idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaVencimientos_Archivo_Tramite_Seleccion_idDescripcion(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccion_idDescripcion", idArchivo, idFolio, idFolioDetalle, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccion_idDescripcion", idArchivo, idFolio, idFolioDetalle)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaTransferencia_Primaria(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaTransferencia_Primaria", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaTransferencia_Primaria", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaTransferencia_Secundaria(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaTransferencia_Secundaria", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaTransferencia_Secundaria", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function



    Public Function Transfiere_Archivo_Descripciones_primarias(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal idArchivoNew As Integer, ByVal idDocumentoPIDNew As Integer, ByVal idFolioDetalle As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Transfiere_Archivo_Descripciones_primarias", idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew, idFolioDetalle, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Transfiere_Archivo_Descripciones_primarias", idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew, idFolioDetalle)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaVencimientos_Archivo_Tramite_Recepcion(ByVal idFolio As Integer, ByVal idStatus As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Recepcion", idFolio, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Recepcion", idFolio, idStatus)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    '-------------------------------------------------------------------------------------------------------------------
    '-------------------------------------------------------------------------------------------------------------------
    ' Transferencia Secundaria
    Public Function ListaTransferencias_Secunarias(ByVal Status As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaTransferencias_Secunarias", Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaTransferencias_Secunarias", Status)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Transferencias_Secundarias(ByVal op As Integer, ByVal idFolio As Integer, ByVal Usrid As Integer, ByVal Fecha_Solicitud As Date, ByVal idArchivoOrigen As Integer, ByVal idArchivoDestino As Integer, ByVal Notas_Solicitud As String, ByVal Status As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim nID As Integer
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, idArchivoDestino, Notas_Solicitud, Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, idArchivoDestino, Notas_Solicitud, Status)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function ListaVencimientos_Archivo_Concentracion(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion", idFolio, Baja)
        End Select
        db.ExecuteNonQuery(dbCW)
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function



    Public Sub ABC_Transferencias_Secundarias_Expedientes(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Expedientes", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Expedientes", op, idFolio, idFolioDetalle, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Secundarias_Documentos(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer, ByVal idFolioDetalleDocumento As Integer, ByVal idDescripcion As Integer, ByVal idDocumentoPID As Integer, ByVal idStatus As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Documentos", op, idFolio, idFolioDetalle, idFolioDetalleDocumento, idDescripcion, idDocumentoPID, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Documentos", op, idFolio, idFolioDetalle, idFolioDetalleDocumento, idDescripcion, idDocumentoPID, idStatus)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Function ListaVencimientos_Archivo_Tramite_Seleccion(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccion", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Tramite_Seleccion", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function ListaVencimientos_Archivo_Concentracion_Seleccion(ByVal idFolio As Integer, ByVal Baja As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccion", idFolio, Baja, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccion", idFolio, Baja)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Transfiere_Archivo_Descripciones_Secundarias(ByVal idArchivo As Integer, ByVal idDescripcion As Integer, ByVal idArchivoNew As Integer, ByVal idDocumentoPIDNew As Integer, ByVal idFolioDetalle As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Transfiere_Archivo_Descripciones_Secundarias", idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew, idFolioDetalle, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Transfiere_Archivo_Descripciones_Secundarias", idArchivo, idDescripcion, idArchivoNew, idDocumentoPIDNew, idFolioDetalle)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaVencimientos_Archivo_Concentracion_Seleccion_idDescripcion(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal idFolioDetalle As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccion_idDescripcion", idArchivo, idFolio, idFolioDetalle, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaVencimientos_Archivo_Concentracion_Seleccion_idDescripcion", idArchivo, idFolio, idFolioDetalle)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Transferencias_Primarias_Cajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioCaja As Integer, ByVal Caja_Codigo As String, ByVal Caja_Descripcion As String, ByVal Caja_Notas As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Cajas", op, idFolio, idFolioCaja, Caja_Codigo, Caja_Descripcion, Caja_Notas, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Cajas", op, idFolio, idFolioCaja, Caja_Codigo, Caja_Descripcion, Caja_Notas)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Secundarias_Cajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioCaja As Integer, ByVal Caja_Codigo As String, ByVal Caja_Descripcion As String, ByVal Caja_Notas As String)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Cajas", op, idFolio, idFolioCaja, Caja_Codigo, Caja_Descripcion, Caja_Notas, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Cajas", op, idFolio, idFolioCaja, Caja_Codigo, Caja_Descripcion, Caja_Notas)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Function Lista_Transferencias_Primarias_Cajas(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Cajas", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Cajas", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Transferencias_Secundarias_Cajas(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Cajas", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Cajas", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Function Lista_Transferencias_Secundarias_Documentos(ByVal idFolio As Integer, ByVal idStatus As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Documentos", idFolio, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Documentos", idFolio, idStatus)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Transferencias_Primarias_Documentos(ByVal idFolio As Integer, ByVal idStatus As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Documentos", idFolio, idStatus, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Documentos", idFolio, idStatus)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Sub ABC_Transferencias_Primarias_Documentos_Cajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioCaja As Integer, ByVal idFolioDetalle As Integer, ByVal idFolioDetalleDocumento As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Documentos_Cajas", op, idFolio, idFolioCaja, idFolioDetalle, idFolioDetalleDocumento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Documentos_Cajas", op, idFolio, idFolioCaja, idFolioDetalle, idFolioDetalleDocumento)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Secundarias_Documentos_Cajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal idFolioCaja As Integer, ByVal idFolioDetalle As Integer, ByVal idFolioDetalleDocumento As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Documentos_Cajas", op, idFolio, idFolioCaja, idFolioDetalle, idFolioDetalleDocumento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Documentos_Cajas", op, idFolio, idFolioCaja, idFolioDetalle, idFolioDetalleDocumento)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Function Lista_Transferencias_Primarias_Documentos_CajasxidFolioDetalleDocumento(ByVal idFolioDetalleDocumento As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Documentos_CajasxidFolioDetalleDocumento", idFolioDetalleDocumento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Primarias_Documentos_CajasxidFolioDetalleDocumento", idFolioDetalleDocumento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Lista_Transferencias_Secundarias_Documentos_CajasxidFolioDetalleDocumento(ByVal idFolioDetalleDocumento As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Documentos_CajasxidFolioDetalleDocumento", idFolioDetalleDocumento, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Lista_Transferencias_Secundarias_Documentos_CajasxidFolioDetalleDocumento", idFolioDetalleDocumento)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function


    Public Sub Prepara_Vencimientos_Archivo_Concentracion(ByVal idArchivo As Integer, ByVal idFolio As Integer, ByVal Fecha_Corte As DateTime)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Concentracion", idArchivo, idFolio, Fecha_Corte, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Prepara_Vencimientos_Archivo_Concentracion", idArchivo, idFolio, Fecha_Corte)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub


    Public Function ListaBajas_Tramite(ByVal Status As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Tramite", Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Tramite", Status)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBaja_Tramite(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBaja_Tramite", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBaja_Tramite", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBajas_Concentracion(ByVal Status As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBajas_Concentracion", Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBajas_Concentracion", Status)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function ListaBaja_Concentracion(ByVal idFolio As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ListaBaja_Concentracion", idFolio, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ListaBaja_Concentracion", idFolio)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Sub ABC_Transferencias_Primarias_Bajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal Usrid As Integer, ByVal Fecha_Solicitud As Date, ByVal idArchivoOrigen As Integer, ByVal Notas_Solicitud As String, ByVal Status As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Bajas", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, Notas_Solicitud, Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Primarias_Bajas", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, Notas_Solicitud, Status)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub

    Public Sub ABC_Transferencias_Secundarias_Bajas(ByVal op As Integer, ByVal idFolio As Integer, ByVal Usrid As Integer, ByVal Fecha_Solicitud As Date, ByVal idArchivoOrigen As Integer, ByVal Notas_Solicitud As String, ByVal Status As Integer)
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Bajas", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, Notas_Solicitud, Status, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ABC_Transferencias_Secundarias_Bajas", op, idFolio, Usrid, Fecha_Solicitud, idArchivoOrigen, Notas_Solicitud, Status)
        End Select
        db.ExecuteDataSet(dbCW)
    End Sub
    'Reporte Expurgo de Expedientes
    Public Function Lista_Expedientes_Expurgo(ByVal idArchivo As Integer, ByVal fechaInicio As Date, ByVal fechaFin As Date) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("Reporte_Expurgos", idArchivo, fechaInicio, fechaFin, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("Reporte_Expurgos", idArchivo, fechaInicio, fechaFin)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

    Public Function Activar_Nivel(ByVal idDescripcion As Integer, ByVal heredar As Boolean) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim resultado As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                resultado = CType(db.ExecuteScalar("Activar_Nivel", idDescripcion, heredar), Integer)
            Case eTipoBD.SQLServer
                resultado = CType(db.ExecuteScalar("Activar_Nivel", idDescripcion, heredar), Integer)
        End Select
        Return resultado
    End Function

    Public Function Cuenta_Elementos_Nivel(ByVal idArchivo As Integer, ByVal idDocumentoPID As Boolean) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim resultado As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                resultado = CType(db.ExecuteScalar("Cuenta_Elementos_Nivel", idArchivo, idDocumentoPID), Integer)
            Case eTipoBD.SQLServer
                resultado = CType(db.ExecuteScalar("Cuenta_Elementos_Nivel", idArchivo, idDocumentoPID), Integer)
        End Select
        Return resultado
    End Function
	
	Public Function ObtenDocIdPorIdDescripcion(ByVal idDescripcion As Integer) As Integer
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim resultado As Integer = 0

        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                resultado = CType(db.ExecuteScalar("ObtenDocIdPorIdDescripcion", idDescripcion), Integer)
            Case eTipoBD.SQLServer
                resultado = CType(db.ExecuteScalar("ObtenDocIdPorIdDescripcion", idDescripcion), Integer)
        End Select
        Return resultado
    End Function

    Public Function ObtenArchivoDescripcionesArchivisticasPorIdDescripcion(ByVal idDescripcion As Integer) As DataSet
        Dim db As Database = DatabaseFactory.CreateDatabase(mstrCS)
        Dim dbCW As DbCommand = Nothing
        Dim ds As DataSet
        Select Case Me.TipoBD
            Case eTipoBD.Oracle
                dbCW = db.GetStoredProcCommand("ObtenArchivoDescripcionesArchivisticasPorIdDescripcion", idDescripcion, Nothing)
            Case eTipoBD.SQLServer
                dbCW = db.GetStoredProcCommand("ObtenArchivoDescripcionesArchivisticasPorIdDescripcion", idDescripcion)
        End Select
        ds = db.ExecuteDataSet(dbCW)
        Return ds
    End Function

#End Region



End Class


